[
    {
        "text": "Hi, I started using the API, but I have no idea how to get the (lay and back) values ​​of a horse race. Does anyone have a basic example or a link so I can start this development?",
        "files": [
            {
                "id": "F024YAJQ40Z",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U024BRSPXGD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Um1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, I started using the API, but I have no idea how to get the (lay and back) values ​​of a horse race. Does anyone have a basic example or a link so I can start this development?"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1623277625.123300"
    },
    {
        "user": "U01TXCYTCSF",
        "type": "message",
        "ts": "1623279691.123700",
        "client_msg_id": "67d8cc03-1048-44b1-bb71-9eddd81f6748",
        "text": "<@U024BRSPXGD> check this out <https:\/\/github.com\/liampauling\/flumine\/blob\/6f0541d2ba57ab0cbf9389a560e9a41d1ad01cfc\/examples\/strategies\/priceblockage.py#L40>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ga1c53b736aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a1c53b736aa11811fefe2ef48febb67b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "John",
            "real_name": "John Smith",
            "display_name": "John",
            "team": "T4G9NBD2M",
            "name": "huanhuangcn",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "text": "```\n            back_price = get_price(runner.ex.available_to_back, 0)\n```",
                "title": "<https:\/\/github.com\/liampauling\/flumine\/blob\/6f0541d2ba57ab0cbf9389a560e9a41d1ad01cfc\/examples\/strategies\/priceblockage.py | priceblockage.py>",
                "footer": "<https:\/\/github.com\/liampauling\/flumine|liampauling\/flumine>",
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "fallback": "<https:\/\/github.com\/liampauling\/flumine\/blob\/6f0541d2ba57ab0cbf9389a560e9a41d1ad01cfc\/examples\/strategies\/priceblockage.py | priceblockage.py>",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/flumine\/blob\/6f0541d2ba57ab0cbf9389a560e9a41d1ad01cfc\/examples\/strategies\/priceblockage.py#L40",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HOjA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U024BRSPXGD"
                            },
                            {
                                "type": "text",
                                "text": " check this out "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/flumine\/blob\/6f0541d2ba57ab0cbf9389a560e9a41d1ad01cfc\/examples\/strategies\/priceblockage.py#L40"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U024BRSPXGD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01TXCYTCSF",
        "type": "message",
        "ts": "1623279751.124100",
        "client_msg_id": "f0ff00ec-f695-4c2e-92ec-309de7f11ef7",
        "text": "this is a good example <https:\/\/github.com\/liampauling\/flumine\/blob\/6f0541d2ba57ab0cbf9389a560e9a41d1ad01cfc\/examples\/example.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ga1c53b736aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a1c53b736aa11811fefe2ef48febb67b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "John",
            "real_name": "John Smith",
            "display_name": "John",
            "team": "T4G9NBD2M",
            "name": "huanhuangcn",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "text": "```\nimport time\nimport logging\nimport betfairlightweight\nfrom betfairlightweight.filters import streaming_market_filter\nfrom pythonjsonlogger import jsonlogger\n\nfrom flumine import Flumine, clients, BaseStrategy\nfrom flumine.order.trade import Trade\nfrom flumine.order.ordertype import LimitOrder\nfrom flumine.order.order import OrderStatus\n\nlogger = logging.getLogger()\n\ncustom_format = \"%(asctime) %(levelname) %(message)\"\nlog_handler = logging.StreamHandler()\nformatter = jsonlogger.JsonFormatter(custom_format)\nformatter.converter = time.gmtime\nlog_handler.setFormatter(formatter)\nlogger.addHandler(log_handler)\nlogger.setLevel(<http:\/\/logging.INFO|logging.INFO>)\n\n\nclass ExampleStrategy(BaseStrategy):\n    def start(self):\n        # subscribe to streams\n        print(\"starting strategy 'ExampleStrategy'\")\n\n    def check_market_book(self, market, market_book):\n        # process_market_book only executed if this returns True\n        if market_book.status != \"CLOSED\":\n            return True\n\n    def process_market_book(self, market, market_book):\n        # process marketBook object\n        for runner in market_book.runners:\n            if (\n                runner.status == \"ACTIVE\"\n                and runner.last_price_traded\n                and runner.selection_id == 11982403\n            ):\n                trade = Trade(\n                    market_id=market_book.market_id,\n                    selection_id=runner.selection_id,\n                    handicap=runner.handicap,\n                    strategy=self,\n                )\n                order = trade.create_order(\n                    side=\"LAY\", order_type=LimitOrder(price=1.01, size=2.00)\n                )\n                market.place_order(order)\n\n    def process_orders(self, market, orders):\n        for order in orders:\n            if order.status == OrderStatus.EXECUTABLE:\n                if order.elapsed_seconds and order.elapsed_seconds &gt; 5:\n                    # print(order.bet_id, order.average_price_matched, order.size_matched)\n                    if order.size_remaining == 2.00:\n                        market.cancel_order(order, size_reduction=1.51)\n                # market.update_order(order, \"PERSIST\")\n                # if order.order_type.price == 1.01 and order.size_remaining == 0.49:\n                #     market.replace_order(order, 1.02)\n                # if order.order_type.price == 1.02:\n                #     market.replace_order(order, 1.03)\n                # if order.order_type.price == 1.03:\n                #     market.replace_order(order, 1.05)\n\n\ntrading = betfairlightweight.APIClient(\"username\")\nclient = clients.BetfairClient(trading)\n\nframework = Flumine(client=client)\n\nstrategy = ExampleStrategy(\n    market_filter=streaming_market_filter(market_ids=[\"1.170378175\"]),\n)\nframework.add_strategy(strategy)\n\nframework.run()\n\n```",
                "title": "<https:\/\/github.com\/liampauling\/flumine\/blob\/6f0541d2ba57ab0cbf9389a560e9a41d1ad01cfc\/examples\/example.py | example.py>",
                "footer": "<https:\/\/github.com\/liampauling\/flumine|liampauling\/flumine>",
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "fallback": "<https:\/\/github.com\/liampauling\/flumine\/blob\/6f0541d2ba57ab0cbf9389a560e9a41d1ad01cfc\/examples\/example.py | example.py>",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/flumine\/blob\/6f0541d2ba57ab0cbf9389a560e9a41d1ad01cfc\/examples\/example.py",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vX+6Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is a good example "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/flumine\/blob\/6f0541d2ba57ab0cbf9389a560e9a41d1ad01cfc\/examples\/example.py"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]