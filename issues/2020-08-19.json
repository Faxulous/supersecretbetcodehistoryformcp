[
    {
        "subtype": "channel_join",
        "user": "U019G4J8RMF",
        "text": "<@U019G4J8RMF> has joined the channel",
        "type": "message",
        "ts": "1597823547.159100"
    },
    {
        "subtype": "channel_join",
        "user": "U0190FBCW85",
        "text": "<@U0190FBCW85> has joined the channel",
        "type": "message",
        "ts": "1597824179.159200"
    },
    {
        "user": "U019SGFU4AU",
        "type": "message",
        "ts": "1597861513.159300",
        "client_msg_id": "fb042759-f353-41de-b6d4-33019464e10b",
        "text": "Thanks for getting back! The code I'm running is from betfairlightweight.filters import (\n    streaming_market_filter,\n    streaming_market_data_filter,\n)\n\ntrading = betfairlightweight.APIClient(username, password, app_key=api_key)\ntrading.login_interactive()\nbetfair_socket = trading.streaming.create_stream()\nmarket_filter = streaming_market_filter(\n    event_type_ids=['29946086']\n)\nmarket_data_filter = streaming_market_data_filter(\n    fields=['EX_ALL_OFFERS', 'EX_MARKET_DEF'],\n    ladder_levels=1\n)\n\nbetfair_socket.subscribe_to_markets(\n    market_filter=market_filter,\n    market_data_filter=market_data_filter,\n)\n\nbetfair_socket.start()  # blocking",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "b0771eac1ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-18\/1314908020452_b0771eac1ae8b0214361_72.png",
            "first_name": "Conor",
            "real_name": "Conor Larkin",
            "display_name": "JojoBeans",
            "team": "T4G9NBD2M",
            "name": "conorlarkin9",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597813563.158900",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yegee",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for getting back! The code I'm running is from betfairlightweight.filters import (\n    streaming_market_filter,\n    streaming_market_data_filter,\n)\n\ntrading = betfairlightweight.APIClient(username, password, app_key=api_key)\ntrading.login_interactive()\nbetfair_socket = trading.streaming.create_stream()\nmarket_filter = streaming_market_filter(\n    event_type_ids=['29946086']\n)\nmarket_data_filter = streaming_market_data_filter(\n    fields=['EX_ALL_OFFERS', 'EX_MARKET_DEF'],\n    ladder_levels=1\n)\n\nbetfair_socket.subscribe_to_markets(\n    market_filter=market_filter,\n    market_data_filter=market_data_filter,\n)\n\nbetfair_socket.start()  # blocking"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U019SGFU4AU",
        "type": "message",
        "ts": "1597861536.159500",
        "client_msg_id": "7bf639f7-7acf-40ea-928f-5a9045f5d153",
        "text": "The output looks like\n```---------------------------------------------------------------------------\nSocketError                               Traceback (most recent call last)\n&lt;ipython-input-48-10c95a06d625&gt; in &lt;module&gt;\n     21 )\n     22 \n---&gt; 23 betfair_socket.start()  # blocking\n\n~\/anaconda3\/envs\/py36_new\/lib\/python3.6\/site-packages\/betfairlightweight\/streaming\/betfairstream.py in start(self)\n     57             self._connect()\n     58             self.authenticate()\n---&gt; 59         self._read_loop()\n     60 \n     61     def stop(self) -&gt; None:\n\n~\/anaconda3\/envs\/py36_new\/lib\/python3.6\/site-packages\/betfairlightweight\/streaming\/betfairstream.py in _read_loop(self)\n    200         \"\"\"\n    201         while self._running:\n--&gt; 202             received_data_raw = self._receive_all()\n    203             if self._running:\n    204                 self.receive_count += 1\n\n~\/anaconda3\/envs\/py36_new\/lib\/python3.6\/site-packages\/betfairlightweight\/streaming\/betfairstream.py in _receive_all(self)\n    232                     raise SocketError(\n    233                         \"[Connect: %s]: Connection closed by server\"\n--&gt; 234                         % (self._unique_id,)\n    235                     )\n    236                 else:\n\nSocketError: [Connect: 2]: Connection closed by server```\n",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "b0771eac1ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-18\/1314908020452_b0771eac1ae8b0214361_72.png",
            "first_name": "Conor",
            "real_name": "Conor Larkin",
            "display_name": "JojoBeans",
            "team": "T4G9NBD2M",
            "name": "conorlarkin9",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597813563.158900",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "klm0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The output looks like\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "---------------------------------------------------------------------------\nSocketError                               Traceback (most recent call last)\n<ipython-input-48-10c95a06d625> in <module>\n     21 )\n     22 \n---> 23 betfair_socket.start()  # blocking\n\n~\/anaconda3\/envs\/py36_new\/lib\/python3.6\/site-packages\/betfairlightweight\/streaming\/betfairstream.py in start(self)\n     57             self._connect()\n     58             self.authenticate()\n---> 59         self._read_loop()\n     60 \n     61     def stop(self) -> None:\n\n~\/anaconda3\/envs\/py36_new\/lib\/python3.6\/site-packages\/betfairlightweight\/streaming\/betfairstream.py in _read_loop(self)\n    200         \"\"\"\n    201         while self._running:\n--> 202             received_data_raw = self._receive_all()\n    203             if self._running:\n    204                 self.receive_count += 1\n\n~\/anaconda3\/envs\/py36_new\/lib\/python3.6\/site-packages\/betfairlightweight\/streaming\/betfairstream.py in _receive_all(self)\n    232                     raise SocketError(\n    233                         \"[Connect: %s]: Connection closed by server\"\n--> 234                         % (self._unique_id,)\n    235                     )\n    236                 else:\n\nSocketError: [Connect: 2]: Connection closed by server"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1597862795.160000",
        "client_msg_id": "FA278FD8-64FB-4C13-ABAD-BADEF7D5D7B0",
        "text": "Try with a listener like this example <https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaming.py|https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaming.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597813563.158900",
        "parent_user_id": "U4H19D1D2",
        "attachments": [
            {
                "fallback": "[liampauling\/betfair] examples\/examplestreaming.py",
                "text": "```\nimport logging\nimport queue\nimport threading\n\nimport betfairlightweight\nfrom betfairlightweight.filters import (\n    streaming_market_filter,\n    streaming_market_data_filter,\n)\n\n\n# setup logging\nlogging.basicConfig(level=<http:\/\/logging.INFO|logging.INFO>)  # change to DEBUG to see log all updates\n\n# create trading instance (app key must be activated for streaming)\ntrading = betfairlightweight.APIClient(\"username\", \"password\", app_key=\"appKey\")\n\n# login\ntrading.login()\n\n# create queue\noutput_queue = queue.Queue()\n\n# create stream listener\nlistener = betfairlightweight.StreamListener(output_queue=output_queue)\n\n# create stream\nstream = trading.streaming.create_stream(listener=listener)\n\n# create filters (GB WIN racing)\nmarket_filter = streaming_market_filter(\n    event_type_ids=[\"7\"], country_codes=[\"GB\"], market_types=[\"WIN\"]\n)\nmarket_data_filter = streaming_market_data_filter(\n    fields=[\"EX_BEST_OFFERS\", \"EX_MARKET_DEF\"], ladder_levels=3\n)\n\n# subscribe\nstreaming_unique_id = stream.subscribe_to_markets(\n    market_filter=market_filter,\n    market_data_filter=market_data_filter,\n    conflate_ms=1000,  # send update every 1000ms\n)\n\n# start stream in a new thread (in production would need err handling)\nt = threading.Thread(target=stream.start, daemon=True)\nt.start()\n\n\"\"\"\nData can also be accessed by using the snap function in the listener, e.g:\n\n    market_books = listener.snap(\n        market_ids=[1.12345323]\n    )\n\nErrors need to be caught at stream.start, resubscribe can then be used to\nprevent full image being sent, e.g:\n\n    streaming_unique_id = stream.subscribe_to_markets(\n        market_filter=market_filter,\n        market_data_filter=market_data_filter,\n        conflate_ms=1000,  # send update every 1000ms\n        initial_clk=listener.initial_clk,\n        clk=listener.clk,\n    )\n\nThe streaming unique id is returned in the market book which allows multiple\nstreams to be differentiated if multiple streams feed into the same queue.\n\"\"\"\n\n# check for updates in output queue\nwhile True:\n    market_books = output_queue.get()\n    print(market_books)\n\n    for market_book in market_books:\n        print(\n            market_book,\n            market_book.streaming_unique_id,  # unique id of stream (returned from subscribe request)\n            market_book.streaming_update,  # json update received\n            market_book.market_definition,  # streaming definition, similar to catalogue request\n            market_book.publish_time,  # betfair publish time of update\n        )\n\n```",
                "title": "examples\/examplestreaming.py",
                "footer": "<https:\/\/github.com\/liampauling\/betfair|liampauling\/betfair>",
                "id": 1,
                "title_link": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaming.py",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaming.py",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7kYP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Try with a listener like this example "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaming.py",
                                "text": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaming.py"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U019SGFU4AU",
        "type": "message",
        "ts": "1597865931.160300",
        "client_msg_id": "5f8d84be-3f62-4b2e-bf57-856079f681f9",
        "text": "I've tried that and I seem to be further along but now I'm getting betfairlightweight.exceptions.ListenerError: connection_id: 107-190820193544-1162785, data: {\"op\":\"status\",\"id\":2,\"statusCode\":\"FAILURE\",\"errorCode\":\"NOT_AUTHORIZED\",\"errorMessage\":\"AppKey is not configured for service\",\"connectionClosed\":true,\"connectionId\":\"107-190820193544-1162785\"}\nThanks for all the help!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "b0771eac1ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-18\/1314908020452_b0771eac1ae8b0214361_72.png",
            "first_name": "Conor",
            "real_name": "Conor Larkin",
            "display_name": "JojoBeans",
            "team": "T4G9NBD2M",
            "name": "conorlarkin9",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597813563.158900",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fzw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've tried that and I seem to be further along but now I'm getting betfairlightweight.exceptions.ListenerError: connection_id: 107-190820193544-1162785, data: {\"op\":\"status\",\"id\":2,\"statusCode\":\"FAILURE\",\"errorCode\":\"NOT_AUTHORIZED\",\"errorMessage\":\"AppKey is not configured for service\",\"connectionClosed\":true,\"connectionId\":\"107-190820193544-1162785\"}\nThanks for all the help!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1597865968.161000",
        "client_msg_id": "3090775E-2F24-441A-8B74-CD234EAB6645",
        "text": "You need to send an email to bdp and get your app key authorised for streaming ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597813563.158900",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SQX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You need to send an email to bdp and get your app key authorised for streaming "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U019SGFU4AU",
        "type": "message",
        "ts": "1597865969.161200",
        "client_msg_id": "d59d2b02-2016-4985-9e26-ed2260e783a5",
        "text": "I contacted to support to enable streaming (I'm on an old delayed key) and they said they did but perhaps not...",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "b0771eac1ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-18\/1314908020452_b0771eac1ae8b0214361_72.png",
            "first_name": "Conor",
            "real_name": "Conor Larkin",
            "display_name": "JojoBeans",
            "team": "T4G9NBD2M",
            "name": "conorlarkin9",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597813563.158900",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5ur1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I contacted to support to enable streaming (I'm on an old delayed key) and they said they did but perhaps not..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U019SGFU4AU",
        "type": "message",
        "ts": "1597866004.161800",
        "client_msg_id": "1068057f-71d1-46ff-9d84-ceeeb8b3a987",
        "text": "Okay I'll try an email. Thanks",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "b0771eac1ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-18\/1314908020452_b0771eac1ae8b0214361_72.png",
            "first_name": "Conor",
            "real_name": "Conor Larkin",
            "display_name": "JojoBeans",
            "team": "T4G9NBD2M",
            "name": "conorlarkin9",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597813563.158900",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6\/4Yj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Okay I'll try an email. Thanks"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1597866021.162500",
        "client_msg_id": "014B7302-A1F3-44D6-B95B-30596C7A4369",
        "text": "Send me a private message if you want your key authorised without the fee ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597813563.158900",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZrNC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Send me a private message if you want your key authorised without the fee "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0198BFR9GR",
        "type": "message",
        "ts": "1597879433.163100",
        "client_msg_id": "89d4bc98-e403-479e-9626-5a4d56e5b5f4",
        "text": "*Context:* New to using this package. Have a hopefully quick question regarding recording market data in a manner that is consistent with the Backtesting and Paper Trading components of Flumine.\n\n*Narrow question*: Does anyone have the MarketRecorder data file that is referenced in the marketrecorder.py file located in the flumine examples? (<https:\/\/github.com\/liampauling\/flumine\/blob\/69d68904b4ae0c8ba3c0d60991c3a6a38066040d\/examples\/marketrecorder.py#L8>)\n\n*Broader question*: What is the standard data interface to ensure backtesting\/paper trading works with Flumine?\nAn interface is alluded to in a few different places. One example is in the following code snippet at the following link:\n\n...\ntrading = betfairlightweight.APIClient(\"username\")\nclient = clients.BetfairClient(trading, paper_trade=True)\nframework = Flumine(client=client)\n\nstrategy = ExampleStrategy(\n    market_filter={\"markets\": [_*\"\/tmp\/marketdata\/1.170212754\"*_]}\n)\nframework.add_strategy(strategy)\n...\n\n<https:\/\/liampauling.github.io\/flumine\/quickstart\/#backtesting>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "f51a11a92c59",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-19\/1311796831155_f51a11a92c590d48d96c_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "christopherlanctot",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "QuickStart - flumine",
                "title_link": "https:\/\/liampauling.github.io\/flumine\/quickstart\/#backtesting",
                "text": "Trading framework for Betfair API-NG.",
                "fallback": "QuickStart - flumine",
                "from_url": "https:\/\/liampauling.github.io\/flumine\/quickstart\/#backtesting",
                "service_icon": "https:\/\/liampauling.github.io\/flumine\/assets\/images\/favicon.png",
                "service_name": "liampauling.github.io",
                "id": 1,
                "original_url": "https:\/\/liampauling.github.io\/flumine\/quickstart\/#backtesting"
            },
            {
                "fallback": "[liampauling\/flumine] examples\/marketrecorder.py:8",
                "text": "```\nfrom strategies.marketrecorder import MarketRecorder\n```",
                "title": "examples\/marketrecorder.py:8",
                "footer": "<https:\/\/github.com\/liampauling\/flumine|liampauling\/flumine>",
                "id": 2,
                "title_link": "https:\/\/github.com\/liampauling\/flumine\/blob\/69d68904b4ae0c8ba3c0d60991c3a6a38066040d\/examples\/marketrecorder.py#L8",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/flumine\/blob\/69d68904b4ae0c8ba3c0d60991c3a6a38066040d\/examples\/marketrecorder.py#L8",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oQct",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Context:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " New to using this package. Have a hopefully quick question regarding recording market data in a manner that is consistent with the Backtesting and Paper Trading components of Flumine.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Narrow question",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": Does anyone have the MarketRecorder data file that is referenced in the marketrecorder.py file located in the flumine examples? ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/flumine\/blob\/69d68904b4ae0c8ba3c0d60991c3a6a38066040d\/examples\/marketrecorder.py#L8"
                            },
                            {
                                "type": "text",
                                "text": ")\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Broader question",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": What is the standard data interface to ensure backtesting\/paper trading works with Flumine?\nAn interface is alluded to in a few different places. One example is in the following code snippet at the following link:\n\n...\ntrading = betfairlightweight.APIClient(\"username\")\nclient = clients.BetfairClient(trading, paper_trade=True)\nframework = Flumine(client=client)\n\nstrategy = ExampleStrategy(\n    market_filter={\"markets\": ["
                            },
                            {
                                "type": "text",
                                "text": "\"\/tmp\/marketdata\/1.170212754\"",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "]}\n)\nframework.add_strategy(strategy)\n...\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/liampauling.github.io\/flumine\/quickstart\/#backtesting"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]