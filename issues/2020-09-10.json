[
    {
        "subtype": "channel_join",
        "user": "U019ZKQFNR5",
        "text": "<@U019ZKQFNR5> has joined the channel",
        "type": "message",
        "ts": "1599730230.041500"
    },
    {
        "subtype": "channel_join",
        "user": "U01ABT97THT",
        "text": "<@U01ABT97THT> has joined the channel",
        "type": "message",
        "ts": "1599746848.041700"
    },
    {
        "user": "UPMUFSGCR",
        "type": "message",
        "ts": "1599770422.044300",
        "edited": {
            "user": "UPMUFSGCR",
            "ts": "1599770479.000000"
        },
        "client_msg_id": "f1fb3559-f551-4a29-b469-60e989ff5a1a",
        "text": "<@U4H19D1D2> I have situations where I have backed a horse at high odds. Then I try to lay the horse at lower odds. StrategyExposure prevents me from doing so, in a way that I believe is unjustified.\n\ne.g. If I back £2 @ 1000, I should be able to lay £2 @ 500, as that is decreasing my exposure. However, I can't do that in this unit test:\n\n```@mock.patch(\"flumine.controls.tradingcontrols.StrategyExposure._on_error\")\ndef test_validate_selection2(self, mock_on_error):\n    mock_market = mock.Mock()\n    blotter = Blotter(mock_market)\n    mock_market.blotter = blotter\n\n    mock_strategy = mock.Mock()\n    mock_lookup = mock.Mock()\n\n    mock_matched_order = mock.Mock()\n    mock_matched_order.order_type.ORDER_TYPE = OrderTypes.LIMIT\n    mock_matched_order.side = 'BACK'\n    mock_matched_order.order_type.size = 2\n    mock_matched_order.size_matched = 2\n    mock_matched_order.average_price_matched = 1000.\n    mock_matched_order.id = 123\n    mock_matched_order.trade.strategy = mock_strategy\n    mock_matched_order.lookup = mock_lookup\n\n    blotter._orders = {123:mock_matched_order}\n\n    self.mock_flumine.markets.markets = {\"1.234\": mock_market}\n\n    order = mock.Mock()\n    order.trade.strategy = mock_strategy\n    order.trade.strategy.max_order_exposure = float('inf')\n    order.trade.strategy.max_selection_exposure = 10\n    order.order_type.ORDER_TYPE = OrderTypes.LIMIT\n    order.side = \"LAY\"\n    order.order_type.size = 2\n    order.order_type.price = 500.\n    order.lookup = mock_lookup\n    order_package = mock.Mock()\n    order_package.market_id = \"1.234\"\n    order_package.package_type = OrderPackageType.PLACE\n    order_package.__iter__ = mock.Mock(return_value=iter([order]))\n\n    self.trading_control._validate(order_package)\n\n    self.assertEqual(0, mock_on_error.call_count)```\nApologies in advance if I've made a mistake and am making a false accusation.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "31c0bb5a442c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/812386967189_31c0bb5a442c5b8d2c61_72.png",
            "first_name": "Jon",
            "real_name": "Jon Jon Jon Jon Jon Jon Jon Jon",
            "display_name": "Jonjonjon",
            "team": "T4G9NBD2M",
            "name": "fcmisc",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A5n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": " I have situations where I have backed a horse at high odds. Then I try to lay the horse at lower odds. StrategyExposure prevents me from doing so, in a way that I believe is unjustified.\n\ne.g. If I back £2 @ 1000, I should be able to lay £2 @ 500, as that is decreasing my exposure. However, I can't do that in this unit test:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "@mock.patch(\"flumine.controls.tradingcontrols.StrategyExposure._on_error\")\ndef test_validate_selection2(self, mock_on_error):\n    mock_market = mock.Mock()\n    blotter = Blotter(mock_market)\n    mock_market.blotter = blotter\n\n    mock_strategy = mock.Mock()\n    mock_lookup = mock.Mock()\n\n    mock_matched_order = mock.Mock()\n    mock_matched_order.order_type.ORDER_TYPE = OrderTypes.LIMIT\n    mock_matched_order.side = 'BACK'\n    mock_matched_order.order_type.size = 2\n    mock_matched_order.size_matched = 2\n    mock_matched_order.average_price_matched = 1000.\n    mock_matched_order.id = 123\n    mock_matched_order.trade.strategy = mock_strategy\n    mock_matched_order.lookup = mock_lookup\n\n    blotter._orders = {123:mock_matched_order}\n\n    self.mock_flumine.markets.markets = {\"1.234\": mock_market}\n\n    order = mock.Mock()\n    order.trade.strategy = mock_strategy\n    order.trade.strategy.max_order_exposure = float('inf')\n    order.trade.strategy.max_selection_exposure = 10\n    order.order_type.ORDER_TYPE = OrderTypes.LIMIT\n    order.side = \"LAY\"\n    order.order_type.size = 2\n    order.order_type.price = 500.\n    order.lookup = mock_lookup\n    order_package = mock.Mock()\n    order_package.market_id = \"1.234\"\n    order_package.package_type = OrderPackageType.PLACE\n    order_package.__iter__ = mock.Mock(return_value=iter([order]))\n\n    self.trading_control._validate(order_package)\n\n    self.assertEqual(0, mock_on_error.call_count)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Apologies in advance if I've made a mistake and am making a false accusation."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]