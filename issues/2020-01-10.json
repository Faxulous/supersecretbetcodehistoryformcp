[
    {
        "subtype": "channel_join",
        "user": "US72QTH33",
        "text": "<@US72QTH33> has joined the channel",
        "type": "message",
        "ts": "1578663683.006800"
    },
    {
        "user": "US72QTH33",
        "type": "message",
        "ts": "1578663857.007200",
        "client_msg_id": "6597c86e-b19f-4ec2-b68b-b0fbe996c74d",
        "text": "Hi.\nI am using a slightly different structure to the examples on the site (<https:\/\/github.com\/liampauling\/betfair>) as I have been following the guide (<https:\/\/betfair-datascientists.github.io\/api\/apiPythontutorial\/>).\nI am looking for the horses names. I don't mind how I get the names (either when I list the runners in a race, or just finding the specific name that matches with a specific selection_id using a separate bit of code).\nI find the list of the runners in a race via the following code:\n```def process_runner_books(runner_books):\n    best_back_prices = [runner_book.ex.available_to_back[0].price\n                        if runner_book.ex.available_to_back\n                        else 100\n                        for runner_book\n                        in runner_books]\n    best_lay_prices = [runner_book.ex.available_to_lay[0].price\n                       if runner_book.ex.available_to_lay\n                       else 1000.0\n                       for runner_book\n                       in runner_books]\n    selection_ids = [runner_book.selection_id for runner_book in runner_books]\n    last_prices_traded = [runner_book.last_price_traded for runner_book in runner_books]\n    df = pd.DataFrame({\n        'Last Price Traded': last_prices_traded,\n        'Best Back Price': best_back_prices,\n        'Selection ID': selection_ids,\n        'Best Lay Price': best_lay_prices,\n    }).set_index('Last Price Traded').sort_index()\n    return df\n\ndef getting_market_info_for_all_the_horses_in_a_race():\n    global runners_df\n    price_filter = betfairlightweight.filters.price_projection(price_data=['EX_BEST_OFFERS'])\n    market_books = trading.betting.list_market_book(market_ids=[betfair_win_race_id],price_projection=price_filter,)\n    market_book = market_books[0]\n    runners_df = process_runner_books(market_book.runners)```\nIf anyone could help me get the horses names I would be most grateful.\nCheers",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g4b93667b790",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4b93667b790fb7de95bb5c592cb875e5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "oliver",
            "display_name": "oliver",
            "team": "T4G9NBD2M",
            "name": "ollie__lenton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "liampauling\/betfair",
                "title_link": "https:\/\/github.com\/liampauling\/betfair",
                "text": "Lightweight python wrapper for Betfair API-NG (with streaming) - liampauling\/betfair",
                "fallback": "GitHub: liampauling\/betfair",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/12016537?s=400&v=4",
                "from_url": "https:\/\/github.com\/liampauling\/betfair",
                "thumb_width": 392,
                "thumb_height": 392,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/liampauling\/betfair"
            },
            {
                "title": "API tutorial in Python - The Automation Hub",
                "title_link": "https:\/\/betfair-datascientists.github.io\/api\/apiPythontutorial\/",
                "text": "Documentation, guides and articles on creating, developing and implementing automated betting strategies, using data analysis to inform betting models and how to interact with the Betfair API.",
                "fallback": "API tutorial in Python - The Automation Hub",
                "from_url": "https:\/\/betfair-datascientists.github.io\/api\/apiPythontutorial\/",
                "service_icon": "https:\/\/betfair-datascientists.github.io\/img\/BetfairFavicon.ico",
                "service_name": "betfair-datascientists.github.io",
                "id": 2,
                "original_url": "https:\/\/betfair-datascientists.github.io\/api\/apiPythontutorial\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p4nD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi.\nI am using a slightly different structure to the examples on the site ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair"
                            },
                            {
                                "type": "text",
                                "text": ") as I have been following the guide ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/betfair-datascientists.github.io\/api\/apiPythontutorial\/"
                            },
                            {
                                "type": "text",
                                "text": ").\nI am looking for the horses names. I don't mind how I get the names (either when I list the runners in a race, or just finding the specific name that matches with a specific selection_id using a separate bit of code).\nI find the list of the runners in a race via the following code:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "def process_runner_books(runner_books):\n    best_back_prices = [runner_book.ex.available_to_back[0].price\n                        if runner_book.ex.available_to_back\n                        else 100\n                        for runner_book\n                        in runner_books]\n    best_lay_prices = [runner_book.ex.available_to_lay[0].price\n                       if runner_book.ex.available_to_lay\n                       else 1000.0\n                       for runner_book\n                       in runner_books]\n    selection_ids = [runner_book.selection_id for runner_book in runner_books]\n    last_prices_traded = [runner_book.last_price_traded for runner_book in runner_books]\n    df = pd.DataFrame({\n        'Last Price Traded': last_prices_traded,\n        'Best Back Price': best_back_prices,\n        'Selection ID': selection_ids,\n        'Best Lay Price': best_lay_prices,\n    }).set_index('Last Price Traded').sort_index()\n    return df\n\ndef getting_market_info_for_all_the_horses_in_a_race():\n    global runners_df\n    price_filter = betfairlightweight.filters.price_projection(price_data=['EX_BEST_OFFERS'])\n    market_books = trading.betting.list_market_book(market_ids=[betfair_win_race_id],price_projection=price_filter,)\n    market_book = market_books[0]\n    runners_df = process_runner_books(market_book.runners)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If anyone could help me get the horses names I would be most grateful.\nCheers"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1578664205.007700",
        "client_msg_id": "922396B4-737F-4239-91F6-C95FC4B181A3",
        "text": "You need to get the market catalogues ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nx8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You need to get the market catalogues "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "US72QTH33",
        "type": "message",
        "ts": "1578666237.009500",
        "client_msg_id": "37bc7e5c-12ca-4101-a6bf-0842aa8a32b6",
        "text": "Hi Mo. I fancy that is the route I just can't get it right! The code I tried (along with other slight tweaks) was:     `def finding_the_amount_of_money_match_on_each_market2():`\n    `global betfair_win_race_id`\n    `datetime_in_a_week = (datetime.datetime.utcnow() + datetime.timedelta(minutes=1100)).strftime(\"%Y-%m-%dT%TZ\")`\n    `market_catalogue_filter = betfairlightweight.filters.market_filter(market_ids=[1.167181875], market_start_time={'to': datetime_in_a_week})`\n    `market_catalogues = trading.betting.list_market_catalogue(filter=market_catalogue_filter,`\n        `market_projection=[\"RUNNER_DESCRIPTION\",\"EVENT_TYPE\",\"EVENT\",\"COMPETITION\",\"RUNNER_METADATA\",\"MARKET_START_TIME\"],`\n        `max_results='100',`\n        `sort='FIRST_TO_START')`\n    `market_types_mooney_valley = pd.DataFrame({`\n        `'name': [market_cat_object.runners for market_cat_object in market_catalogues],})`\n    `print(market_types_mooney_valley)`      but the ouput was just the selection_ids for the horses",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g4b93667b790",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4b93667b790fb7de95bb5c592cb875e5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "oliver",
            "display_name": "oliver",
            "team": "T4G9NBD2M",
            "name": "ollie__lenton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f9au",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi Mo. I fancy that is the route I just can't get it right! The code I tried (along with other slight tweaks) was:     "
                            },
                            {
                                "type": "text",
                                "text": "def finding_the_amount_of_money_match_on_each_market2():",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    global betfair_win_race_id",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    datetime_in_a_week = (datetime.datetime.utcnow() + datetime.timedelta(minutes=1100)).strftime(\"%Y-%m-%dT%TZ\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    market_catalogue_filter = betfairlightweight.filters.market_filter(market_ids=[1.167181875], market_start_time={'to': datetime_in_a_week})",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    market_catalogues = trading.betting.list_market_catalogue(filter=market_catalogue_filter,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        market_projection=[\"RUNNER_DESCRIPTION\",\"EVENT_TYPE\",\"EVENT\",\"COMPETITION\",\"RUNNER_METADATA\",\"MARKET_START_TIME\"],",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        max_results='100',",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        sort='FIRST_TO_START')",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    market_types_mooney_valley = pd.DataFrame({",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        'name': [market_cat_object.runners for market_cat_object in market_catalogues],})",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    print(market_types_mooney_valley) ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "     but the ouput was just the selection_ids for the horses"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1578667005.011000",
        "client_msg_id": "C3327FCE-F430-4B5C-8F8A-1EBBD5BA5B89",
        "text": "The runners is a list of RunnerCatalogue objects. Look the definition of that object up here: <https:\/\/github.com\/liampauling\/betfair\/blob\/master\/betfairlightweight\/resources\/bettingresources.py|https:\/\/github.com\/liampauling\/betfair\/blob\/master\/betfairlightweight\/resources\/bettingresources.py> and see what fields you want",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "liampauling\/betfair",
                "title_link": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/betfairlightweight\/resources\/bettingresources.py",
                "text": "Lightweight python wrapper for Betfair API-NG (with streaming) - liampauling\/betfair",
                "fallback": "GitHub: liampauling\/betfair",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/12016537?s=400&v=4",
                "from_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/betfairlightweight\/resources\/bettingresources.py",
                "thumb_width": 392,
                "thumb_height": 392,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/betfairlightweight\/resources\/bettingresources.py"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z7G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The runners is a list of RunnerCatalogue objects. Look the definition of that object up here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/betfairlightweight\/resources\/bettingresources.py",
                                "text": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/betfairlightweight\/resources\/bettingresources.py"
                            },
                            {
                                "type": "text",
                                "text": " and see what fields you want"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "US72QTH33",
        "type": "message",
        "ts": "1578668344.012800",
        "client_msg_id": "4d08e8ef-33b6-479e-b077-0eec98f4444f",
        "text": "I have had a look at that link before and frankly it goes straight over my head! The relevant section (lines 211 to 231) is structured differently to how I have written my code and I don't know\/understand how to convert it.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g4b93667b790",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4b93667b790fb7de95bb5c592cb875e5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "oliver",
            "display_name": "oliver",
            "team": "T4G9NBD2M",
            "name": "ollie__lenton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TflbE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have had a look at that link before and frankly it goes straight over my head! The relevant section (lines 211 to 231) is structured differently to how I have written my code and I don't know\/understand how to convert it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1578669044.014600",
        "client_msg_id": "304f3267-37a5-4116-b72c-2da001a51b49",
        "text": "e.g.\n\n```for mc in market_catalogues:\n    print(pd.DataFrame({'selection_id': r.selection_id, 'name': r.name} for r in mc.runners))```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0bb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "e.g.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for mc in market_catalogues:\n    print(pd.DataFrame({'selection_id': r.selection_id, 'name': r.name} for r in mc.runners))"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "US72QTH33",
        "type": "message",
        "ts": "1578669729.015000",
        "client_msg_id": "e81f4699-d86c-42f4-a85e-77fd6398c3c8",
        "text": "Done. Mo, you are a star.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g4b93667b790",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4b93667b790fb7de95bb5c592cb875e5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "oliver",
            "display_name": "oliver",
            "team": "T4G9NBD2M",
            "name": "ollie__lenton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zOyc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Done. Mo, you are a star."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1578669767.015300",
        "client_msg_id": "1cb5b277-d9bb-4f0c-8830-64bbdda7d4ca",
        "text": ":+1:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h8U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]