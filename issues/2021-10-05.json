[
    {
        "user": "U0160E9HS2G",
        "type": "message",
        "ts": "1633450821.240100",
        "client_msg_id": "9a807f4c-f7a4-4117-baaa-dc6c8940dda1",
        "text": "Hi everyone, what's the recommended approach for working with the official atp\/wta scores endpoint within flumine? Background worker that writes to market context? Is there a faster way, or one that would allow an immediate reaction to a score update rather than waiting for the next marketbook to process? Cheers",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g824e1cc27e2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/824e1cc27e2d6ad6290dfb21ea43f1df.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "JC",
            "display_name": "JC",
            "team": "T4G9NBD2M",
            "name": "joecussen96",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u6P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi everyone, what's the recommended approach for working with the official atp\/wta scores endpoint within flumine? Background worker that writes to market context? Is there a faster way, or one that would allow an immediate reaction to a score update rather than waiting for the next marketbook to process? Cheers"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1633459976.240500",
        "client_msg_id": "7E960ACC-C900-4E06-9B63-B5347B5219FF",
        "text": "Worker and CustomEvent <https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/workers\/inplayservice.py|https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/workers\/inplayservice.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633459976.240500",
        "reply_count": 29,
        "reply_users_count": 2,
        "latest_reply": "1635926078.038500",
        "reply_users": [
            "U0160E9HS2G",
            "U4H19D1D2"
        ],
        "replies": [
            {
                "user": "U0160E9HS2G",
                "ts": "1633942810.298400"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1633943968.298700"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1633945971.298900"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1634560394.329100"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1634627799.329400"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1634636812.329600"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1634642874.330000"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1634642915.330200"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1634643058.330500"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1634643463.330700"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1634645374.330900"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1634646775.331100"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1634647379.331300"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1634656557.331500"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1634724216.332300"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1634730073.332700"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1634731044.334700"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1635346984.012300"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1635348396.013300"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1635348400.013600"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1635350311.013800"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1635408530.018000"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1635413902.019700"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1635427174.020500"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1635496400.020900"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1635497171.021400"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1635505629.022800"
            },
            {
                "user": "U0160E9HS2G",
                "ts": "1635526735.023000"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1635926078.038500"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1635926078.038500",
        "attachments": [
            {
                "text": "```\nimport logging\nfrom flumine.utils import get_event_ids\nfrom flumine.events.events import CustomEvent\n\nlogger = logging.getLogger(__name__)\n\n\"\"\"\nSee examples\/tennisexample.py in how\nto use this worker for betting.\n\"\"\"\n\n\ndef poll_in_play_service(context: dict, flumine, event_type_id: str) -&gt; None:\n    trading = flumine.client.betting_client\n    event_ids = get_event_ids(flumine.markets, event_type_id=event_type_id)\n    for event_id in event_ids:\n        response = trading.in_play_service.get_scores(event_ids=[event_id])\n        if response is None:\n            logger.warning(\n                \"poll_in_play_service\",\n                extra={\"response\": response, \"event_id\": event_id},\n            )\n            continue\n\n        for score in response:\n            flumine.handler_queue.put(CustomEvent(score, callback))\n\n\ndef callback(flumine, event):\n    # update market context\n    score = event.event\n    for market in flumine.markets:\n        if market.event_id == str(score.event_id):\n            logger.debug(\n                \"Updated market {0} with event {1} scores data\".format(\n                    market.market_id, market.event_id\n                )\n            )\n            market.context[\"score\"] = score\n\n```",
                "title": "<https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/workers\/inplayservice.py | inplayservice.py>",
                "footer": "<https:\/\/github.com\/liampauling\/flumine|liampauling\/flumine>",
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "fallback": "<https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/workers\/inplayservice.py | inplayservice.py>",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/workers\/inplayservice.py",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+4I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Worker and CustomEvent "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/workers\/inplayservice.py",
                                "text": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/workers\/inplayservice.py"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]