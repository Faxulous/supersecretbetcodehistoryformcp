[
    {
        "subtype": "channel_join",
        "user": "U01FGGULB44",
        "text": "<@U01FGGULB44> has joined the channel",
        "type": "message",
        "ts": "1606078792.140200"
    },
    {
        "text": "Hi,\n\nFirst of all, thank you for the betfairlightweight &amp; flumine libraries.\n\nI am seeking advice from the community w\/ respect to latency when backtesting w\/ Flumine. The objective of the tests below is to compare the performance of Flumine in the context of backtesting with the performance of a simple, naive implementation.\n\nTest1:\nUsing <https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/backtest.py> with an empty strategy. The log level has been raised to CRITICAL\n\nTest2:\nA python script  iterates thru the same collection of files, reads each line and parses them as JSON. The JSON structure doesn’t get processed further.\n\nBoth tests run on the same machine sequentially. The machine has 60GB of memory and 16 CPUs.\n\nSize on disk for data is 1.6M for `betfair\/tennis\/xds_nfs\/edp_processed\/BASIC\/2019\/Jan\/15`\n\nTest1 runs in ~2 minutes\nTest2 runs in 5 seconds\n\nI understand that Test1 does a lot more than Test2. Flumine will create data structures, maintain states, etc…\n\nBut am I doing it right? Before I go the route to run profiler, what would be some comments?\n\nPS: I did try the multithreaded approach found here <https:\/\/betfairlightweight.slack.com\/archives\/C4HL6EZTQ\/p1598171342144900> courtesy of Jonjon &amp; Birchy and it did run in ~5 seconds. Would love to get some thoughts though. Thank you!",
        "files": [
            {
                "id": "F01FAPSGNMR",
                "created": 1606095787,
                "timestamp": 1606095787,
                "name": "test1.py",
                "title": "test1.py",
                "mimetype": "text\/plain",
                "filetype": "python",
                "pretty_type": "Python",
                "user": "U01A5GVTBST",
                "user_team": "T4G9NBD2M",
                "editable": true,
                "size": 1543,
                "mode": "snippet",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https:\/\/files.slack.com\/files-pri\/T4G9NBD2M-F01FAPSGNMR\/test1.py?t=xoxe-152328387089-8357743338709-8373272928225-dfe8ebcd8ca3d2f633bcafeb95191840",
                "url_private_download": "https:\/\/files.slack.com\/files-pri\/T4G9NBD2M-F01FAPSGNMR\/download\/test1.py?t=xoxe-152328387089-8357743338709-8373272928225-dfe8ebcd8ca3d2f633bcafeb95191840",
                "permalink": "https:\/\/betcode-org.slack.com\/files\/U01A5GVTBST\/F01FAPSGNMR\/test1.py",
                "permalink_public": "https:\/\/slack-files.com\/T4G9NBD2M-F01FAPSGNMR-5c0cb102fd",
                "edit_link": "https:\/\/betcode-org.slack.com\/files\/U01A5GVTBST\/F01FAPSGNMR\/test1.py\/edit",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            },
            {
                "id": "F01FGNGMB3N",
                "created": 1606095788,
                "timestamp": 1606095788,
                "name": "test2.py",
                "title": "test2.py",
                "mimetype": "text\/plain",
                "filetype": "python",
                "pretty_type": "Python",
                "user": "U01A5GVTBST",
                "user_team": "T4G9NBD2M",
                "editable": true,
                "size": 1030,
                "mode": "snippet",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https:\/\/files.slack.com\/files-pri\/T4G9NBD2M-F01FGNGMB3N\/test2.py?t=xoxe-152328387089-8357743338709-8373272928225-dfe8ebcd8ca3d2f633bcafeb95191840",
                "url_private_download": "https:\/\/files.slack.com\/files-pri\/T4G9NBD2M-F01FGNGMB3N\/download\/test2.py?t=xoxe-152328387089-8357743338709-8373272928225-dfe8ebcd8ca3d2f633bcafeb95191840",
                "permalink": "https:\/\/betcode-org.slack.com\/files\/U01A5GVTBST\/F01FGNGMB3N\/test2.py",
                "permalink_public": "https:\/\/slack-files.com\/T4G9NBD2M-F01FGNGMB3N-cce1586800",
                "edit_link": "https:\/\/betcode-org.slack.com\/files\/U01A5GVTBST\/F01FGNGMB3N\/test2.py\/edit",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U01A5GVTBST",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rDsdf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi,\n\nFirst of all, thank you for the betfairlightweight & flumine libraries.\n\nI am seeking advice from the community w\/ respect to latency when backtesting w\/ Flumine. The objective of the tests below is to compare the performance of Flumine in the context of backtesting with the performance of a simple, naive implementation.\n\nTest1:\nUsing "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/backtest.py"
                            },
                            {
                                "type": "text",
                                "text": " with an empty strategy. The log level has been raised to CRITICAL\n\nTest2:\nA python script  iterates thru the same collection of files, reads each line and parses them as JSON. The JSON structure doesn’t get processed further.\n\nBoth tests run on the same machine sequentially. The machine has 60GB of memory and 16 CPUs.\n\nSize on disk for data is 1.6M for "
                            },
                            {
                                "type": "text",
                                "text": "betfair\/tennis\/xds_nfs\/edp_processed\/BASIC\/2019\/Jan\/15",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nTest1 runs in ~2 minutes\nTest2 runs in 5 seconds\n\nI understand that Test1 does a lot more than Test2. Flumine will create data structures, maintain states, etc…\n\nBut am I doing it right? Before I go the route to run profiler, what would be some comments?\n\nPS: I did try the multithreaded approach found here "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/betfairlightweight.slack.com\/archives\/C4HL6EZTQ\/p1598171342144900"
                            },
                            {
                                "type": "text",
                                "text": " courtesy of Jonjon & Birchy and it did run in ~5 seconds. Would love to get some thoughts though. Thank you!"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1606096020.143200",
        "edited": {
            "user": "U01A5GVTBST",
            "ts": "1606099014.000000"
        }
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1606110388.146300",
        "client_msg_id": "698F6378-95F0-499B-AC85-91548406FDDF",
        "text": "Your results are to be expected. Improving betfairlightweight performance is an active topic of discussion here. In the mean time, you have plenty of cores so the multiprocessing approach is the way to go",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5iBJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Your results are to be expected. Improving betfairlightweight performance is an active topic of discussion here. In the mean time, you have plenty of cores so the multiprocessing approach is the way to go"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UUCD6P13J",
                    "U4H19D1D2",
                    "U01A5GVTBST"
                ],
                "count": 3
            }
        ]
    }
]