[
    {
        "user": "UU1URJ8L8",
        "type": "message",
        "ts": "1592118241.149400",
        "client_msg_id": "d9000bc5-1e5e-4396-9701-27be5ef8358c",
        "text": "Major Outage on all endpoints again :confused:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g7a5a7d77117",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7a5a7d7711746fb16f400e11af544b2e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0012-72.png",
            "first_name": "",
            "real_name": "Remi",
            "display_name": "Remi",
            "team": "T4G9NBD2M",
            "name": "services",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bgMgW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Major Outage on all endpoints again "
                            },
                            {
                                "type": "emoji",
                                "name": "confused",
                                "unicode": "1f615"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U9JHLMZB4",
        "type": "message",
        "ts": "1592122179.154000",
        "client_msg_id": "43e997bd-b32a-4352-a591-759d1289129d",
        "text": "I've having similar (possibly the same) problems with <@UPMUFSGCR>’s backtest_mult script. that is the exception appears to be being thrown in the ___get__result method in concurrent\/futures\/_base class, but the exception I'm seeing is rather more specific: \"UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc0 in position 15: invalid start byte\".  As this is being thrown deep in a module with which I'm not familiar, I'm wondering whether anybody else has any ideas about this. I've tried importing multiprocessing and setting the start method to fork and I get the same exception whether I run it as a script or in Jupyter.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g951ddcb43e7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3951ddcb43e788a387d6daf330dad5ca.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "Peter Coles",
            "display_name": "Peter",
            "team": "T4G9NBD2M",
            "name": "peter",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cta43",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've having similar (possibly the same) problems with "
                            },
                            {
                                "type": "user",
                                "user_id": "UPMUFSGCR"
                            },
                            {
                                "type": "text",
                                "text": "’s backtest_mult script. that is the exception appears to be being thrown in the __"
                            },
                            {
                                "type": "text",
                                "text": "get_",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "result method in concurrent\/futures\/_base class, but the exception I'm seeing is rather more specific: \"UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc0 in position 15: invalid start byte\".  As this is being thrown deep in a module with which I'm not familiar, I'm wondering whether anybody else has any ideas about this. I've tried importing multiprocessing and setting the start method to fork and I get the same exception whether I run it as a script or in Jupyter."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1592122269.154300",
        "client_msg_id": "e6d9d80d-165a-45cf-852c-ca9897ab4d6a",
        "text": "Sounds like maybe you are trying to read a compressed file as text",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BUsy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds like maybe you are trying to read a compressed file as text"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U9JHLMZB4",
        "type": "message",
        "ts": "1592124096.157900",
        "client_msg_id": "46061c57-d0db-4fc1-85cf-a710e0bdebf5",
        "text": "Thanks <@UBS7QANF3>. That's put me on the right track. I thought that smart_open.open would take care of my files being zipped. But that doesn't seem to be happening. When I unzip them and feed the decompressed files to the script instead, it works.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g951ddcb43e7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3951ddcb43e788a387d6daf330dad5ca.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "Peter Coles",
            "display_name": "Peter",
            "team": "T4G9NBD2M",
            "name": "peter",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8ya0b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UBS7QANF3"
                            },
                            {
                                "type": "text",
                                "text": ". That's put me on the right track. I thought that smart_open.open would take care of my files being zipped. But that doesn't seem to be happening. When I unzip them and feed the decompressed files to the script instead, it works."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1592124143.158600",
        "client_msg_id": "2265d8b8-29c4-4476-9191-95e0f7e72511",
        "text": "How are you using smart_open? Maybe the mock approach I use doesn't work with the child processes?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lGLK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How are you using smart_open? Maybe the mock approach I use doesn't work with the child processes?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U9JHLMZB4",
        "type": "message",
        "ts": "1592124256.158900",
        "client_msg_id": "a04be5c9-cc45-43d1-a590-8b26f1c1d111",
        "text": "`data_folder = os.path.expanduser('~\/data\/betfair\/test')`\n`markets = []`\n`_markets = os.listdir(data_folder)`\n`_markets = [x for x in _markets if x.endswith('.zip')]`\n`_markets = [os.path.join(data_folder, x) for x in _markets]`\n`markets.extend(_markets)`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g951ddcb43e7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3951ddcb43e788a387d6daf330dad5ca.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "Peter Coles",
            "display_name": "Peter",
            "team": "T4G9NBD2M",
            "name": "peter",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=0dhM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "data_folder = os.path.expanduser('~\/data\/betfair\/test')",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "markets = []",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "_markets = os.listdir(data_folder)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "_markets = [x for x in _markets if x.endswith('.zip')]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "_markets = [os.path.join(data_folder, x) for x in _markets]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "markets.extend(_markets)",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U9JHLMZB4",
        "type": "message",
        "ts": "1592124339.159500",
        "client_msg_id": "54d6e0af-91f2-4415-a6c0-91ce1389951c",
        "text": "`with patch(\"builtins.open\", smart_open.open):`\n        `framework.run()`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g951ddcb43e7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3951ddcb43e788a387d6daf330dad5ca.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "Peter Coles",
            "display_name": "Peter",
            "team": "T4G9NBD2M",
            "name": "peter",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vswk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "with patch(\"builtins.open\", smart_open.open):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        framework.run()",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U9JHLMZB4",
        "type": "message",
        "ts": "1592124519.159800",
        "client_msg_id": "2ec12758-29d8-4977-a03f-8ff3926ecb51",
        "text": "Probably better to post the whole script ...",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g951ddcb43e7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3951ddcb43e788a387d6daf330dad5ca.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "Peter Coles",
            "display_name": "Peter",
            "team": "T4G9NBD2M",
            "name": "peter",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OEASu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Probably better to post the whole script ..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U9JHLMZB4",
        "type": "message",
        "ts": "1592124537.160100",
        "client_msg_id": "fa9258fe-2ba0-482a-981d-846905e9ff5e",
        "text": "`from unittest.mock import patch`\n`from concurrent import futures`\n`import os`\n`import time`\n`import logging`\n`import multiprocessing`\n\n`from pythonjsonlogger import jsonlogger`\n\n`import pandas as pd`\n`import smart_open`\n\n`from flumine import FlumineBacktest, clients`\n`from strategies.lowestlayer import LowestLayer`\n\n\n`logger = logging.getLogger()`\n\n`custom_format = \"%(asctime) %(levelname) %(message)\"`\n`log_handler = logging.StreamHandler()`\n`formatter = jsonlogger.JsonFormatter(custom_format)`\n`formatter.converter = time.gmtime`\n`log_handler.setFormatter(formatter)`\n`logger.addHandler(log_handler)`\n`logger.setLevel(<http:\/\/logging.INFO|logging.INFO>)`\n\n\n`def run_backtest(market):`\n\n    `client = clients.BacktestClient()`\n    `framework = FlumineBacktest(client=client)`\n\n    `strategy = LowestLayer(`\n        `market_filter={\"markets\": [market]},`\n        `max_order_exposure=1000,`\n        `max_selection_exposure=10,`\n        `context={\"stake\": 2},`\n    `)`\n    `framework.add_strategy(strategy)`\n\n    `with patch(\"builtins.open\", smart_open.open):`\n        `framework.run()`\n\n    `market = next(iter(framework.markets))`\n\n    `data = []`\n    `for order in market.blotter:`\n        `datum = [`\n            `order.market_id,`\n            `order.selection_id,`\n            `order.responses.date_time_placed,`\n            `order.status,`\n            `order.order_type.price,`\n            `order.average_price_matched,`\n            `order.size_matched,`\n            `order.simulated.profit,`\n        `]`\n        `data.append(datum)`\n\n    `return pd.DataFrame(`\n        `data,`\n        `columns = ['market_id', 'selection_id', 'time_placed', 'status', 'price', 'average_price_matched', 'size_matched', 'simulated_profit']`\n    `)`\n\n`data_folder = os.path.expanduser('~\/data\/betfair\/test')`\n`markets = []`\n`_markets = os.listdir(data_folder)`\n`_markets = [x for x in _markets if x.endswith('.zip')]`\n`_markets = [os.path.join(data_folder, x) for x in _markets]`\n`markets.extend(_markets)`\n\n`multiprocessing.set_start_method('fork')`\n\n`print('Running strategy across %i markets' % len(markets))`\n`with futures.ProcessPoolExecutor(max_workers=24) as pool:`\n    `all_futures = [`\n        `pool.submit(`\n            `run_backtest,`\n            `market=market`\n        `)`\n        `for market in markets`\n    `]`\n\n`all_dfs = []`\n`for i, future in enumerate(<http:\/\/futures.as|futures.as>_completed(all_futures)):`\n    `print('Future %i of %i completed' % (i+1, len(all_futures)))`\n    `# all_dfs.append(future.result())`\n    `all_dfs.append(future.result())`\n\n`df = pd.concat(all_dfs)`\n`print(df)`\n\n`print(df.groupby('market_id')['simulated_profit'].sum().sum())`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g951ddcb43e7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3951ddcb43e788a387d6daf330dad5ca.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "Peter Coles",
            "display_name": "Peter",
            "team": "T4G9NBD2M",
            "name": "peter",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "518j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "from unittest.mock import patch",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "from concurrent import futures",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "import os",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "import time",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "import logging",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "import multiprocessing",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "from pythonjsonlogger import jsonlogger",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "import pandas as pd",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "import smart_open",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "from flumine import FlumineBacktest, clients",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "from strategies.lowestlayer import LowestLayer",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n\n"
                            },
                            {
                                "type": "text",
                                "text": "logger = logging.getLogger()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "custom_format = \"%(asctime) %(levelname) %(message)\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "log_handler = logging.StreamHandler()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "formatter = jsonlogger.JsonFormatter(custom_format)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "formatter.converter = time.gmtime",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "log_handler.setFormatter(formatter)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "logger.addHandler(log_handler)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "logger.setLevel(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/logging.INFO",
                                "text": "logging.INFO",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n\n"
                            },
                            {
                                "type": "text",
                                "text": "def run_backtest(market):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "    client = clients.BacktestClient()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    framework = FlumineBacktest(client=client)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "    strategy = LowestLayer(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        market_filter={\"markets\": [market]},",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        max_order_exposure=1000,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        max_selection_exposure=10,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        context={\"stake\": 2},",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    framework.add_strategy(strategy)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "    with patch(\"builtins.open\", smart_open.open):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        framework.run()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "    market = next(iter(framework.markets))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "    data = []",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    for order in market.blotter:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        datum = [",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            order.market_id,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            order.selection_id,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            order.responses.date_time_placed,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            order.status,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            order.order_type.price,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            order.average_price_matched,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            order.size_matched,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            order.simulated.profit,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        ]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        data.append(datum)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "    return pd.DataFrame(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        data,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        columns = ['market_id', 'selection_id', 'time_placed', 'status', 'price', 'average_price_matched', 'size_matched', 'simulated_profit']",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "data_folder = os.path.expanduser('~\/data\/betfair\/test')",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "markets = []",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "_markets = os.listdir(data_folder)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "_markets = [x for x in _markets if x.endswith('.zip')]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "_markets = [os.path.join(data_folder, x) for x in _markets]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "markets.extend(_markets)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "multiprocessing.set_start_method('fork')",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "print('Running strategy across %i markets' % len(markets))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "with futures.ProcessPoolExecutor(max_workers=24) as pool:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    all_futures = [",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        pool.submit(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            run_backtest,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            market=market",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        for market in markets",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    ]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "all_dfs = []",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "for i, future in enumerate(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/futures.as",
                                "text": "futures.as",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "_completed(all_futures)):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    print('Future %i of %i completed' % (i+1, len(all_futures)))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    # all_dfs.append(future.result())",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    all_dfs.append(future.result())",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "df = pd.concat(all_dfs)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "print(df)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "print(df.groupby('market_id')['simulated_profit'].sum().sum())",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1592124599.160900",
        "client_msg_id": "75265691-e27c-4f11-b1ee-73fe177d28f1",
        "text": "I would expect it to work in that you do the patching in the function that is run by the child processes",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QPgfl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would expect it to work in that you do the patching in the function that is run by the child processes"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1592124624.161500",
        "client_msg_id": "24152f7d-ec7d-4220-8090-a15f99d101d9",
        "text": "But I don't know enough about what patch is doing to know for sure",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ez+6M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But I don't know enough about what patch is doing to know for sure"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U9JHLMZB4",
        "type": "message",
        "ts": "1592124764.163400",
        "edited": {
            "user": "U9JHLMZB4",
            "ts": "1592124804.000000"
        },
        "client_msg_id": "e781c8f9-20e4-46a6-afce-906d002e3961",
        "text": "I'm not overly worried by it. It would be nice to understand what's going wrong, but my existing workflow already expands each file to a temp folder and then removes it when finished. Having smart_open do this for me would have been a bit of icing on the cake. No more. Thanks again,",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g951ddcb43e7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3951ddcb43e788a387d6daf330dad5ca.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "Peter Coles",
            "display_name": "Peter",
            "team": "T4G9NBD2M",
            "name": "peter",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8sa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not overly worried by it. It would be nice to understand what's going wrong, but my existing workflow already expands each file to a temp folder and then removes it when finished. Having smart_open do this for me would have been a bit of icing on the cake. No more. Thanks again,"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U015RJP2SFK",
        "text": "<@U015RJP2SFK> has joined the channel",
        "type": "message",
        "ts": "1592133462.163800"
    },
    {
        "subtype": "channel_join",
        "user": "U015D6MJ9DZ",
        "text": "<@U015D6MJ9DZ> has joined the channel",
        "type": "message",
        "ts": "1592134418.164000"
    },
    {
        "user": "UN1497LJC",
        "type": "message",
        "ts": "1592159803.164100",
        "client_msg_id": "e79ec0cf-d009-482e-af29-f541efddd7e4",
        "text": "If you are still trying\/failing...\n\nI don't really use Jupyter notebook for multiprocessing. But it might work if you  put the code that does the multiprocessing into  a Python module, and then call that from Jupyter.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ga740a9a5a57",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1a740a9a5a57633755157e17ebe96b27.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "JonJonJon",
            "display_name": "JonJonJon",
            "team": "T4G9NBD2M",
            "name": "edgetrading2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591992196.127200",
        "parent_user_id": "U0159ENQVBP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "13K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you are still trying\/failing...\n\nI don't really use Jupyter notebook for multiprocessing. But it might work if you  put the code that does the multiprocessing into  a Python module, and then call that from Jupyter."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN1497LJC",
        "type": "message",
        "ts": "1592159863.164300",
        "client_msg_id": "e934c3a3-4a38-4861-9513-f45e4a5f1436",
        "text": "But if you are doing long running analysis, the recommended workflow is to run the long computations in Python, save the results to disk, and then analyse them at leisure later.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ga740a9a5a57",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1a740a9a5a57633755157e17ebe96b27.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "JonJonJon",
            "display_name": "JonJonJon",
            "team": "T4G9NBD2M",
            "name": "edgetrading2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591992196.127200",
        "parent_user_id": "U0159ENQVBP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qtOw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But if you are doing long running analysis, the recommended workflow is to run the long computations in Python, save the results to disk, and then analyse them at leisure later."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0159ENQVBP",
        "type": "message",
        "ts": "1592159882.164500",
        "client_msg_id": "473fb8c2-030c-436d-94cd-69d0d82e8c9e",
        "text": "Currently playing with running it single-threaded.  Thanks for the suggestion",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g058bbfdec02",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/058bbfdec0231b8a7533f70e7b106cbc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "Rich",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "slack1642",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591992196.127200",
        "parent_user_id": "U0159ENQVBP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ejpgT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Currently playing with running it single-threaded.  Thanks for the suggestion"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN1497LJC",
        "type": "message",
        "ts": "1592159924.164700",
        "client_msg_id": "937f7171-96d5-4544-babc-872f9971984b",
        "text": "For example, I used to work in a quant team where the models took 6 hours to run. So they would start the model at the beginning of the day. Do something else. And then when they wanted to analyse the results later, they could just load them from disk\/database.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ga740a9a5a57",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1a740a9a5a57633755157e17ebe96b27.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "JonJonJon",
            "display_name": "JonJonJon",
            "team": "T4G9NBD2M",
            "name": "edgetrading2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591992196.127200",
        "parent_user_id": "U0159ENQVBP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d9z5w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For example, I used to work in a quant team where the models took 6 hours to run. So they would start the model at the beginning of the day. Do something else. And then when they wanted to analyse the results later, they could just load them from disk\/database."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0159ENQVBP",
        "type": "message",
        "ts": "1592159973.164900",
        "client_msg_id": "9e217175-f9b0-41ff-abc1-cf961fec3a52",
        "text": "Yes, I've been pickling my ML models to disk in another project i'm playing with.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g058bbfdec02",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/058bbfdec0231b8a7533f70e7b106cbc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "Rich",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "slack1642",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591992196.127200",
        "parent_user_id": "U0159ENQVBP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4\/Fpf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, I've been pickling my ML models to disk in another project i'm playing with."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U015BTC2BFF",
        "text": "<@U015BTC2BFF> has joined the channel",
        "type": "message",
        "ts": "1592171815.165200"
    }
]