[
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1693811534.294019",
        "client_msg_id": "6234f65d-82ae-4563-a099-9df9c3738d94",
        "text": "I am thinking of changing the default behaviour for the next release so rather than returning the dictionary with details of the optimisation, it will only return the probabilities by default and you will have to explicitly ask for the optimisation defaults. i.e.\n\nCurrent behaviour:\n\n```shin.calculate_implied_probabilities([2.6, 2.4, 4.3])\n\n{'implied_probabilities': [0.37299406033208965,\n  0.4047794109200184,\n  0.2222265287474275],\n 'iterations': 425,\n 'delta': 9.667822098435863e-13,\n 'z': 0.01694251276407055}```\nNew behaviour:\n\n```shin.calculate_implied_probabilities([2.6, 2.4, 4.3])\n\n[0.37299406033208965, 0.4047794109200184,0.2222265287474275]```\n```shin.calculate_implied_probabilities([2.6, 2.4, 4.3], full_output=True)\n\n{'implied_probabilities': [0.37299406033208965,\n  0.4047794109200184,\n  0.2222265287474275],\n 'iterations': 425,\n 'delta': 9.667822098435863e-13,\n 'z': 0.01694251276407055}```\nThis is because I personally completely ignore the optimisation details and keep having to write\n\n```shin.calculate_implied_probabilities(...)[\"implied_probabilities\"]```\nHow painful will this be for you guys? <@U02RN7YDRQ9> you seem to be one of the biggest users\n\nAt the same time I will also let you provide a dictionary and get back a dictionary so you can do something like this\n\n```selection_id_to_probability_map = shin.calculate_implied_probabilities(selection_id_to_odds_map)```\nAs opposed to\n\n```probabilities = shin.calculate_implied_probabilities(selection_id_to_odds_map.values())\nselection_id_to_probability_map = {k: p for k, p in zip(selection_id_to_odds_map, probabilities)}```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692258188.055699",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O5Uq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am thinking of changing the default behaviour for the next release so rather than returning the dictionary with details of the optimisation, it will only return the probabilities by default and you will have to explicitly ask for the optimisation defaults. i.e.\n\nCurrent behaviour:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "shin.calculate_implied_probabilities([2.6, 2.4, 4.3])\n\n{'implied_probabilities': [0.37299406033208965,\n  0.4047794109200184,\n  0.2222265287474275],\n 'iterations': 425,\n 'delta': 9.667822098435863e-13,\n 'z': 0.01694251276407055}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNew behaviour:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "shin.calculate_implied_probabilities([2.6, 2.4, 4.3])\n\n[0.37299406033208965, 0.4047794109200184,0.2222265287474275]"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "shin.calculate_implied_probabilities([2.6, 2.4, 4.3], full_output=True)\n\n{'implied_probabilities': [0.37299406033208965,\n  0.4047794109200184,\n  0.2222265287474275],\n 'iterations': 425,\n 'delta': 9.667822098435863e-13,\n 'z': 0.01694251276407055}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis is because I personally completely ignore the optimisation details and keep having to write\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "shin.calculate_implied_probabilities(...)[\"implied_probabilities\"]"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nHow painful will this be for you guys? "
                            },
                            {
                                "type": "user",
                                "user_id": "U02RN7YDRQ9"
                            },
                            {
                                "type": "text",
                                "text": " you seem to be one of the biggest users\n\nAt the same time I will also let you provide a dictionary and get back a dictionary so you can do something like this\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "selection_id_to_probability_map = shin.calculate_implied_probabilities(selection_id_to_odds_map)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAs opposed to\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "probabilities = shin.calculate_implied_probabilities(selection_id_to_odds_map.values())\nselection_id_to_probability_map = {k: p for k, p in zip(selection_id_to_odds_map, probabilities)}"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1693819845.919909",
        "edited": {
            "user": "U02RN7YDRQ9",
            "ts": "1693820094.000000"
        },
        "client_msg_id": "6c8482a3-f629-40fb-bcec-10d2b17119df",
        "text": "Trivial change for me - my usage is in a commonly used utility function so just one liner across everything. I do doctor the output probs to scale up to a minimum probability of 0.001 to keep things in line with maximum BF odds which is one of the reasons it's buried in a function. My odds are already in a known selection order in the list argument so as long as they come back in the same order (!) the mapping is known. Tried several methods for removing the margin from the book and shin \"feels\" about right.\n\nEdit: Shows how un-python I am compared to your stuff - I take 2 lines to do it\n`shinDict = shin.calculate_implied_probabilities(odds)`\n`probs = shinDict.get(*\"implied_probabilities\"*)`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692258188.055699",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lM+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Trivial change for me - my usage is in a commonly used utility function so just one liner across everything. I do doctor the output probs to scale up to a minimum probability of 0.001 to keep things in line with maximum BF odds which is one of the reasons it's buried in a function. My odds are already in a known selection order in the list argument so as long as they come back in the same order (!) the mapping is known. Tried several methods for removing the margin from the book and shin \"feels\" about right.\n\nEdit: Shows how un-python I am compared to your stuff - I take 2 lines to do it\n"
                            },
                            {
                                "type": "text",
                                "text": "shinDict = shin.calculate_implied_probabilities(odds)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "probs = shinDict.get(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\"implied_probabilities\"",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05GVQBR5JA",
        "type": "message",
        "ts": "1693890993.198459",
        "client_msg_id": "72047e83-61e0-4f27-90b6-869625b68aa5",
        "text": "I just use vscode, works for me and you dont need to start stop kernels",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "07b2878dd975",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-14\/5604195291744_07b2878dd975a5151d6f_72.png",
            "first_name": "Felix",
            "real_name": "Felix Lucien",
            "display_name": "Felix Lucien",
            "team": "T4G9NBD2M",
            "name": "felixmccuaig",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693670983.006379",
        "parent_user_id": "U01PJ5YMFBJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BiQW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just use vscode, works for me and you dont need to start stop kernels"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]