[
    {
        "user": "UPMUFSGCR",
        "type": "message",
        "ts": "1614953490.004500",
        "client_msg_id": "c0dfb638-9047-45b4-876f-9d3c74a91e01",
        "text": "Does anyone have a good algorithm for calculating rolling medians, where the data points are sampled over irregularly sampled intervals?\n\n*Example*\n\n`Time        data`\n`00:00:00    10`\n`00:00:04    20`\n`00:00:05    30`\n\nFor the example, it is assumed that the data had value 10, from 00:00:00 - 00:00:04, and 20 from 00:00:04 - 00:00:05. So it spent 4 seconds at 10, and 1 second at 20. So the median value is 10.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "31c0bb5a442c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/812386967189_31c0bb5a442c5b8d2c61_72.png",
            "first_name": "Jon",
            "real_name": "Jon Jon Jon Jon Jon Jon Jon Jon",
            "display_name": "Jonjonjon",
            "team": "T4G9NBD2M",
            "name": "fcmisc",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RTK9h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone have a good algorithm for calculating rolling medians, where the data points are sampled over irregularly sampled intervals?\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Example",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Time        data",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "00:00:00    10",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "00:00:04    20",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "00:00:05    30",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nFor the example, it is assumed that the data had value 10, from 00:00:00 - 00:00:04, and 20 from 00:00:04 - 00:00:05. So it spent 4 seconds at 10, and 1 second at 20. So the median value is 10."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0128E7BEHW",
        "type": "message",
        "ts": "1614955515.004800",
        "client_msg_id": "7f9c653a-011f-4378-995a-0aff43b5d3f3",
        "text": "<https:\/\/github.com\/FilippoBovo\/robustats>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gb57a2bdd15a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b57a2bdd15acccdb845ce257f38940cc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Dave",
            "real_name": "Dave R",
            "display_name": "Dave",
            "team": "T4G9NBD2M",
            "name": "d7m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "FilippoBovo\/robustats",
                "text": "Robustats is a Python library for high-performance computation of robust statistical estimators.",
                "title": "FilippoBovo\/robustats",
                "footer": "<https:\/\/github.com\/FilippoBovo\/robustats|FilippoBovo\/robustats>",
                "id": 1,
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1564850816,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "25",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "C",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/FilippoBovo\/robustats",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "028t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/FilippoBovo\/robustats"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0128E7BEHW",
        "type": "message",
        "ts": "1614955522.005100",
        "client_msg_id": "b691576a-3226-44e4-bae9-bc857f826c3f",
        "text": "Weighted median should do it I think",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gb57a2bdd15a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b57a2bdd15acccdb845ce257f38940cc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Dave",
            "real_name": "Dave R",
            "display_name": "Dave",
            "team": "T4G9NBD2M",
            "name": "d7m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qtdes",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Weighted median should do it I think"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPMUFSGCR",
        "type": "message",
        "ts": "1614956423.005700",
        "client_msg_id": "ea6f88ce-7743-432a-ac0f-cfe286b2ff9e",
        "text": "Nice. Thanks Dave. I'll take a look",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "31c0bb5a442c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/812386967189_31c0bb5a442c5b8d2c61_72.png",
            "first_name": "Jon",
            "real_name": "Jon Jon Jon Jon Jon Jon Jon Jon",
            "display_name": "Jonjonjon",
            "team": "T4G9NBD2M",
            "name": "fcmisc",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A0zam",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice. Thanks Dave. I'll take a look"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0128E7BEHW",
        "type": "message",
        "ts": "1614961023.006800",
        "client_msg_id": "ba59b63b-c95e-421d-b71b-524fa84320da",
        "text": "I'd probably roll my own tbh, even if it were as naive as constructing a list with the elements replicated by the time difference and using np.median, can't imagine there's much overhead",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gb57a2bdd15a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b57a2bdd15acccdb845ce257f38940cc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Dave",
            "real_name": "Dave R",
            "display_name": "Dave",
            "team": "T4G9NBD2M",
            "name": "d7m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XWXck",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd probably roll my own tbh, even if it were as naive as constructing a list with the elements replicated by the time difference and using np.median, can't imagine there's much overhead"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0128E7BEHW",
        "type": "message",
        "ts": "1614966958.007600",
        "client_msg_id": "4c1f1ef1-b758-49b2-a944-6b75c0a8ad7b",
        "text": "Alternatively, compute the middle of your first and last timestamp and use bisect left to find the time-weighted midpt",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gb57a2bdd15a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b57a2bdd15acccdb845ce257f38940cc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Dave",
            "real_name": "Dave R",
            "display_name": "Dave",
            "team": "T4G9NBD2M",
            "name": "d7m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qQ9z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Alternatively, compute the middle of your first and last timestamp and use bisect left to find the time-weighted midpt"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPMUFSGCR",
        "type": "message",
        "ts": "1614973926.008600",
        "client_msg_id": "252cace7-9dc4-4063-a710-735e8ae089cf",
        "text": "<@U0128E7BEHW> Yes, I could try that. The actual median probably isn't that important anyway. I just want some sort of average.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "31c0bb5a442c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/812386967189_31c0bb5a442c5b8d2c61_72.png",
            "first_name": "Jon",
            "real_name": "Jon Jon Jon Jon Jon Jon Jon Jon",
            "display_name": "Jonjonjon",
            "team": "T4G9NBD2M",
            "name": "fcmisc",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0a9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0128E7BEHW"
                            },
                            {
                                "type": "text",
                                "text": " Yes, I could try that. The actual median probably isn't that important anyway. I just want some sort of average."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]