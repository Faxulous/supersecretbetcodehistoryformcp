[
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666424817.547419",
        "client_msg_id": "047c6b93-a1cb-46ad-b08a-cc8915dc8887",
        "text": "<@U4H19D1D2> I shamelessly copied how you package up `flumine` for some of my projects. Not a major issue but I get deprecation warnings (`SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools`). Do you have a recommendation what the best tool set for pip installable package \/ wheels is?\n\nStackoverflow is not particularly helpful: <https:\/\/stackoverflow.com\/questions\/58753970\/how-to-build-a-source-distribution-without-using-setup-py-file>\nSeems like `setup.py` is still the easiest way to package up python \/ shell scripts despite the deprecation warnings.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "reply_count": 16,
        "reply_users_count": 2,
        "latest_reply": "1666428578.686149",
        "reply_users": [
            "UBS7QANF3",
            "U01B8031PM1"
        ],
        "replies": [
            {
                "user": "UBS7QANF3",
                "ts": "1666426418.061819"
            },
            {
                "user": "U01B8031PM1",
                "ts": "1666426514.784989"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1666426550.365909"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1666426596.314659"
            },
            {
                "user": "U01B8031PM1",
                "ts": "1666426623.926609"
            },
            {
                "user": "U01B8031PM1",
                "ts": "1666426863.970029"
            },
            {
                "user": "U01B8031PM1",
                "ts": "1666427968.572929"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1666428146.319469"
            },
            {
                "user": "U01B8031PM1",
                "ts": "1666428199.821159"
            },
            {
                "user": "U01B8031PM1",
                "ts": "1666428288.968109"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1666428291.170719"
            },
            {
                "user": "U01B8031PM1",
                "ts": "1666428311.321299"
            },
            {
                "user": "U01B8031PM1",
                "ts": "1666428337.299049"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1666428350.619869"
            },
            {
                "user": "U01B8031PM1",
                "ts": "1666428504.220509"
            },
            {
                "user": "U01B8031PM1",
                "ts": "1666428578.686149"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1666428578.686149",
        "attachments": [
            {
                "from_url": "https:\/\/stackoverflow.com\/questions\/58753970\/how-to-build-a-source-distribution-without-using-setup-py-file",
                "thumb_url": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/Img\/apple-touch-icon@2.png?v=73d79a89bded",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/Img\/apple-touch-icon.png?v=c78bd457575a",
                "id": 1,
                "original_url": "https:\/\/stackoverflow.com\/questions\/58753970\/how-to-build-a-source-distribution-without-using-setup-py-file",
                "fallback": "Stack Overflow: How to build a source distribution without using setup.py file?",
                "text": "With the following package structure . ├── my_package │ └── __init__.py ├── setup.cfg └── setup.py Contents of setup.py from setuptools import setup setup() Contents of setup.cfg [metadata] ...",
                "title": "How to build a source distribution without using setup.py file?",
                "title_link": "https:\/\/stackoverflow.com\/questions\/58753970\/how-to-build-a-source-distribution-without-using-setup-py-file",
                "service_name": "Stack Overflow"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bV5rE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": " I shamelessly copied how you package up "
                            },
                            {
                                "type": "text",
                                "text": "flumine",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for some of my projects. Not a major issue but I get deprecation warnings ("
                            },
                            {
                                "type": "text",
                                "text": "SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "). Do you have a recommendation what the best tool set for pip installable package \/ wheels is?\n\nStackoverflow is not particularly helpful: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stackoverflow.com\/questions\/58753970\/how-to-build-a-source-distribution-without-using-setup-py-file"
                            },
                            {
                                "type": "text",
                                "text": "\nSeems like "
                            },
                            {
                                "type": "text",
                                "text": "setup.py",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is still the easiest way to package up python \/ shell scripts despite the deprecation warnings."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1666426418.061819",
        "client_msg_id": "9eec26a2-37ba-4d4b-b3a3-87008a5a5d19",
        "text": "What exactly are you doing when you get that warning?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+mxa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What exactly are you doing when you get that warning?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666426514.784989",
        "client_msg_id": "2cfe6b8f-8e41-4a67-b3a9-aced7ad6d8c9",
        "text": "```from setuptools import find_packages, setup\n....\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    packages=find_packages(),\n    package_dir={\"xxx},\n    install_requires=INSTALL_REQUIRES,\n    license=about[\"__license__\"],\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    description=about[\"__description__\"],\n    package_data={\"\": scripts},\n    test_suite=\"tests\",\n    entry_points={\n        \"console_scripts\": [\"xxx],\n    },\n)```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Uc7",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "from setuptools import find_packages, setup\n....\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    packages=find_packages(),\n    package_dir={\"xxx},\n    install_requires=INSTALL_REQUIRES,\n    license=about[\"__license__\"],\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    description=about[\"__description__\"],\n    package_data={\"\": scripts},\n    test_suite=\"tests\",\n    entry_points={\n        \"console_scripts\": [\"xxx],\n    },\n)"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1666426550.365909",
        "client_msg_id": "74c0e6f0-4209-4e52-979d-a10c47256360",
        "text": "Is that the CONTENTS of your `setup.py` or are you actually running that code?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b7J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is that the CONTENTS of your "
                            },
                            {
                                "type": "text",
                                "text": "setup.py",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or are you actually running that code?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1666426596.314659",
        "client_msg_id": "8f5b338f-41f8-4f3b-8b13-f8a8f243f941",
        "text": "If the latter then don't run the code - run pip",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AEOqw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If the latter then don't run the code - run pip"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666426623.926609",
        "client_msg_id": "443d8720-7044-43c9-a5be-28b50fceef83",
        "text": "These are the contents of `setup.py` this is the command line used to create the dist\n```python setup.py sdist bdist_wheel\n....\n\/usr\/local\/lib\/python3.10\/site-packages\/setuptools\/command\/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.```\n",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vAcX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These are the contents of "
                            },
                            {
                                "type": "text",
                                "text": "setup.py",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " this is the command line used to create the dist\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "python setup.py sdist bdist_wheel\n....\n\/usr\/local\/lib\/python3.10\/site-packages\/setuptools\/command\/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools."
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666426863.970029",
        "client_msg_id": "47375fa8-b814-433a-842c-e03f634d0089",
        "text": "ok, i see. this command line does the job: `pip wheel --no-deps -w dist .`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dYx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok, i see. this command line does the job: "
                            },
                            {
                                "type": "text",
                                "text": "pip wheel --no-deps -w dist .",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666427968.572929",
        "edited": {
            "user": "U01B8031PM1",
            "ts": "1666428103.000000"
        },
        "client_msg_id": "fe629774-7d8a-414f-9842-e64e5990726a",
        "text": "<@UBS7QANF3> Is `setuptools` still the recommended way to package up a project that includes python, cython and compiled `.so`? I see that in `package_data` I can list all the non python dependencies. I also see that somehow `setuptools` infers if binary distribution and appends the appropriate abi tags such as this `aarch64.whl`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oTL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBS7QANF3"
                            },
                            {
                                "type": "text",
                                "text": " Is "
                            },
                            {
                                "type": "text",
                                "text": "setuptools",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " still the recommended way to package up a project that includes python, cython and compiled "
                            },
                            {
                                "type": "text",
                                "text": ".so",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? I see that in "
                            },
                            {
                                "type": "text",
                                "text": "package_data",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I can list all the non python dependencies. I also see that somehow "
                            },
                            {
                                "type": "text",
                                "text": "setuptools",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " infers if binary distribution and appends the appropriate abi tags such as this "
                            },
                            {
                                "type": "text",
                                "text": "aarch64.whl",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1666428146.319469",
        "client_msg_id": "0b8da773-2505-4e67-b865-0281657cb765",
        "text": "I don't know, you've gone past my Python packaging \"expertise\"",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WC+Al",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know, you've gone past my Python packaging \"expertise\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666428199.821159",
        "client_msg_id": "1e0935d9-a1ce-41e0-9720-9cb5e0eedfc8",
        "text": "Ha, I haven't spent anytime on this as have had no need to but as I modularize projects want to package them up nicely",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b1jJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ha, I haven't spent anytime on this as have had no need to but as I modularize projects want to package them up nicely"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666428288.968109",
        "client_msg_id": "bf6618ff-0cd4-4f34-9dd2-67a62cdf60fe",
        "text": "Ok looks like even `numba` is using `setuptools` and they have fairly complex LLVM \/ compiler dependencies.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gyz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok looks like even "
                            },
                            {
                                "type": "text",
                                "text": "numba",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is using "
                            },
                            {
                                "type": "text",
                                "text": "setuptools",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and they have fairly complex LLVM \/ compiler dependencies."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1666428291.170719",
        "client_msg_id": "ab69cfc7-b75d-4deb-a7de-043304082f8b",
        "text": "Also package everything and have never run in to this problem. But then I deploy by git cloning and pip install -e .",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q3m0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also package everything and have never run in to this problem. But then I deploy by git cloning and pip install -e ."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666428311.321299",
        "client_msg_id": "0b7968c7-ec1a-4e25-8534-646321d476aa",
        "text": "See I am explicitly trying to avoid that git cloning",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E+Zv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "See I am explicitly trying to avoid that git cloning"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666428337.299049",
        "client_msg_id": "22abff4f-aeb7-46e4-9611-f22688e063ac",
        "text": "and just provide package `index-url`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YbOtK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and just provide package "
                            },
                            {
                                "type": "text",
                                "text": "index-url",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1666428350.619869",
        "client_msg_id": "a3aba1fa-d0e2-4b4f-98d2-44de28671637",
        "text": "Because...?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jkVU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Because...?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666428504.220509",
        "client_msg_id": "31c9c849-506b-4057-bd6c-6fe460838978",
        "text": "the git repo contains a bunch of stuff that needs not be put into package and I don't want to go through the hassle of cleaning it all up",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kpux",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the git repo contains a bunch of stuff that needs not be put into package and I don't want to go through the hassle of cleaning it all up"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1666428578.686149",
        "client_msg_id": "7cb9215b-0ce0-4d79-85a2-a9637e01b12a",
        "text": "Anyways this is a good template for building up a more complex project: <https:\/\/github.com\/numba\/numba\/blob\/main\/setup.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1666424817.547419",
        "parent_user_id": "U01B8031PM1",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/numba\/numba\/blob\/main\/setup.py",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/numba\/numba\/blob\/main\/setup.py | setup.py>",
                "text": "```\nimport os\nimport platform\nimport sys\nfrom distutils import sysconfig\nfrom distutils.command import build\nfrom distutils.command.build_ext import build_ext\nfrom distutils.spawn import spawn\n\nfrom setuptools import Extension, find_packages, setup\nimport versioneer\n\n_version_module = None\ntry:\n    from packaging import version as _version_module\nexcept ImportError:\n    try:\n        from setuptools._vendor.packaging import version as _version_module\n    except ImportError:\n        pass\n\n\nmin_python_version = \"3.7\"\nmax_python_version = \"3.11\"  # exclusive\nmin_numpy_build_version = \"1.11\"\nmin_numpy_run_version = \"1.18\"\nmin_llvmlite_version = \"0.40.0dev0\"\nmax_llvmlite_version = \"0.41\"\n\nif sys.platform.startswith('linux'):\n    # Patch for #2555 to make wheels without libpython\n    sysconfig.get_config_vars()['Py_ENABLE_SHARED'] = 0\n\n\ndef _guard_py_ver():\n    if _version_module is None:\n        return\n\n    parse = _version_module.parse\n\n    min_py = parse(min_python_version)\n    max_py = parse(max_python_version)\n    cur_py = parse('.'.join(map(str, sys.version_info[:3])))\n\n    if not min_py <= cur_py < max_py:\n        msg = ('Cannot install on Python version {}; only versions >={},<{} '\n               'are supported.')\n        raise RuntimeError(msg.format(cur_py, min_py, max_py))\n\n\n_guard_py_ver()\n\n\nclass build_doc(build.build):\n    description = \"build documentation\"\n\n    def run(self):\n        spawn(['make', '-C', 'docs', 'html'])\n\n\nversioneer.VCS = 'git'\nversioneer.versionfile_source = 'numba\/_version.py'\nversioneer.versionfile_build = 'numba\/_version.py'\nversioneer.tag_prefix = ''\nversioneer.parentdir_prefix = 'numba-'\n\ncmdclass = versioneer.get_cmdclass()\ncmdclass['build_doc'] = build_doc\n\nextra_link_args = []\ninstall_name_tool_fixer = []\nif sys.platform == 'darwin':\n    install_name_tool_fixer += ['-headerpad_max_install_names']\nif platform.machine() == 'ppc64le':\n    extra_link_args += ['-pthread']\n\nbuild_ext = cmdclass.get('build_ext', build_ext)\n\nnumba_be_user_options = [\n    ('werror', None, 'Build extensions with -Werror'),\n    ('wall', None, 'Build extensions with -Wall'),\n    ('noopt', None, 'Build extensions without optimization'),\n]\n\n\nclass NumbaBuildExt(build_ext):\n\n    user_options = build_ext.user_options + numba_be_user_options\n    boolean_options = build_ext.boolean_options + ['werror', 'wall', 'noopt']\n\n    def initialize_options(self):\n        super().initialize_options()\n        self.werror = 0\n        self.wall = 0\n        self.noopt = 0\n\n    def run(self):\n        extra_compile_args = []\n        if self.noopt:\n            if sys.platform == 'win32':\n                extra_compile_args.append('\/Od')\n            else:\n                extra_compile_args.append('-O0')\n        if self.werror:\n            extra_compile_args.append('-Werror')\n        if self.wall:\n            extra_compile_args.append('-Wall')\n        for ext in self.extensions:\n            ext.extra_compile_args.extend(extra_compile_args)\n\n        super().run()\n\n\ncmdclass['build_ext'] = NumbaBuildExt\n\n\ndef is_building():\n    \"\"\"\n    Parse the setup.py command and return whether a build is requested.\n    If False is returned, only an informational command is run.\n    If True is returned, information about C extensions will have to\n    be passed to the setup() function.\n    \"\"\"\n    if len(sys.argv) < 2:\n        # User forgot to give an argument probably, let setuptools handle that.\n        return True\n\n    build_commands = ['build', 'build_py', 'build_ext', 'build_clib'\n                      'build_scripts', 'install', 'install_lib',\n                      'install_headers', 'install_scripts', 'install_data',\n                      'sdist', 'bdist', 'bdist_dumb', 'bdist_rpm',\n                      'bdist_wininst', 'check', 'build_doc', 'bdist_wheel',\n                      'bdist_egg', 'develop', 'easy_install', 'test']\n    return any(bc in sys.argv[1:] for bc in build_commands)\n\n\ndef get_ext_modules():\n    \"\"\"\n    Return a list of Extension instances for the setup() call.\n    \"\"\"\n    # Note we don't import Numpy at the toplevel, since setup.py\n    # should be able to run without Numpy for pip to discover the\n    # build dependencies\n    import numpy.distutils.misc_util as np_misc\n\n    # Inject required options for extensions compiled against the Numpy\n    # C API (include dirs, library dirs etc.)\n    np_compile_args = np_misc.get_info('npymath')\n\n    ext_devicearray = Extension(name='numba._devicearray',\n                                sources=['numba\/_devicearray.cpp'],\n                                depends=['numba\/_pymodule.h',\n                                         'numba\/_devicearray.h'],\n                                include_dirs=['numba'],\n                                extra_compile_args=['-std=c++11'],\n                                )\n\n    ext_dynfunc = Extension(name='numba._dynfunc',\n                            sources=['numba\/_dynfuncmod.c'],\n                            depends=['numba\/_pymodule.h',\n                                     'numba\/_dynfunc.c'])\n\n    ext_dispatcher = Extension(name=\"numba._dispatcher\",\n                               sources=['numba\/_dispatcher.cpp',\n                                        'numba\/_typeof.cpp',\n                                        'numba\/_hashtable.cpp',\n                                        'numba\/core\/typeconv\/typeconv.cpp'],\n                               depends=[\"numba\/_pymodule.h\",\n                                        \"numba\/_typeof.h\",\n                                        \"numba\/_hashtable.h\"],\n                               extra_compile_args=['-std=c++11'],\n                               **np_compile_args)\n\n    ext_helperlib = Extension(name=\"numba._helperlib\",\n                              sources=[\"numba\/_helpermod.c\",\n                                       \"numba\/cext\/utils.c\",\n                                       \"numba\/cext\/dictobject.c\",\n                                       \"numba\/cext\/listobject.c\",\n                                       ],\n                              # numba\/_random.c needs pthreads\n                              extra_link_args=install_name_tool_fixer +\n                              extra_link_args,\n                              depends=[\"numba\/_pymodule.h\",\n                                       \"numba\/_helperlib.c\",\n                                       \"numba\/_lapack.c\",\n                                       \"numba\/_npymath_exports.c\",\n                                       \"numba\/_random.c\",\n                                       \"numba\/mathnames.inc\",\n                                       ],\n                              **np_compile_args)\n\n    ext_typeconv = Extension(name=\"numba.core.typeconv._typeconv\",\n                             sources=[\"numba\/core\/typeconv\/typeconv.cpp\",\n                                      \"numba\/core\/typeconv\/_typeconv.cpp\"],\n                             depends=[\"numba\/_pymodule.h\"],\n                             extra_compile_args=['-std=c++11'],\n                             )\n\n    ext_np_ufunc = Extension(name=\"numba.np.ufunc._internal\",\n                             sources=[\"numba\/np\/ufunc\/_internal.c\"],\n                             depends=[\"numba\/np\/ufunc\/_ufunc.c\",\n                                      \"numba\/np\/ufunc\/_internal.h\",\n                                      \"numba\/_pymodule.h\"],\n                             **np_compile_args)\n\n    ext_npyufunc_num_threads = Extension(name=\"numba.np.ufunc._num_threads\",\n                                         sources=[\n                                             \"numba\/np\/ufunc\/_num_threads.c\"],\n                                         depends=[\"numba\/_pymodule.h\"],\n                                         )\n\n    ext_np_ufunc_backends = []\n\n    def check_file_at_path(path2file):\n        \"\"\"\n        Takes a list as a path, a single glob (*) is permitted as an entry which\n        indicates that expansion at this location is required (i.e. version\n        might not be known).…",
                "title": "<https:\/\/github.com\/numba\/numba\/blob\/main\/setup.py | setup.py>",
                "footer": "<https:\/\/github.com\/numba\/numba|numba\/numba>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sqf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyways this is a good template for building up a more complex project: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/numba\/numba\/blob\/main\/setup.py"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]