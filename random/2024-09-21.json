[
    {
        "user": "UQL0QDEKA",
        "type": "message",
        "ts": "1726927304.058899",
        "client_msg_id": "275cb250-56a9-4599-99aa-310123805126",
        "text": "What's the best way to change variables, etc dynamically ie on the fly...\nHaving looked at the options, Maybe config file monitoring seems a good option, like this :\nHave your program monitor a configuration file for changes using libraries like `watchdog`. When the file changes, read the new value and update the variable.\n`from watchdog.observers import Observer`\n`from watchdog.events import FileSystemEventHandler`\n\n`class ConfigHandler(FileSystemEventHandler):`\n    `def on_modified(self, event):`\n        `if event.src_path == 'config.txt':`\n            `with open('config.txt', 'r') as file:`\n                `my_variable = file.read()`\n                `print(f\"Variable updated to: {my_variable}\")`\n\n`event_handler = ConfigHandler()`\n`observer = Observer()`\n`observer.schedule(event_handler, path='.', recursive=False)`\n`observer.start()`\n\nWould that be a good way, or anyone recommend a better way? Thanks in advance...",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g444d10128c0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/444d10128c0aaf094041a52a76796602.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Peter",
            "real_name": "Peter Lenagh",
            "display_name": "PeterLe",
            "team": "T4G9NBD2M",
            "name": "lenagh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726927304.058899",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1726940553.525809",
        "reply_users": [
            "UBS7QANF3",
            "UQL0QDEKA",
            "U01LD3EU8B0"
        ],
        "replies": [
            {
                "user": "UBS7QANF3",
                "ts": "1726928816.447119"
            },
            {
                "user": "UQL0QDEKA",
                "ts": "1726929349.188029"
            },
            {
                "user": "U01LD3EU8B0",
                "ts": "1726939236.080429"
            },
            {
                "user": "UQL0QDEKA",
                "ts": "1726940553.525809"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GqXNV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's the best way to change variables, etc dynamically ie on the fly...\nHaving looked at the options, Maybe config file monitoring seems a good option, like this :\nHave your program monitor a configuration file for changes using libraries like "
                            },
                            {
                                "type": "text",
                                "text": "watchdog",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". When the file changes, read the new value and update the variable.\n"
                            },
                            {
                                "type": "text",
                                "text": "from watchdog.observers import Observer",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "from watchdog.events import FileSystemEventHandler",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "class ConfigHandler(FileSystemEventHandler):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    def on_modified(self, event):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        if event.src_path == 'config.txt':",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            with open('config.txt', 'r') as file:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                my_variable = file.read()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                print(f\"Variable updated to: {my_variable}\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "event_handler = ConfigHandler()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "observer = Observer()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "observer.schedule(event_handler, path='.', recursive=False)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "observer.start()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nWould that be a good way, or anyone recommend a better way? Thanks in advance..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1726928816.447119",
        "client_msg_id": "9FCE31AE-9412-49D9-9945-0785928FBD98",
        "text": "I think the term microservices is overused but one advantage of separating out different parts of the system to individual components unlike flumineâ€™s monolithic architecture is that restarting specific components to pick up new config can be a lot less painful than restarting the entire system \n\nI have considered config file watching in the past; you could alternatively implement an API that lets you modify your internal state (as well as read it - facilitates monitoring and other GUI applications)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726927304.058899",
        "parent_user_id": "UQL0QDEKA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jGZsI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the term microservices is overused but one advantage of separating out different parts of the system to individual components unlike flumineâ€™s monolithic architecture is that restarting specific components to pick up new config can be a lot less painful than restarting the entire system \n\nI have considered config file watching in the past; you could alternatively implement an API that lets you modify your internal state (as well as read it - facilitates monitoring and other GUI applications)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQL0QDEKA",
        "type": "message",
        "ts": "1726929349.188029",
        "client_msg_id": "b14f120f-a4c9-414d-b145-1f2fc18325aa",
        "text": "Thanks Mo, That was also a suggestion when i researched it:\n_Use a web framework like Flask or FastAPI to create an HTTP endpoint that can receive requests to update the variable_\nAlthough I like your suggestion of the API as I think others use that too and I can add things as I progress",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g444d10128c0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/444d10128c0aaf094041a52a76796602.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Peter",
            "real_name": "Peter Lenagh",
            "display_name": "PeterLe",
            "team": "T4G9NBD2M",
            "name": "lenagh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726927304.058899",
        "parent_user_id": "UQL0QDEKA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jlw5k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Mo, That was also a suggestion when i researched it:\n"
                            },
                            {
                                "type": "text",
                                "text": "Use a web framework like Flask or FastAPI to create an HTTP endpoint that can receive requests to update the variable",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nAlthough I like your suggestion of the API as I think others use that too and I can add things as I progress"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "rocket",
                "users": [
                    "UBS7QANF3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01LD3EU8B0",
        "type": "message",
        "ts": "1726939236.080429",
        "client_msg_id": "8b273c69-e67c-4778-9576-024e78fa3ab8",
        "text": "If you are using flumine and aws could you just store them in ssm parameter store and poll it periodically with a worker?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "91f0ca4990b2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-01\/1685122555351_91f0ca4990b2be2e385b_72.png",
            "first_name": "TT",
            "real_name": "TT",
            "display_name": "TT",
            "team": "T4G9NBD2M",
            "name": "timtaylor.uk1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726927304.058899",
        "parent_user_id": "UQL0QDEKA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vhW9P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you are using flumine and aws could you just store them in ssm parameter store and poll it periodically with a worker?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQL0QDEKA",
        "type": "message",
        "ts": "1726940553.525809",
        "client_msg_id": "5d233961-8688-4e9d-b94d-96ea50c54804",
        "text": "Thanks <@U01LD3EU8B0> Ill check that out",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g444d10128c0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/444d10128c0aaf094041a52a76796602.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Peter",
            "real_name": "Peter Lenagh",
            "display_name": "PeterLe",
            "team": "T4G9NBD2M",
            "name": "lenagh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726927304.058899",
        "parent_user_id": "UQL0QDEKA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p5BNJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U01LD3EU8B0"
                            },
                            {
                                "type": "text",
                                "text": " Ill check that out"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]