[
    {
        "user": "U076FK3ARG8",
        "type": "message",
        "ts": "1717065646.473239",
        "client_msg_id": "770e6704-68e7-4f50-a05b-7b8f99a18a30",
        "text": "I have api key and url but get error 401 all the time, although winsocket works ok for bookmaker price changes.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gb9c45a53dbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b9c45a53dbbf1d64c0734dec22bdaf4c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "trevor",
            "real_name": "trevor",
            "display_name": "trev",
            "team": "T4G9NBD2M",
            "name": "stevesawh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BKhpC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have api key and url but get error 401 all the time, although winsocket works ok for bookmaker price changes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U076FK3ARG8",
        "type": "message",
        "ts": "1717068869.349089",
        "client_msg_id": "a3981aba-2810-4b84-95df-2234e86f39e3",
        "text": "import betconnect\nimport requests\nfrom requests.auth import HTTPBasicAuth\nfrom time import sleep\n\n# Define your username, password, URL, and additional data\nusername = 'developer-not shown here'\npassword = 'not shown here*'\nlogin_url = '<https:\/\/developer.betconnect.com\/api\/v2\/login>'\nbalance_url = '<https:\/\/developer.betconnect.com\/api\/v2\/get_balance>'\ndata = {\n    'api_code': '2468163c-5efb-47f1-8952-789ae3d60652'\n}\n\ntry:\n    # Send the POST request to the login endpoint\n    login_response = <http:\/\/requests.post|requests.post>(login_url,      auth=HTTPBasicAuth(username, password), json=data)\n    login_response.raise_for_status()  # Raise an error for bad status codes\n\n    # Parse the JSON response to get the access token\n    login_data = login_response.json()\n    if login_response.status_code == 200:\n        token = login_data['data']['token']\n        print('Login Status Code:', login_response.status_code)\n        print('Login Response Text:', login_response.text)\n    elif login_response.status_code == 400:\n        print('Login Error:', login_data['message'])\n    elif login_response.status_code == 401:\n        print('Login Error: Could not verify Username and Password.')\n    elif login_response.status_code == 403:\n        print('Login Error:', login_data['message'])\n    else:\n        print('Login Error: Unexpected status code:', login_response.status_code)\n\nexcept requests.exceptions.RequestException as e:\n    print('An error occurred during login:', e)\n    token = None\n\nif token:\n    # Introduce a delay\n    sleep(1)\n\n    # Send the GET request to the balance endpoint with the token\n    headers = {\n        'accept': 'application\/json',\n        'Authorization': f'Bearer {token}'\n    }\n\n    try:\n        # Send the GET request to the balance endpoint\n        balance_response = requests.get(balance_url, headers=headers)\n        balance_response.raise_for_status()  # Raise an error for bad status codes\n        print('Balance Status Code:', balance_response.status_code)\n        print('Balance Response Text:', balance_response.text)\n    except requests.exceptions.RequestException as e:\n        print('An error occurred while fetching the balance:', e)\nelse:\n    print('Login failed; skipping balance request.')",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gb9c45a53dbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b9c45a53dbbf1d64c0734dec22bdaf4c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "trevor",
            "real_name": "trevor",
            "display_name": "trev",
            "team": "T4G9NBD2M",
            "name": "stevesawh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yRCpY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "import betconnect\nimport requests\nfrom requests.auth import HTTPBasicAuth\nfrom time import sleep\n\n# Define your username, password, URL, and additional data\nusername = 'developer-not shown here'\npassword = 'not shown here*'\nlogin_url = '"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.betconnect.com\/api\/v2\/login"
                            },
                            {
                                "type": "text",
                                "text": "'\nbalance_url = '"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.betconnect.com\/api\/v2\/get_balance"
                            },
                            {
                                "type": "text",
                                "text": "'\ndata = {\n    'api_code': '2468163c-5efb-47f1-8952-789ae3d60652'\n}\n\ntry:\n    # Send the POST request to the login endpoint\n    login_response = requests.post(login_url,      auth=HTTPBasicAuth(username, password), json=data)\n    login_response.raise_for_status()  # Raise an error for bad status codes\n\n    # Parse the JSON response to get the access token\n    login_data = login_response.json()\n    if login_response.status_code == 200:\n        token = login_data['data']['token']\n        print('Login Status Code:', login_response.status_code)\n        print('Login Response Text:', login_response.text)\n    elif login_response.status_code == 400:\n        print('Login Error:', login_data['message'])\n    elif login_response.status_code == 401:\n        print('Login Error: Could not verify Username and Password.')\n    elif login_response.status_code == 403:\n        print('Login Error:', login_data['message'])\n    else:\n        print('Login Error: Unexpected status code:', login_response.status_code)\n\nexcept requests.exceptions.RequestException as e:\n    print('An error occurred during login:', e)\n    token = None\n\nif token:\n    # Introduce a delay\n    sleep(1)\n\n    # Send the GET request to the balance endpoint with the token\n    headers = {\n        'accept': 'application\/json',\n        'Authorization': f'Bearer {token}'\n    }\n\n    try:\n        # Send the GET request to the balance endpoint\n        balance_response = requests.get(balance_url, headers=headers)\n        balance_response.raise_for_status()  # Raise an error for bad status codes\n        print('Balance Status Code:', balance_response.status_code)\n        print('Balance Response Text:', balance_response.text)\n    except requests.exceptions.RequestException as e:\n        print('An error occurred while fetching the balance:', e)\nelse:\n    print('Login failed; skipping balance request.')"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1717070959.988309",
        "client_msg_id": "B11BBDFF-667F-450F-AEC7-D6DABB1F50DC",
        "text": "Any reason you aren’t using the betconnect wrapper?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Od\/QZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Any reason you "
                            },
                            {
                                "type": "text",
                                "text": "aren’t"
                            },
                            {
                                "type": "text",
                                "text": " using the betconnect wrapper?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U076FK3ARG8",
        "type": "message",
        "ts": "1717072498.986459",
        "client_msg_id": "b16a9f3c-b36e-4811-a666-b14988138269",
        "text": "Hi, I have tried but unfortunately I still get the same 401 error",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gb9c45a53dbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b9c45a53dbbf1d64c0734dec22bdaf4c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "trevor",
            "real_name": "trevor",
            "display_name": "trev",
            "team": "T4G9NBD2M",
            "name": "stevesawh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SfcvT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, I have tried but unfortunately I still get the same 401 error"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]