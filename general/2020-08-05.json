[
    {
        "user": "UPMUFSGCR",
        "type": "message",
        "ts": "1596613244.046900",
        "client_msg_id": "06a6e53b-0f93-435e-a4a3-32aa7e50ac51",
        "text": "Thanks <@U4H19D1D2>. I guess my code is just out of date!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "31c0bb5a442c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/812386967189_31c0bb5a442c5b8d2c61_72.png",
            "first_name": "Jon",
            "real_name": "Jon Jon Jon Jon Jon Jon Jon Jon",
            "display_name": "Jonjonjon",
            "team": "T4G9NBD2M",
            "name": "fcmisc",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596605531.041500",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/jME",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": ". I guess my code is just out of date!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1596613324.047100",
        "client_msg_id": "ef1a52d3-0a08-433f-a320-64f6ad489c13",
        "text": "added in 2.7.0 after a request from Mo <https:\/\/github.com\/liampauling\/betfair\/blob\/master\/HISTORY.rst#270-2020-07-27>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596605531.041500",
        "parent_user_id": "U4H19D1D2",
        "attachments": [
            {
                "fallback": "[liampauling\/betfair] HISTORY.rst",
                "text": "```\n.. :changelog:\n\nRelease History\n---------------\n\n2.7.2 (2020-08-03)\n+++++++++++++++++++\n\n**Improvements**\n\n- Historical streaming cleanup (operation)\n\n2.7.1 (2020-08-03)\n+++++++++++++++++++\n\n**Improvements**\n\n- #325 listener.status property added\n\n**Dependencies**\n\n- ujson bumped to 3.1.0\n\n2.7.0 (2020-07-27)\n+++++++++++++++++++\n\n**Improvements**\n\n- #308 remove directory warnings \/ handling (breaking change)\n- #318 include streaming_update in generator\n\n**Bug Fixes**\n\n- #320 generator reuse fix\n\n2.6.0 (2020-07-09)\n+++++++++++++++++++\n\n**Improvements**\n\n- Response (_response) removed from BaseResources due to potential memory leaks\n\n**Bug Fixes**\n\n- marketType bug fix (politics markets)\n\n2.5.0 (2020-06-22)\n+++++++++++++++++++\n\n**Improvements**\n\n- #308 rename directory to file_path\n\n**Bug Fixes**\n\n- #301 uncaught Error in list_market_book\n\n**Dependencies**\n\n- requests bumped to &lt; 2.25.0\n\n2.4.0 (2020-06-09)\n+++++++++++++++++++\n\n**Improvements**\n\n- Github actions added\n\n**Bug Fixes**\n\n- #304 missing regulator auth code\n\n**Dependencies**\n\n- ujson upgraded from 2.0.3 to 3.0.0\n\n2.3.1 (2020-05-12)\n+++++++++++++++++++\n\n**Improvements**\n\n- LRUCache added to strip datetime\n- NemID docs added\n\n2.3.0 (2020-04-06)\n+++++++++++++++++++\n\n**Dependencies**\n\n- ujson upgraded to 2.0.3\n- c based libraries restricted to darwin and linux platforms only\n\n2.2.0 (2020-03-09)\n+++++++++++++++++++\n\n**Improvements**\n\n- #283 max_latency can now be set to None\n\n**Dependencies**\n\n- requests upgraded from 2.22.0 to 2.23.0\n- ujson upgraded from 1.35 to 2.0.1 (updates to compat.py)\n\n2.1.0 (2020-03-02)\n+++++++++++++++++++\n\n**Improvements**\n\n- datetime handling added to time_range filter (@trigvi)\n- connectionsAvailable handling added\n\n**Bug Fixes**\n\n- #273 error handling added for markets without marketDefinition\n- #233 sendall used instead of send so that all data is sent (bug present since 2016!)\n\n2.0.1 (2020-02-17)\n+++++++++++++++++++\n\n**Improvements**\n\n- Listener.add_stream cleanup\n\n**Bug Fixes**\n\n- #268 CPU bug when using response.text\n\n2.0.0 (2020-02-10)\n+++++++++++++++++++\n\n**Improvements**\n\n- *Breaking* async removed from streaming (force user to handle thread)\n- *Breaking* Description removed from 'create_stream'\n- Black formatting on all files\n- python 'Typing' added\n- locale added to Navigation\n- Certificate error messages improved\n- Logging added to socket send\n- __version__ file added and refactor to setup.py\n- __version__ added to user agent\n- raw requests Response added to objects\n- elapsed_time now uses time() rather than datetime\n- session can be passed to client\n- streaming example with error handling and retry added\n- mkdocs used for documentation\n\n**Bug Fixes**\n\n- #217 correct usage of ujson (refactor)\n- Australia login interactive domain fixed\n- Correct session timeout added for int and italy exchange\n\n**Dependencies**\n\n- ciso8601 upgraded from 2.0.1 to 2.1.3\n- python 3 only\n- python 3.8 testing added\n\n1.10.4 (2019-10-28)\n+++++++++++++++++++\n\n**Bug Fixes**\n\n- handicap added to LegacyData\n\n1.10.3 (2019-09-30)\n+++++++++++++++++++\n\n**Improvements**\n\n- Remove py3.4 support\n\n**Bug Fixes**\n\n- #232 RuntimeError fixed on serialize_orders\n- avgPriceRaw added to LegacyData (@d3alek)\n\n**Dependencies**\n\n- requests upgraded \/ unpinned from exact version\n\n1.10.2 (2019-09-02)\n+++++++++++++++++++\n\n**Improvements**\n\n- OrderCache \/ UnmatchedOrder logic improved\n- streaming_update and streaming_unique_id added to lightweight response\n\n**Bug Fixes**\n\n- handicap bugfix on OrderCache\n- Missing closed logic added to OrderCache\n\n1.10.1 (2019-08-12)\n+++++++++++++++++++\n\n**Improvements**\n\n- RaceCard get_race_result function added (used by mobile app)\n- Streaming generator listener now defaults to StreamListener\n\n**Bug Fixes**\n\n- #221 inplayservice subdomain updated (ips)\n- #215 marketCatalogue no ERO data\n\n1.10.0 (2019-05-26)\n+++++++++++++++++++\n\n**Improvements**\n\n- #163 Historical stream generator added (no threads)\n\n**Bug Fixes**\n\n- #165 error handling added to closed connection\n- #175 locals.copy() used to prevent OverflowError in VSCode\n\n1.9.1 (2019-04-04)\n+++++++++++++++++++\n\n**Improvements**\n\n- #54 listRunnerBook added to .betting\n\n1.9.0 (2019-04-04)\n+++++++++++++++++++\n\n**Bug Fixes**\n\n- #206 _async renamed to async_ due to camel case bug\n\n1.8.3 (2019-02-02)\n+++++++++++++++++++\n\n**Improvements**\n\n- Cert endpoints updated.\n- License update.\n- Readme update.\n\n**Bug Fixes**\n\n- Travis now builds py3.7!\n\n1.8.2 (2018-11-23)\n+++++++++++++++++++\n\n**Improvements**\n\n- Certificate url for login updated.\n- publish_time_epoch added to MarketBook.\n- marketDefinition added to serialise so that lightweight has it returned.\n\n1.8.1 (2018-10-12)\n+++++++++++++++++++\n\n**Improvements**\n\n- Str representation added to PriceSize object.\n\n**Bug Fixes**\n\n- RaceCard resource bug fix.\n\n**Dependencies**\n\n- Upgrade to requests 2.20.1 (security fix)\n\n1.8.0 (2018-10-08)\n+++++++++++++++++++\n\n**Improvements**\n\n- LoginInteractive endpoint added.\n- User-Agent added to request headers.\n\n**Bug Fixes**\n\n- Error handling added to RaceCard.login()\n\n1.7.2 (2018-08-06)\n+++++++++++++++++++\n\n**Bug Fixes**\n\n- requirements.txt added to MANIFEST\n\n1.7.1 (2018-08-06)\n+++++++++++++++++++\n\n**Improvements**\n\n- Now working on py3.7!\n- setup.py updated to use requirements only.\n- py3.7 added to appveyor but pending travis to get their act together.\n- Travis and appveyor yml cleanup.\n\n**Bug Fixes**\n\n- async renamed to _async in betting endpoint for py3.7\n\n1.7.0 (2018-07-23)\n+++++++++++++++++++\n\n**Improvements**\n\n- Better logging when market added to cache and initial socket responses.\n\n**Bug Fixes**\n\n- Refactor of the use of update_cache to prevent duplicate RunnerBook objects #180.\n- Spanish URL updated, closes #164.\n\n**Breaking Changes**\n\n- async renamed to _async due to it being a reserved word in py3.7.\n\n1.6.4 (2018-06-22)\n+++++++++++++++++++\n\n**Improvements**\n\n- Build.sh and HISTORY.rst added\n\n**Dependencies**\n\n- Upgrade to ciso8601 2.0.1\n- Upgrade to requests 2.19.1\n\n```",
                "title": "HISTORY.rst",
                "footer": "<https:\/\/github.com\/liampauling\/betfair|liampauling\/betfair>",
                "id": 1,
                "title_link": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/HISTORY.rst",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/HISTORY.rst#270-2020-07-27",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "acZsS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "added in 2.7.0 after a request from Mo "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/HISTORY.rst#270-2020-07-27"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "grinning",
                "users": [
                    "UPMUFSGCR"
                ],
                "count": 1
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U0187TRCGAZ",
        "text": "<@U0187TRCGAZ> has joined the channel",
        "type": "message",
        "ts": "1596619179.047600"
    },
    {
        "user": "U0187TRCGAZ",
        "type": "message",
        "ts": "1596619492.048300",
        "client_msg_id": "5e4a5f0b-6140-47fd-8790-3ee6df313356",
        "text": "Has anybody used betfairlight to display golf if so what are the market_catalogue entries",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g4e76b51c3e0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4e76b51c3e091e6209a3ca2f6b8aec74.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "john walsh",
            "display_name": "john walsh",
            "team": "T4G9NBD2M",
            "name": "john.walsh16",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hyIv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anybody used betfairlight to display golf if so what are the market_catalogue entries"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1596620028.048900",
        "client_msg_id": "18669572-479d-48be-878e-d43a16434487",
        "text": "Welcome, change horse racing for golf should give you a good start <https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/exampleone.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[liampauling\/betfair] examples\/exampleone.py",
                "text": "```\nimport betfairlightweight\nfrom betfairlightweight import filters\n\n\n# create trading instance\ntrading = betfairlightweight.APIClient(\"username\", \"password\", app_key=\"appKey\")\n\n# login\ntrading.login()\n\n# make event type request to find horse racing event type\nhorse_racing_event_type_id = trading.betting.list_event_types(\n    filter=filters.market_filter(text_query=\"Horse Racing\")\n)\n\n# returns one result\nprint(horse_racing_event_type_id)\n\nfor event_type in horse_racing_event_type_id:\n    # prints id, name and market count\n    print(event_type.event_type.id, event_type.event_type.name, event_type.market_count)\n    horse_racing_id = event_type.event_type.id\n\n    # list all horse racing market catalogues\n    market_catalogues = trading.betting.list_market_catalogue(\n        filter=filters.market_filter(\n            event_type_ids=[horse_racing_id],  # filter on just horse racing\n            market_countries=[\"GB\"],  # filter on just GB countries\n            market_type_codes=[\"WIN\"],  # filter on just WIN market types\n        ),\n        market_projection=[\n            \"MARKET_START_TIME\",\n            \"RUNNER_DESCRIPTION\",\n        ],  # runner description required\n        max_results=1,\n    )\n\n    print(\"%s market catalogues returned\" % len(market_catalogues))\n\n    for market_catalogue in market_catalogues:\n        # prints market id, market name and market start time\n        print(\n            market_catalogue.market_id,\n            market_catalogue.market_name,\n            market_catalogue.market_start_time,\n        )\n\n        for runner in market_catalogue.runners:\n            # prints runner id, runner name and handicap\n            print(runner.selection_id, runner.runner_name, runner.handicap)\n\n        # market book request\n        market_books = trading.betting.list_market_book(\n            market_ids=[market_catalogue.market_id],\n            price_projection=filters.price_projection(\n                price_data=filters.price_data(ex_all_offers=True)\n            ),\n        )\n\n        for market_book in market_books:\n            # prints market id, inplay?, status and total matched\n            print(\n                market_book.market_id,\n                market_book.inplay,\n                market_book.status,\n                market_book.total_matched,\n            )\n\n            for runner in market_book.runners:\n                # prints selection id, status and total matched\n                print(runner.selection_id, runner.status, runner.total_matched)\n\n                available_to_back = runner.ex.available_to_back\n                available_to_lay = runner.ex.available_to_lay\n                print(available_to_back, available_to_lay)\n\n\n# logout\ntrading.logout()\n\n```",
                "title": "examples\/exampleone.py",
                "footer": "<https:\/\/github.com\/liampauling\/betfair|liampauling\/betfair>",
                "id": 1,
                "title_link": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/exampleone.py",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/exampleone.py",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MVz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Welcome, change horse racing for golf should give you a good start "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/exampleone.py"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0154JA98TH",
        "type": "message",
        "ts": "1596630745.050400",
        "client_msg_id": "d86da8e7-9185-450f-9a59-3bdd46770e7c",
        "text": "Hey guys is it possible to get a print out of an accounts appKey through just the corersponding bf account username and password using bflw?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g04d857ee3ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/04d857ee3ad168a8451932c84c7d0d6d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Wadsworth",
            "display_name": "Jono",
            "team": "T4G9NBD2M",
            "name": "jonowads",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "97GEk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey guys is it possible to get a print out of an accounts appKey through just the corersponding bf account username and password using bflw?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1596633227.051500",
        "client_msg_id": "20997bdd-f301-412b-95c7-63c706ecea01",
        "text": "no we don't have that endpoint added (we can) however you need a session token (or ssoid as they call it) which you can't get from the api without an appKey however I think you can use the website login endpoint to get one",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/qkLM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "no we don't have that endpoint added (we can) however you need a session token (or ssoid as they call it) which you can't get from the api without an appKey however I think you can use the website login endpoint to get one"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0154JA98TH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0154JA98TH",
        "type": "message",
        "ts": "1596634298.051800",
        "client_msg_id": "0115d79d-769f-4558-bfc7-0e9c726c2169",
        "text": "ah right cheers",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g04d857ee3ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/04d857ee3ad168a8451932c84c7d0d6d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Wadsworth",
            "display_name": "Jono",
            "team": "T4G9NBD2M",
            "name": "jonowads",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nQ5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ah right cheers"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016TGY3676",
        "type": "message",
        "ts": "1596662868.062200",
        "client_msg_id": "01951ab1-d837-44d3-8584-6bc8eb2235c5",
        "text": "What's the best way to achieve interprocess control between bots in python? I basically have a strategy that locks into one market until closure and then moves on to the next available market. If I run multiple instances of the same bot, what's the easiest way to avoid them locking onto the same market? I currently pickle the market ids and check the pickle file to confirm that no other bots are already working on the market but it's a bit clunky and I'd like to use something less error prone.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6a681220e11",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6a681220e11c1a2ed3685375d658dadb.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "birchy",
            "display_name": "birchy",
            "team": "T4G9NBD2M",
            "name": "birchy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MH61",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's the best way to achieve interprocess control between bots in python? I basically have a strategy that locks into one market until closure and then moves on to the next available market. If I run multiple instances of the same bot, what's the easiest way to avoid them locking onto the same market? I currently pickle the market ids and check the pickle file to confirm that no other bots are already working on the market but it's a bit clunky and I'd like to use something less error prone."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPMUFSGCR",
        "type": "message",
        "ts": "1596663400.062500",
        "client_msg_id": "8808182c-f0d1-4f92-94ee-43b1fd06d254",
        "text": "You could try queues",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "31c0bb5a442c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/812386967189_31c0bb5a442c5b8d2c61_72.png",
            "first_name": "Jon",
            "real_name": "Jon Jon Jon Jon Jon Jon Jon Jon",
            "display_name": "Jonjonjon",
            "team": "T4G9NBD2M",
            "name": "fcmisc",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1M5To",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You could try queues"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPMUFSGCR",
        "type": "message",
        "ts": "1596663453.063000",
        "client_msg_id": "8ff1fc39-d7b3-4160-b846-24e2c9fc4fad",
        "text": "Unless my Python is out of date, you'll need the multiprocessing version of the Queue: <https:\/\/docs.python.org\/3\/library\/multiprocessing.html>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "31c0bb5a442c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/812386967189_31c0bb5a442c5b8d2c61_72.png",
            "first_name": "Jon",
            "real_name": "Jon Jon Jon Jon Jon Jon Jon Jon",
            "display_name": "Jonjonjon",
            "team": "T4G9NBD2M",
            "name": "fcmisc",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G1i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unless my Python is out of date, you'll need the multiprocessing version of the Queue: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.python.org\/3\/library\/multiprocessing.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGV299K6H",
        "type": "message",
        "ts": "1596665963.066800",
        "client_msg_id": "6441554e-e70b-42e0-90da-71b75ca14084",
        "text": "Can't you just write some sort of 'market' class that holds everything relevant to a market and then process any number of markets at once by passing the market_books out of the queue to objects of that class? That's what I do. I'm not much of a programmer though so maybe that's not how you're meant to do it.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3a262a3cfba",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3a262a3cfba292c18acf5777f65908a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Michael",
            "real_name": "Michael C",
            "display_name": "Michael",
            "team": "T4G9NBD2M",
            "name": "michael",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YUA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can't you just write some sort of 'market' class that holds everything relevant to a market and then process any number of markets at once by passing the market_books out of the queue to objects of that class? That's what I do. I'm not much of a programmer though so maybe that's not how you're meant to do it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGV299K6H",
        "type": "message",
        "ts": "1596665990.067300",
        "client_msg_id": "14bf791a-0581-451c-a2d3-c5dffa9215e8",
        "text": "No need for multiple instances of bots that way.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3a262a3cfba",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3a262a3cfba292c18acf5777f65908a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Michael",
            "real_name": "Michael C",
            "display_name": "Michael",
            "team": "T4G9NBD2M",
            "name": "michael",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2lrD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No need for multiple instances of bots that way."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016535QCJ2",
        "type": "message",
        "ts": "1596687610.068600",
        "client_msg_id": "1ab2700a-6f63-4385-aa6e-b940fc80c5d2",
        "text": "<@U016TGY3676> - is there a reason why you want to run multiple instances of the same application? All it does is add a level of complexity that should be easy to avoid",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "048f61bdc189",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-01\/1216267094995_048f61bdc189acecaafc_72.jpg",
            "first_name": "Misha",
            "real_name": "Misha Charrett",
            "display_name": "Misha",
            "team": "T4G9NBD2M",
            "name": "misha",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596687610.068600",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1596750971.169400",
        "reply_users": [
            "U016TGY3676",
            "U016535QCJ2"
        ],
        "replies": [
            {
                "user": "U016TGY3676",
                "ts": "1596734586.169100"
            },
            {
                "user": "U016535QCJ2",
                "ts": "1596750971.169400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QxRRx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016TGY3676"
                            },
                            {
                                "type": "text",
                                "text": " - is there a reason why you want to run multiple instances of the same application? All it does is add a level of complexity that should be easy to avoid"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1596692522.068700",
        "text": "Redis",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[August 5th, 2020 10:27 PM] birchy: What's the best way to achieve interprocess control between bots in python? I basically have a strategy that locks into one market until closure and then moves on to the next available market. If I run multiple instances of the same bot, what's the easiest way to avoid them locking onto the same market? I currently pickle the market ids and check the pickle file to confirm that no other bots are already working on the market but it's a bit clunky and I'd like to use something less error prone.",
                "ts": "1596662868.062200",
                "author_id": "U016TGY3676",
                "author_subname": "birchy",
                "channel_id": "C4HL6EZTQ",
                "is_msg_unfurl": true,
                "text": "What's the best way to achieve interprocess control between bots in python? I basically have a strategy that locks into one market until closure and then moves on to the next available market. If I run multiple instances of the same bot, what's the easiest way to avoid them locking onto the same market? I currently pickle the market ids and check the pickle file to confirm that no other bots are already working on the market but it's a bit clunky and I'd like to use something less error prone.",
                "author_name": "birchy",
                "author_link": "https:\/\/betfairlightweight.slack.com\/team\/U016TGY3676",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/6a681220e11c1a2ed3685375d658dadb.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/betfairlightweight.slack.com\/archives\/C4HL6EZTQ\/p1596662868062200",
                "is_share": true,
                "footer": "Slack conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G4MYe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Redis"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U9JHLMZB4",
                    "U016TGY3676"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U016535QCJ2",
        "type": "message",
        "ts": "1596693112.069800",
        "client_msg_id": "5121da7b-9eaf-4897-8707-602461998f5f",
        "text": "Yes, but only if you need it. My view is why add inter-process communication unless necessary",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "048f61bdc189",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-01\/1216267094995_048f61bdc189acecaafc_72.jpg",
            "first_name": "Misha",
            "real_name": "Misha Charrett",
            "display_name": "Misha",
            "team": "T4G9NBD2M",
            "name": "misha",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mAWq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, but only if you need it. My view is why add inter-process communication unless necessary"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1596693255.072400",
        "client_msg_id": "b6a2a9d5-cf7f-4340-9627-50203c7ac445",
        "text": "My trading platform is made up of multiple components each of which is a separate Python process. For example, a Betfair price feed, a market catalogue feed, and each event traded is its own process. Communication between them is done primarily using Redis pubsub but other features are useful - e.g. storing the market catalogues for easy lookup by the different components. For your use case a Redis Set would be perfect for keeping track of which markets you're trading",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+mE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My trading platform is made up of multiple components each of which is a separate Python process. For example, a Betfair price feed, a market catalogue feed, and each event traded is its own process. Communication between them is done primarily using Redis pubsub but other features are useful - e.g. storing the market catalogues for easy lookup by the different components. For your use case a Redis Set would be perfect for keeping track of which markets you're trading"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U016TGY3676"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016535QCJ2",
        "type": "message",
        "ts": "1596693329.072800",
        "client_msg_id": "fc4b7b75-8a69-4d3a-b7e1-ce6978ebdfe8",
        "text": "Any reason why you chose to split into separate processes?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "048f61bdc189",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-01\/1216267094995_048f61bdc189acecaafc_72.jpg",
            "first_name": "Misha",
            "real_name": "Misha Charrett",
            "display_name": "Misha",
            "team": "T4G9NBD2M",
            "name": "misha",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6vQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Any reason why you chose to split into separate processes?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016535QCJ2",
        "type": "message",
        "ts": "1596693374.073600",
        "client_msg_id": "e6ab3817-ac71-481c-8a93-a96957ea8dfe",
        "text": "(agree with the logical architecture)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "048f61bdc189",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-01\/1216267094995_048f61bdc189acecaafc_72.jpg",
            "first_name": "Misha",
            "real_name": "Misha Charrett",
            "display_name": "Misha",
            "team": "T4G9NBD2M",
            "name": "misha",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hA0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(agree with the logical architecture)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1596693484.075400",
        "client_msg_id": "4f0aaf28-030d-4b0f-a0e4-2b0f1ea7d04c",
        "text": "All of the usual advantages of \"microservices\" - e.g. the trader for one event crashes and it doesn't take down the entire system. Or new features can be added to one of the feeds without bringing down the entire platform. Or new components can be written to access data that is already being made globally available by subscribing to the relevant pubsub topics",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5X\/Th",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All of the usual advantages of \"microservices\" - e.g. the trader for one event crashes and it doesn't take down the entire system. Or new features can be added to one of the feeds without bringing down the entire platform. Or new components can be written to access data that is already being made globally available by subscribing to the relevant pubsub topics"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U016535QCJ2",
                    "ULDAVFDRP",
                    "U9JHLMZB4",
                    "UUE6E1LA1"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U016535QCJ2",
        "type": "message",
        "ts": "1596693856.080200",
        "edited": {
            "user": "U016535QCJ2",
            "ts": "1596693887.000000"
        },
        "client_msg_id": "c2760567-b172-410f-b9e2-1973d73c273b",
        "text": "Fair enough. I split into two processes - one that generates the market information, which is read by the trader. The \"Market Monitor\" publishes information as a tree of JSON files that are served by a web server. Since the data is fairly static this is incredibly efficient and enables all the data to be viewed through a browser from anywhere (the URL links are embedded in the data). Both the monitor and the trader are built using a micro-services framework, but the services communication is between threads. I could put them in different applications (I used to), but this way is more efficient",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "048f61bdc189",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-01\/1216267094995_048f61bdc189acecaafc_72.jpg",
            "first_name": "Misha",
            "real_name": "Misha Charrett",
            "display_name": "Misha",
            "team": "T4G9NBD2M",
            "name": "misha",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "adt0G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fair enough. I split into two processes - one that generates the market information, which is read by the trader. The \"Market Monitor\" publishes information as a tree of JSON files that are served by a web server. Since the data is fairly static this is incredibly efficient and enables all the data to be viewed through a browser from anywhere (the URL links are embedded in the data). Both the monitor and the trader are built using a micro-services framework, but the services communication is between threads. I could put them in different applications (I used to), but this way is more efficient"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULDAVFDRP",
        "type": "message",
        "ts": "1596694130.082100",
        "client_msg_id": "217704c9-dacf-4da8-9cf0-ba7303f81f74",
        "text": "Redis streams act as a great queue",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g46fe1c1bf03",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b46fe1c1bf03e18d951e7032fb494283.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Oliver Varney",
            "display_name": "Oliver Varney",
            "team": "T4G9NBD2M",
            "name": "oliverashleyvarney",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1=+SH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Redis streams act as a great queue"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "muscle",
                "users": [
                    "UBS7QANF3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1596694150.082500",
        "edited": {
            "user": "UBS7QANF3",
            "ts": "1596694158.000000"
        },
        "client_msg_id": "b894bc1f-ed8b-4794-a23a-3ea19970835f",
        "text": "Yeah I think publishing data is a particularly nice feature to have, whether it is via a web server or Redis or any myriad number of options because then you can build things on top of that",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lWqq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah I think publishing data is a particularly nice feature to have, whether it is via a web server or Redis or any myriad number of options because then you can build things on top of that"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1596696142.085400",
        "client_msg_id": "3e83e981-2593-4c3e-9301-39df2f8a2900",
        "text": "For some context I would agree with Misha when trying to keep things simple, as <@UBS7QANF3> you are obviously operating at a much larger scale compared to the average 'one man band'",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A=Si",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For some context I would agree with Misha when trying to keep things simple, as "
                            },
                            {
                                "type": "user",
                                "user_id": "UBS7QANF3"
                            },
                            {
                                "type": "text",
                                "text": " you are obviously operating at a much larger scale compared to the average 'one man band'"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1596696271.086100",
        "client_msg_id": "7d246a49-3684-4b5d-a6fa-160367e80f58",
        "text": "Shouldn't everyone aspire to operate at large scale? :man-shrugging:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/EfLG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Shouldn't everyone aspire to operate at large scale? "
                            },
                            {
                                "type": "emoji",
                                "name": "man-shrugging",
                                "unicode": "1f937-200d-2642-fe0f"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016535QCJ2",
        "type": "message",
        "ts": "1596697136.086500",
        "client_msg_id": "393e5fc5-8691-4957-90c3-fa6b22c96989",
        "text": "YAGNI",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "048f61bdc189",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-01\/1216267094995_048f61bdc189acecaafc_72.jpg",
            "first_name": "Misha",
            "real_name": "Misha Charrett",
            "display_name": "Misha",
            "team": "T4G9NBD2M",
            "name": "misha",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qhra",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "YAGNI"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016535QCJ2",
        "type": "message",
        "ts": "1596697153.086900",
        "client_msg_id": "b9adc6e8-a8b3-4f72-8492-09952362f19e",
        "text": "I think planning for a larger scale is false optimisation",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "048f61bdc189",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-01\/1216267094995_048f61bdc189acecaafc_72.jpg",
            "first_name": "Misha",
            "real_name": "Misha Charrett",
            "display_name": "Misha",
            "team": "T4G9NBD2M",
            "name": "misha",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a634",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think planning for a larger scale is false optimisation"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U016177TP2L",
                    "U92CASP1B"
                ],
                "count": 2
            }
        ]
    }
]