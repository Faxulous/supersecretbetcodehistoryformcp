[
    {
        "subtype": "channel_join",
        "user": "U028EDV2STD",
        "text": "<@U028EDV2STD> has joined the channel",
        "type": "message",
        "ts": "1626604860.486900",
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "U01J98RDHRN"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02841C7R1R",
        "type": "message",
        "ts": "1626605473.492400",
        "edited": {
            "user": "U02841C7R1R",
            "ts": "1626605736.000000"
        },
        "client_msg_id": "a1fcc05a-113f-4d90-b293-859b21dbf197",
        "text": "I'm trying to implement a custom \"market recorder\" in Flumine that also records the relevant `inplayservice` events (or status) and is back-testable for a strategy that also uses the `inplayservice` data?\n\nHow would you approach this on a high-level?\n\nI apologize for the vague question, but I'm not quite in-depth with the codebase and need a push to the right direction.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gf643a605970",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f643a60597087f5497382f8025757bc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Juha Kiili",
            "display_name": "Juha Kiili",
            "team": "T4G9NBD2M",
            "name": "juha",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1626605473.492400",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1626622774.494200",
        "reply_users": [
            "U02841C7R1R",
            "U4H19D1D2"
        ],
        "replies": [
            {
                "user": "U02841C7R1R",
                "ts": "1626612177.492600"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1626622774.494200"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1626622774.494200",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c8M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm trying to implement a custom \"market recorder\" in Flumine that also records the relevant "
                            },
                            {
                                "type": "text",
                                "text": "inplayservice",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " events (or status) and is back-testable for a strategy that also uses the "
                            },
                            {
                                "type": "text",
                                "text": "inplayservice",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " data?\n\nHow would you approach this on a high-level?\n\nI apologize for the vague question, but I'm not quite in-depth with the codebase and need a push to the right direction."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02841C7R1R",
        "type": "message",
        "ts": "1626612177.492600",
        "client_msg_id": "02225177-eb41-4657-b885-0c96e54f39a8",
        "text": "Answering my own question. For now I think I'm going to...\n\nIn `inplayservice` callback\n```for strategy in flumine.strategies:\n    strategy.context[\"score\"][market.market_id] = { #whatever score data }```\nAnd in `MarketRecroder.process_raw_data()` i'm injecting it into the saved json\n```json.dumps({\"op\": \"mcm\", \"clk\": None, \"pt\": publish_time, \"mc\": [data], \"score\": self.context[\"score\"][market_id]})```\nThen in my actual strategy backtesting, I need to parse it back somehow, but haven't looked at it yet.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gf643a605970",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f643a60597087f5497382f8025757bc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Juha Kiili",
            "display_name": "Juha Kiili",
            "team": "T4G9NBD2M",
            "name": "juha",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1626605473.492400",
        "parent_user_id": "U02841C7R1R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xaMG6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Answering my own question. For now I think I'm going to...\n\nIn "
                            },
                            {
                                "type": "text",
                                "text": "inplayservice",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " callback\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for strategy in flumine.strategies:\n    strategy.context[\"score\"][market.market_id] = { #whatever score data }"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAnd in "
                            },
                            {
                                "type": "text",
                                "text": "MarketRecroder.process_raw_data()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " i'm injecting it into the saved json\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "json.dumps({\"op\": \"mcm\", \"clk\": None, \"pt\": publish_time, \"mc\": [data], \"score\": self.context[\"score\"][market_id]})"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThen in my actual strategy backtesting, I need to parse it back somehow, but haven't looked at it yet."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1626622774.494200",
        "client_msg_id": "36613EB9-97BF-4D9E-9659-B0456B0F210A",
        "text": "Let me know how you get on, need to create some examples for this, when back testing you need to use some middleware to inject into the context, I shared an example last year I think  ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1626605473.492400",
        "parent_user_id": "U02841C7R1R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FEvqd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let me know how you get on, need to create some examples for this, when back testing you need to use some middleware to inject into the context, I shared an example last year I think  "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U02841C7R1R"
                ],
                "count": 1
            }
        ]
    }
]