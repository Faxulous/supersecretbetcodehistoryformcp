[
    {
        "user": "U012XF5CNPN",
        "type": "message",
        "ts": "1639643033.441600",
        "client_msg_id": "989ACC24-8272-4B65-9D5C-B380EC227623",
        "text": "Performance\/price, and the architecture is quite novel. We should probably just flat out benchmark some of this stuff really, shouldn't we?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gf0a1c4f12dc",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f0a1c4f12dc16bc00aa5abf1a75d640e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Paul",
            "real_name": "Paul Robinson",
            "display_name": "Paul",
            "team": "T4G9NBD2M",
            "name": "paul",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1639491974.395400",
        "parent_user_id": "U02KWHK2H89",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ujXXO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Performance\/price, and the architecture is quite novel. We should probably just flat out benchmark some of this stuff really, shouldn't we?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U02FXEUUMRN"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U012XF5CNPN",
        "type": "message",
        "ts": "1639643170.445200",
        "client_msg_id": "F1538161-6098-44C3-B746-792D4DA51724",
        "text": "On another point last night I broke my remote code-server setup I used to write bot code on my iPad. Gave AWS Cloud9 (a cloud native IDE), a go, and was pleasantly surprised by it. Think over Christmas I can see myself getting a setup where I use sagemaker for jupyter, and cloud9 for coding. But then, I'm on the Kool Aid, so…",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gf0a1c4f12dc",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f0a1c4f12dc16bc00aa5abf1a75d640e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Paul",
            "real_name": "Paul Robinson",
            "display_name": "Paul",
            "team": "T4G9NBD2M",
            "name": "paul",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1639491974.395400",
        "parent_user_id": "U02KWHK2H89",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZtLd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On another point last night I broke my remote code-server setup I used to write bot code on my iPad. Gave AWS Cloud9 (a cloud native IDE), a go, and was pleasantly surprised by it. Think over Christmas I can see myself getting a setup where I use sagemaker for jupyter, and cloud9 for coding. But then, I'm on the Kool Aid, so…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U012XF5CNPN",
        "type": "message",
        "ts": "1639643209.446300",
        "client_msg_id": "95405359-D5F8-460D-AC7B-6AC653A23417",
        "text": "code-server is fun though - when it works - because it's just VS Code, but in a browser",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gf0a1c4f12dc",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f0a1c4f12dc16bc00aa5abf1a75d640e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Paul",
            "real_name": "Paul Robinson",
            "display_name": "Paul",
            "team": "T4G9NBD2M",
            "name": "paul",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1639491974.395400",
        "parent_user_id": "U02KWHK2H89",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZUiDB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "code-server is fun though - when it works - because it's just VS Code, but in a browser"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Getting closer to live",
        "files": [
            {
                "id": "F02QZ7X3CMQ",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U4H19D1D2",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zvpTM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Getting closer to live"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1639644395.446500",
        "client_msg_id": "c9a58fe0-a7fd-464f-96c3-cefa8542761d",
        "thread_ts": "1639558480.409500",
        "parent_user_id": "U4H19D1D2"
    },
    {
        "user": "U01U24AG35W",
        "type": "message",
        "ts": "1639649837.446800",
        "client_msg_id": "196d083c-5aa3-417a-bb1e-526fd078be60",
        "text": "Wow, those type of \"since the beginning\" bugs are so so soooo hard to find, so damn almost impossible to track down.\n:+1::+1::+1:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "d12d00b0e337",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-05\/1930559079267_d12d00b0e33706cb4bbd_72.png",
            "first_name": "Thomas",
            "real_name": "Thomas Jakubauskas",
            "display_name": "ThomasJ",
            "team": "T4G9NBD2M",
            "name": "thomasaj05",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1639558480.409500",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "twS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow, those type of \"since the beginning\" bugs are so so soooo hard to find, so damn almost impossible to track down.\n"
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01B8031PM1",
        "type": "message",
        "ts": "1639652085.449000",
        "edited": {
            "user": "U01B8031PM1",
            "ts": "1639652125.000000"
        },
        "client_msg_id": "cd3441dd-29eb-4586-84f1-bd5c8d0c54ff",
        "text": "I’m pretty sure I am over complicating this with `client.account.get_account_statement`. Is there a simple way to query account P&amp;L over date range please (similar to how website computes is fine (today, from yesterday, 30 days etc)?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6e482a0e41b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6e482a0e41b232f48d801454006dfa56.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "river_shah",
            "real_name": "river_shah",
            "display_name": "river_shah",
            "team": "T4G9NBD2M",
            "name": "ansar.sa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1639652085.449000",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1642176686.000300",
        "reply_users": [
            "U9JHLMZB4",
            "U02TG3K70KW"
        ],
        "replies": [
            {
                "user": "U9JHLMZB4",
                "ts": "1639658642.449300"
            },
            {
                "user": "U02TG3K70KW",
                "ts": "1642176686.000300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oUa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m pretty sure I am over complicating this with "
                            },
                            {
                                "type": "text",
                                "text": "client.account.get_account_statement",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Is there a simple way to query account P&L over date range please (similar to how website computes is fine (today, from yesterday, 30 days etc)?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U9JHLMZB4",
        "type": "message",
        "ts": "1639658642.449300",
        "edited": {
            "user": "U9JHLMZB4",
            "ts": "1639658701.000000"
        },
        "client_msg_id": "3a57d8e5-2f16-4b8a-9528-e1805cd0f240",
        "text": "I thought \"that can't be too difficult\" then took a look at the now very old script I have running as a daily cron job to do it. Hmmmm.\n\nI'll stick it up here in case it helps. Ignore references to workspaces and the database stuff that uses my custom helper. Also my \"trading\" == your \"client\". Hope it helps ...\n\n```import os\nimport sys\nimport json\nimport betfairlightweight\nfrom datetime import datetime, timedelta\nfrom helpers.DatabaseHelpers import database\n\nWORKSPACE_PREFIX = os.getenv(\"WORKSPACE_PREFIX\")\nDATABASE_TABLE = \"betfair_statement_lines\"\nSQL = \"\"\"\n    INSERT INTO {}\n    (refId, amount, avgPrice, betSize, betType, betCategoryType, commissionRate, eventId, eventTypeId, fullMarketName, grossBetAmount, marketName, marketType, placedDate,\n     selectionId, selectionName, handicap, startDate, transactionType, transactionId, winLose, deadHeatPriceDivisor, avgPriceRaw)\n    VALUES ({})\n\"\"\".format(DATABASE_TABLE, ('%s,' * 23)[:-1])\n\ndef processing_date():\n    if len(sys.argv) &gt; 1:\n        return sys.argv[1]\n    else:\n        return str(datetime.today() - timedelta(days=1))[:10] # returns date as a string without time\n\ndef download_account_statement(date_str):\n    db = database()\n    existing_lines = db.fetch_all('SELECT refId, winLose FROM {} where left(placedDate, 10) = \"{}\"'.format(DATABASE_TABLE, date_str))\n    process = True\n    from_record = 0\n    while process:\n        print(date_str, from_record, \"-\", from_record + 99)\n        start_time = date_str + \"T00:00:00Z\"\n        end_time = date_str + \"T23:59:59Z\"\n        time_range = betfairlightweight.filters.time_range(from_=start_time, to=end_time)\n        ast = trading.account.get_account_statement(\n            from_record=from_record,\n            item_date_range=time_range,\n            include_item=\"ALL\",\n        )\n        txns = []\n        for a in ast.account_statement:\n            line = json.loads(a.item_class_data[\"unknownStatementItem\"])\n            if (int(a.ref_id), line[\"winLose\"]) not in existing_lines:\n                txns.append(list({**{\"refId\": a.ref_id, \"amount\": a.amount}, **line}.values()))\n        result = db.execute_many(SQL, txns)\n        if result: print(result)\n        from_record += 100\n        process = ast.more_available\n    db.close()\n\ntrading = betfairlightweight.APIClient(os.getenv(\"BETFAIR_USERNAME\"), os.getenv(\"BETFAIR_PASSWORD\"), app_key=os.getenv(\"BETFAIR_LIVE_KEY\"), certs=WORKSPACE_PREFIX + \"certs\")\ntrading.login()\n\ndownload_account_statement(processing_date())```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g951ddcb43e7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3951ddcb43e788a387d6daf330dad5ca.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "",
            "real_name": "Peter Coles",
            "display_name": "Peter",
            "team": "T4G9NBD2M",
            "name": "peter",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1639652085.449000",
        "parent_user_id": "U01B8031PM1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iid6L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I thought \"that can't be too difficult\" then took a look at the now very old script I have running as a daily cron job to do it. Hmmmm.\n\nI'll stick it up here in case it helps. Ignore references to workspaces and the database stuff that uses my custom helper. Also my \"trading\" == your \"client\". Hope it helps ...\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "import os\nimport sys\nimport json\nimport betfairlightweight\nfrom datetime import datetime, timedelta\nfrom helpers.DatabaseHelpers import database\n\nWORKSPACE_PREFIX = os.getenv(\"WORKSPACE_PREFIX\")\nDATABASE_TABLE = \"betfair_statement_lines\"\nSQL = \"\"\"\n    INSERT INTO {}\n    (refId, amount, avgPrice, betSize, betType, betCategoryType, commissionRate, eventId, eventTypeId, fullMarketName, grossBetAmount, marketName, marketType, placedDate,\n     selectionId, selectionName, handicap, startDate, transactionType, transactionId, winLose, deadHeatPriceDivisor, avgPriceRaw)\n    VALUES ({})\n\"\"\".format(DATABASE_TABLE, ('%s,' * 23)[:-1])\n\ndef processing_date():\n    if len(sys.argv) > 1:\n        return sys.argv[1]\n    else:\n        return str(datetime.today() - timedelta(days=1))[:10] # returns date as a string without time\n\ndef download_account_statement(date_str):\n    db = database()\n    existing_lines = db.fetch_all('SELECT refId, winLose FROM {} where left(placedDate, 10) = \"{}\"'.format(DATABASE_TABLE, date_str))\n    process = True\n    from_record = 0\n    while process:\n        print(date_str, from_record, \"-\", from_record + 99)\n        start_time = date_str + \"T00:00:00Z\"\n        end_time = date_str + \"T23:59:59Z\"\n        time_range = betfairlightweight.filters.time_range(from_=start_time, to=end_time)\n        ast = trading.account.get_account_statement(\n            from_record=from_record,\n            item_date_range=time_range,\n            include_item=\"ALL\",\n        )\n        txns = []\n        for a in ast.account_statement:\n            line = json.loads(a.item_class_data[\"unknownStatementItem\"])\n            if (int(a.ref_id), line[\"winLose\"]) not in existing_lines:\n                txns.append(list({**{\"refId\": a.ref_id, \"amount\": a.amount}, **line}.values()))\n        result = db.execute_many(SQL, txns)\n        if result: print(result)\n        from_record += 100\n        process = ast.more_available\n    db.close()\n\ntrading = betfairlightweight.APIClient(os.getenv(\"BETFAIR_USERNAME\"), os.getenv(\"BETFAIR_PASSWORD\"), app_key=os.getenv(\"BETFAIR_LIVE_KEY\"), certs=WORKSPACE_PREFIX + \"certs\")\ntrading.login()\n\ndownload_account_statement(processing_date())"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U02QTC0RWDC",
        "text": "<@U02QTC0RWDC> has joined the channel",
        "type": "message",
        "ts": "1639675008.449700"
    }
]