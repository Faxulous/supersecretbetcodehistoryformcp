[
    {
        "user": "U04980ZT6UX",
        "type": "message",
        "ts": "1676221156.581349",
        "edited": {
            "user": "U04980ZT6UX",
            "ts": "1676221179.000000"
        },
        "client_msg_id": "856a1a1f-1af6-49e8-9d02-181649ab1198",
        "text": "Hi <@U4H19D1D2>, thanks a lot!\n\nI am backtesting the strategy using the Flumine Backtester (along with data collected from Flumine data recorder).\nMy my market_catalogue is never available (market.market_catalogue is always None).\n\nI know it stores data in two different folders:\n• marketCatalogue\/\n• streaming\/\nI am only giving passing to the backtester the path to the streaming file (in the market_filter argument, see code below).  My understanding is that the streaming data also contains market_catalogue messages from the exchange, so that shouldn't be a problem. Am I missing something? Any help will be appreciated.\n\n```strategy = MakerStrategy(\n    client=client,\n    name=\"bt\",\n    market_filter={\"markets\": [path_to_streaming_file]},\n    conflate_ms=100,\n    max_live_trade_count=1000,\n    max_selection_exposure=1000,\n    max_order_exposure=1000\n)```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gb1b2f82a1a4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b1b2f82a1a49a547cbc7487b48805187.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "AI",
            "real_name": "AI Trader",
            "display_name": "AI Trader",
            "team": "T4G9NBD2M",
            "name": "menocineto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1675996267.153399",
        "parent_user_id": "U04980ZT6UX",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UL4v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": ", thanks a lot!\n\nI am backtesting the strategy using the Flumine Backtester (along with data collected from Flumine data recorder).\nMy my market_catalogue is never available (market.market_catalogue is always None).\n\nI know it stores data in two different folders:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "marketCatalogue\/",
                                        "style": {
                                            "unlink": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "streaming\/"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI am only giving passing to the backtester the path to the streaming file (in the market_filter argument, see code below).  My understanding is that the streaming data also contains market_catalogue messages from the exchange, so that shouldn't be a problem. Am I missing something? Any help will be appreciated.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "strategy = MakerStrategy(\n    client=client,\n    name=\"bt\",\n    market_filter={\"markets\": [path_to_streaming_file]},\n    conflate_ms=100,\n    max_live_trade_count=1000,\n    max_selection_exposure=1000,\n    max_order_exposure=1000\n)"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1676223708.172579",
        "client_msg_id": "B8F84B47-5094-4F36-B23E-30C5A1B1AE70",
        "text": "You missed that crucial piece of info in your original message… you need to use the market catalogue worker in the examples if simulating ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1675996267.153399",
        "parent_user_id": "U04980ZT6UX",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cD0A3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You missed that crucial piece of info in your original message"
                            },
                            {
                                "type": "text",
                                "text": "…"
                            },
                            {
                                "type": "text",
                                "text": " you need to use the market catalogue worker in the examples if simulating "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03N4QBJ0TV",
        "type": "message",
        "ts": "1676240857.652079",
        "client_msg_id": "f0a5ca74-c7c5-46c3-90c9-eddedda2610c",
        "text": "Is there a way to add multiprocessing to the FlumineSimulation class (think this would be the correct class to add it to) to get it to speed up back tests? Idea would be to run the simulation on the markets in parallel then collect and merge the results. Mt attempts so far haven't worked.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g2c8538b47ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2c8538b47ad4bed6facbb148134bb486.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Trex44",
            "real_name": "Trex44",
            "display_name": "Trex44",
            "team": "T4G9NBD2M",
            "name": "c.s.mpharm",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9q8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a way to add multiprocessing to the FlumineSimulation class (think this would be the correct class to add it to) to get it to speed up back tests? Idea would be to run the simulation on the markets in parallel then collect and merge the results. Mt attempts so far haven't worked."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01D23DDMTQ",
        "type": "message",
        "ts": "1676242401.041759",
        "client_msg_id": "A2D17923-EC1F-4803-9060-0E5A78B39F0E",
        "text": "Taking such an approach means you can’t have bank management across markets. Which market runs first? But to simulate strategy on markets in parallel to collect results I’ve used ProcessPoolExecutor in Python concurrent.futures.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "5d6a9e5a85c0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-06-26\/2219792322468_5d6a9e5a85c01e3abc9e_72.png",
            "first_name": "Andrew",
            "real_name": "Andrew",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "agruskin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1676242401.041759",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1676273548.927659",
        "reply_users": [
            "U03N4QBJ0TV",
            "U01D23DDMTQ"
        ],
        "replies": [
            {
                "user": "U03N4QBJ0TV",
                "ts": "1676245521.255039"
            },
            {
                "user": "U01D23DDMTQ",
                "ts": "1676248280.087459"
            },
            {
                "user": "U03N4QBJ0TV",
                "ts": "1676273548.927659"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8arbl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Taking such an approach means you can’t have bank management across markets. Which market runs first? But to simulate strategy on markets in parallel to collect results I’ve used ProcessPoolExecutor in Python concurrent.futures."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03N4QBJ0TV",
        "type": "message",
        "ts": "1676245521.255039",
        "client_msg_id": "0bcce57a-d43d-4c7c-a77d-8b6ad5a8bbb5",
        "text": "Thanks Andrew, I am not worried about bank management for this simulation just the P&amp;L's on a race by race basis. I have been using ProcessorPoolExecutor too but it hasn't sped anything up, where\/how did you implement it if you don't mind me asking?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g2c8538b47ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2c8538b47ad4bed6facbb148134bb486.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Trex44",
            "real_name": "Trex44",
            "display_name": "Trex44",
            "team": "T4G9NBD2M",
            "name": "c.s.mpharm",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1676242401.041759",
        "parent_user_id": "U01D23DDMTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VSqEJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Andrew, I am not worried about bank management for this simulation just the P&L's on a race by race basis. I have been using ProcessorPoolExecutor too but it hasn't sped anything up, where\/how did you implement it if you don't mind me asking?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01D23DDMTQ",
        "type": "message",
        "ts": "1676248280.087459",
        "client_msg_id": "a0a98a8c-3658-4baf-a4c1-a97028fd3c27",
        "text": "Borrowed from elsewhere, and modified for my use. Can't recall where from.\n\n`market_files = [f'{MARKET_FILES_PATH}\/{path}' for path in os.listdir(MARKET_FILES_PATH,)]`\n\n`def run_process(market_files):`\n    `price_recorder = PriceRecorder(`\n        `market_filter=`\n        `{`\n            `'markets': market_files,`\n            `'event_type_ids': ['4339'],`\n            `'country_codes': ['AU'],`\n            `'market_types':['WIN'],`\n            `'listener_kwargs': {'inplay': False},`  \n        `},`\n    `)`\n\n    `framework = FlumineSimulation(clients.SimulatedClient())`\n    `framework.add_strategy(price_recorder)`\n    `framework.run()`\n\n`def main():`\n    `_start = time.time()`\n\n    `processes = os.cpu_count()  # Returns the number of CPUs in the system.`\n    `markets_per_process = 8   # 8 is optimal as it prevents data leakage.`\n\n    `_process_jobs = []`\n    `with futures.ProcessPoolExecutor(max_workers=processes) as p:`\n        `# Number of chunks to split the process into depends on the number of markets we want to process and number of CPUs we have.`\n        `chunk_size = min(`\n            `markets_per_process, math.ceil(len(market_files) \/ processes)`\n        `)`\n        `# Split all the markets we want to process into chunks to run on separate CPUs and then run them on the separate CPUs`\n        `for markets in (utils.chunks(market_files, chunk_size)):`\n            `_process_jobs.append(`\n                `p.submit(`\n                    `run_process,`\n                    `market_files=markets,`\n                `)`\n            `)`\n        `for job in <http:\/\/futures.as|futures.as>_completed(_process_jobs):`\n            `job.result()  # wait for result`\n\n    `print(f'Total execution time: {(time.time() - _start):.2f} secs')`\n\n`if __name__ == \"__main__\":`\n    `main()`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "5d6a9e5a85c0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-06-26\/2219792322468_5d6a9e5a85c01e3abc9e_72.png",
            "first_name": "Andrew",
            "real_name": "Andrew",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "agruskin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1676242401.041759",
        "parent_user_id": "U01D23DDMTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kWvY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Borrowed from elsewhere, and modified for my use. Can't recall where from.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "market_files = [f'{MARKET_FILES_PATH}\/{path}' for path in os.listdir(MARKET_FILES_PATH,)]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "def run_process(market_files):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    price_recorder = PriceRecorder(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        market_filter=",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        {",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            'markets': market_files,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            'event_type_ids': ['4339'],",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            'country_codes': ['AU'],",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            'market_types':['WIN'],",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            'listener_kwargs': {'inplay': False},  ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        },",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "    framework = FlumineSimulation(clients.SimulatedClient())",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    framework.add_strategy(price_recorder)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    framework.run()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "def main():",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    _start = time.time()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "    processes = os.cpu_count()  # Returns the number of CPUs in the system.",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    markets_per_process = 8   # 8 is optimal as it prevents data leakage.",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "    _process_jobs = []",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    with futures.ProcessPoolExecutor(max_workers=processes) as p:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        # Number of chunks to split the process into depends on the number of markets we want to process and number of CPUs we have.",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        chunk_size = min(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            markets_per_process, math.ceil(len(market_files) \/ processes)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        # Split all the markets we want to process into chunks to run on separate CPUs and then run them on the separate CPUs",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        for markets in (utils.chunks(market_files, chunk_size)):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            _process_jobs.append(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                p.submit(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    run_process,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    market_files=markets,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        for job in ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/futures.as",
                                "text": "futures.as",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "_completed(_process_jobs):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            job.result()  # wait for result",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "    print(f'Total execution time: {(time.time() - _start):.2f} secs')",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "if __name__ == \"__main__\":",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    main()",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1676272891.689019",
        "client_msg_id": "A9008D63-A3FC-45C5-84EB-617568DCBD0D",
        "text": "<https:\/\/betcode-org.github.io\/flumine\/performance\/|Yes> ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1676272891.689019",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1676280029.827879",
        "reply_users": [
            "U03N4QBJ0TV",
            "U01D23DDMTQ",
            "U4H19D1D2"
        ],
        "replies": [
            {
                "user": "U03N4QBJ0TV",
                "ts": "1676273568.550979"
            },
            {
                "user": "U01D23DDMTQ",
                "ts": "1676280002.021859"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1676280029.827879"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1676280029.827879",
        "attachments": [
            {
                "from_url": "https:\/\/betcode-org.github.io\/flumine\/performance\/",
                "service_icon": "https:\/\/betcode-org.github.io\/flumine\/images\/logo.png",
                "id": 1,
                "original_url": "https:\/\/betcode-org.github.io\/flumine\/performance\/",
                "fallback": "Performance - flumine",
                "text": "Betting trading framework",
                "title": "Performance - flumine",
                "title_link": "https:\/\/betcode-org.github.io\/flumine\/performance\/",
                "service_name": "betcode-org.github.io"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FbAGq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/betcode-org.github.io\/flumine\/performance\/",
                                "text": "Yes"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03N4QBJ0TV",
        "type": "message",
        "ts": "1676273548.927659",
        "client_msg_id": "e2ac0a11-50f7-4b34-bdd2-59215d4d6b9d",
        "text": "Thanks very much!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g2c8538b47ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2c8538b47ad4bed6facbb148134bb486.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Trex44",
            "real_name": "Trex44",
            "display_name": "Trex44",
            "team": "T4G9NBD2M",
            "name": "c.s.mpharm",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1676242401.041759",
        "parent_user_id": "U01D23DDMTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DWy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks very much!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03N4QBJ0TV",
        "type": "message",
        "ts": "1676273568.550979",
        "client_msg_id": "abe83821-9d1a-4659-b374-9f3d925b0bc9",
        "text": "Thanks very much, missed this.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g2c8538b47ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2c8538b47ad4bed6facbb148134bb486.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Trex44",
            "real_name": "Trex44",
            "display_name": "Trex44",
            "team": "T4G9NBD2M",
            "name": "c.s.mpharm",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1676272891.689019",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qaJZo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks very much, missed this."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]