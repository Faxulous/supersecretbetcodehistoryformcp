[
    {
        "user": "UJAGSTWNL",
        "type": "message",
        "ts": "1575369395.186800",
        "edited": {
            "user": "UJAGSTWNL",
            "ts": "1575369645.000000"
        },
        "client_msg_id": "1e275461-f331-4636-89be-d3162c44ddec",
        "text": "hi, I am wondering if there is a way of calling a keepalive from a separate program. I currently have three programs all with separate connections\/filters. I _thought_ I has keepalives running for each connection every 2 mins but have just noticed that they only ever execute after the output_queue.get() has returned something. Which, in some cases (overnight for example), is not often enough and I think kind of defeats the purpose of them being there? .. :expressionless:\n\nsomething like this:\n\n`while True:`\n            `market_books = output_queue.get()`\n            `dostuff(market_books)`\n\n            `if (datetime.now().second) == 1:`\n                `if keepliveCHK == False:`\n                    `keepliveCHK = True`\n                    `trading.keep_alive()`\n                    `<http:\/\/logging.info|logging.info>(\"KEEP ALIVE\")`\n            `if (datetime.now().second) != 1:`\n                `if keepliveCHK == True:`\n                    `keepliveCHK = False`\n\nCan I use the connection Id or some other variable to make an API call externally from my existing processes?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g611556e7945",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2611556e7945b45da74853db872c6a1d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "ash",
            "display_name": "ash",
            "team": "T4G9NBD2M",
            "name": "ashreid20",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f2An",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hi, I am wondering if there is a way of calling a keepalive from a separate program. I currently have three programs all with separate connections\/filters. I "
                            },
                            {
                                "type": "text",
                                "text": "thought",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I has keepalives running for each connection every 2 mins but have just noticed that they only ever execute after the output_queue.get() has returned something. Which, in some cases (overnight for example), is not often enough and I think kind of defeats the purpose of them being there? .. "
                            },
                            {
                                "type": "emoji",
                                "name": "expressionless",
                                "unicode": "1f611"
                            },
                            {
                                "type": "text",
                                "text": "\n\nsomething like this:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "while True:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            market_books = output_queue.get()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            dostuff(market_books)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "            if (datetime.now().second) == 1:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                if keepliveCHK == False:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    keepliveCHK = True",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    trading.keep_alive()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/logging.info",
                                "text": "logging.info",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(\"KEEP ALIVE\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            if (datetime.now().second) != 1:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                if keepliveCHK == True:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    keepliveCHK = False",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nCan I use the connection Id or some other variable to make an API call externally from my existing processes?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJAGSTWNL",
        "type": "message",
        "ts": "1575369458.187700",
        "client_msg_id": "4e23f25c-b21c-4023-8e92-e7411ffd39f7",
        "text": "Sorry for yet another presumably basic question, I do appreciate the opportunity to ask them.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g611556e7945",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2611556e7945b45da74853db872c6a1d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "ash",
            "display_name": "ash",
            "team": "T4G9NBD2M",
            "name": "ashreid20",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lxcG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry for yet another presumably basic question, I do appreciate the opportunity to ask them."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1575370659.189100",
        "client_msg_id": "8D77E6D6-38CC-4523-8A1F-640FEBD75083",
        "text": "If you want to keep things simple, get(block=False, timeout=120) and then handle the EmptyQueue error ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JR6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you want to keep things simple, get(block=False, timeout=120) and then handle the EmptyQueue error"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U9CP5N36K",
        "type": "message",
        "ts": "1575371749.189500",
        "client_msg_id": "fb1bbcef-6e83-407f-8321-88d7d871c4e4",
        "text": "or just run the keepalive in a separate `Timer` ?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gcece5c423ab",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/056389f13cd1994ac61ad8d38479823a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "",
            "real_name": "Hugo Young",
            "display_name": "hugo",
            "team": "T4G9NBD2M",
            "name": "hyoung",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0SPD4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "or just run the keepalive in a separate "
                            },
                            {
                                "type": "text",
                                "text": "Timer",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJAGSTWNL",
        "type": "message",
        "ts": "1575372781.191800",
        "edited": {
            "user": "UJAGSTWNL",
            "ts": "1575372965.000000"
        },
        "client_msg_id": "04f061d8-531b-44ff-ae24-dee54f6eb9b0",
        "text": "am i wrong in  my assumption that i needed a keepalive for each connection_id? if I have another script running like:\n\n`trading.login()`\n`logging.basicConfig(level=<http:\/\/logging.INFO|logging.INFO>)` \n`while True:`\n    `if ((datetime.now().second) == 1) and (keep_CHK == False):`\n        `trading.keep_alive(), keep_CHK = True , <http:\/\/logging.info|logging.info>(\"KEEP ALIVE\")`\n    `elif ((datetime.now().second) != 1) and (keep_CHK == True):`\n        `keep_CHK = False`\n\nif my api_key and loggin details are all the same that is enough?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g611556e7945",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2611556e7945b45da74853db872c6a1d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "ash",
            "display_name": "ash",
            "team": "T4G9NBD2M",
            "name": "ashreid20",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RcUQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "am i wrong in  my assumption that i needed a keepalive for each connection_id? if I have another script running like:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "trading.login()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "logging.basicConfig(level=",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/logging.INFO",
                                "text": "logging.INFO",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "while True:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    if ((datetime.now().second) == 1) and (keep_CHK == False):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        trading.keep_alive(), keep_CHK = True , ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/logging.info",
                                "text": "logging.info",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(\"KEEP ALIVE\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    elif ((datetime.now().second) != 1) and (keep_CHK == True):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        keep_CHK = False",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nif my api_key and loggin details are all the same that is enough?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1575373626.192700",
        "client_msg_id": "32179B9F-3481-438D-A7AE-B76735CAE72E",
        "text": "Each client has its own token, if you are sharing the client then you just need to refresh it once ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2h3Kc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Each client has its own token, if you are sharing the client then you just need to refresh it once"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJAGSTWNL",
        "type": "message",
        "ts": "1575374505.194600",
        "client_msg_id": "0ca1d80a-d77d-4b48-a406-0fbfde279baf",
        "text": "so i don’t need the extra log-in I just need to reference the .APIClient? ( and a few lesson’s in object-oriented programming)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g611556e7945",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2611556e7945b45da74853db872c6a1d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "ash",
            "display_name": "ash",
            "team": "T4G9NBD2M",
            "name": "ashreid20",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bA4D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so i don’t need the extra log-in I just need to reference the .APIClient? ( and a few lesson’s in object-oriented programming)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPEU7URG",
        "type": "message",
        "ts": "1575395276.196000",
        "client_msg_id": "1f9bc3b8-5dab-4366-ad43-78b4523e6cf6",
        "text": "I don't seem to be getting any results when grabbing runner back\/lay prices for the SHOWN_A_CARD market type, when querying in the same way as MATCH_ODDS or CORRECT_SCORE for example, is there anything specific\/different about that market I should be aware of?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gad95b05e95e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cad95b05e95ed7575f487d75e10e36c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Chris Davidson",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "chris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gh7a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't seem to be getting any results when grabbing runner back\/lay prices for the SHOWN_A_CARD market type, when querying in the same way as MATCH_ODDS or CORRECT_SCORE for example, is there anything specific\/different about that market I should be aware of?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1575395424.196500",
        "client_msg_id": "C2B8DA55-D609-4605-86C0-7AFECA0688FF",
        "text": "Have you checked there are any prices in the market? :wink:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J=Vr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you checked there are any prices in the market? "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPEU7URG",
        "type": "message",
        "ts": "1575395730.197400",
        "client_msg_id": "c73f9d24-c576-43a0-aa54-388a4ab8b8bf",
        "text": "There definitely is via the Betfair site, looking at Burnley v Man City for example; <https:\/\/www.betfair.com\/exchange\/plus\/football\/market\/1.165581488>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gad95b05e95e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cad95b05e95ed7575f487d75e10e36c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Chris Davidson",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "chris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "Betfair Exchange | Best Odds Online, Back and Lay Betting",
                "title_link": "https:\/\/www.betfair.com\/exchange\/plus\/football\/market\/1.165581488",
                "text": "The Betfair Exchange allows you the opportunity to back and lay bets and Cash Out. We also offer Casino, Poker, Games and Bingo.",
                "fallback": "Betfair Exchange | Best Odds Online, Back and Lay Betting",
                "from_url": "https:\/\/www.betfair.com\/exchange\/plus\/football\/market\/1.165581488",
                "service_icon": "http:\/\/ie1eds.cdnppb.net\/resources\/eds\/bundle\/images\/app\/common\/assets\/images\/favicon_4415_.ico",
                "service_name": "betfair.com",
                "id": 1,
                "original_url": "https:\/\/www.betfair.com\/exchange\/plus\/football\/market\/1.165581488"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b6X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There definitely is via the Betfair site, looking at Burnley v Man City for example; "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.betfair.com\/exchange\/plus\/football\/market\/1.165581488"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1575395781.197800",
        "client_msg_id": "fdded8af-fda7-4bc9-89cc-187b66d29591",
        "text": "What does your code look like?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j7kJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does your code look like?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPEU7URG",
        "type": "message",
        "ts": "1575395960.198800",
        "client_msg_id": "008fb95f-a0bb-45d1-beaa-26bd24e29c98",
        "text": "A mess :joy:  it's pretty much the demo code from the tutorials but putting the data into MySQL, it works fine for match odds, but doesn't pick up for the SHOWN_A_CARD market, here's the relevant section",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gad95b05e95e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cad95b05e95ed7575f487d75e10e36c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Chris Davidson",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "chris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xeWNu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A mess "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": "  it's pretty much the demo code from the tutorials but putting the data into MySQL, it works fine for match odds, but doesn't pick up for the SHOWN_A_CARD market, here's the relevant section"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPEU7URG",
        "type": "message",
        "ts": "1575395964.199100",
        "client_msg_id": "74c817e0-6b84-4ca4-8d1f-5ff381192d52",
        "text": "```db = database.cursor()\nmarket_id = db.execute(\"SELECT match_id FROM bfex_match_ids\")\nvalues_list = db.fetchall()\n\ndef grabber(market_id):\n  market_catalogues = trading.betting.list_market_catalogue(\n    filter=filters.market_filter(\n      market_ids=[market_id],\n  #    in_play_only='false',\n    ),\n    market_projection=['MARKET_START_TIME', 'RUNNER_DESCRIPTION', 'RUNNER_METADATA'],  # runner description required\n    max_results=1\n  )\n\n  for market_catalogue in market_catalogues:\n    market_books = trading.betting.list_market_book(\n      market_ids=[market_catalogue.market_id],\n      price_projection=filters.price_projection(\n      price_data=filters.price_data(\n        ex_best_offers=True\n        )\n      )\n    )\n\n  db = database.cursor()\n  sql_insert_query = \"\"\"UPDATE bfex_match_odds SET selection_odds=%s, selection_back_odds=%s WHERE unique_id=%s\"\"\"\n\n  for market_book in market_books:\n    for runner in market_book.runners:\n      try:\n        available_to_back = runner.ex.available_to_back[0].price\n        available_to_lay = runner.ex.available_to_lay[0].price\n        unique_id = str(runner.selection_id) + market_id\n        print(unique_id)\n        db.execute(sql_insert_query, (available_to_lay, available_to_back, unique_id))\n        print(available_to_lay, available_to_back, unique_id)\n      except Exception:\n        traceback.print_exc()\n        unique_id = str(runner.selection_id) + market_id\n        print(unique_id)\n        db.execute(sql_insert_query, (\"10000.0\", \"10000.0\", unique_id))\n        # print(\"uh-oh\")\n    database.commit()\n\ndef updater(values_list):\n  for bfid in values_list:\n    try:\n      grabber(bfid[0])\n    except:\n      print(\"Could not update:\")\n      print(bfid[0])\n      pass\n\nupdater(values_list)```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gad95b05e95e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cad95b05e95ed7575f487d75e10e36c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Chris Davidson",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "chris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JEfSR",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "db = database.cursor()\nmarket_id = db.execute(\"SELECT match_id FROM bfex_match_ids\")\nvalues_list = db.fetchall()\n\ndef grabber(market_id):\n  market_catalogues = trading.betting.list_market_catalogue(\n    filter=filters.market_filter(\n      market_ids=[market_id],\n  #    in_play_only='false',\n    ),\n    market_projection=['MARKET_START_TIME', 'RUNNER_DESCRIPTION', 'RUNNER_METADATA'],  # runner description required\n    max_results=1\n  )\n\n  for market_catalogue in market_catalogues:\n    market_books = trading.betting.list_market_book(\n      market_ids=[market_catalogue.market_id],\n      price_projection=filters.price_projection(\n      price_data=filters.price_data(\n        ex_best_offers=True\n        )\n      )\n    )\n\n  db = database.cursor()\n  sql_insert_query = \"\"\"UPDATE bfex_match_odds SET selection_odds=%s, selection_back_odds=%s WHERE unique_id=%s\"\"\"\n\n  for market_book in market_books:\n    for runner in market_book.runners:\n      try:\n        available_to_back = runner.ex.available_to_back[0].price\n        available_to_lay = runner.ex.available_to_lay[0].price\n        unique_id = str(runner.selection_id) + market_id\n        print(unique_id)\n        db.execute(sql_insert_query, (available_to_lay, available_to_back, unique_id))\n        print(available_to_lay, available_to_back, unique_id)\n      except Exception:\n        traceback.print_exc()\n        unique_id = str(runner.selection_id) + market_id\n        print(unique_id)\n        db.execute(sql_insert_query, (\"10000.0\", \"10000.0\", unique_id))\n        # print(\"uh-oh\")\n    database.commit()\n\ndef updater(values_list):\n  for bfid in values_list:\n    try:\n      grabber(bfid[0])\n    except:\n      print(\"Could not update:\")\n      print(bfid[0])\n      pass\n\nupdater(values_list)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPEU7URG",
        "type": "message",
        "ts": "1575396127.199400",
        "client_msg_id": "e092c118-57e8-484a-ba9e-a9229b42b437",
        "text": "And the error is",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gad95b05e95e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cad95b05e95ed7575f487d75e10e36c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Chris Davidson",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "chris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Mmby",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And the error is"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPEU7URG",
        "type": "message",
        "ts": "1575396128.199600",
        "client_msg_id": "e0719edc-8f1c-4795-a8a6-b2f0955291c4",
        "text": "```Traceback (most recent call last):\n  File \".\/bfex-grabber-3.py\", line 52, in grabber\n    available_to_lay = runner.ex.available_to_lay[0].price\nIndexError: list index out of range```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gad95b05e95e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cad95b05e95ed7575f487d75e10e36c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Chris Davidson",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "chris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "66L7p",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Traceback (most recent call last):\n  File \".\/bfex-grabber-3.py\", line 52, in grabber\n    available_to_lay = runner.ex.available_to_lay[0].price\nIndexError: list index out of range"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1575396231.200000",
        "client_msg_id": "bb74cc33-114a-44a3-8b10-9010afd743b5",
        "text": "Right, there are no lay prices for most selections in the example market you gave",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0NYcU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right, there are no lay prices for most selections in the example market you gave"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1575396284.200500",
        "client_msg_id": "4208EC33-1AD8-44D6-AAE4-813D434BEF0A",
        "text": "Is that from the AUS tutorial?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nb8+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is that from the AUS tutorial?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPEU7URG",
        "type": "message",
        "ts": "1575396353.201300",
        "client_msg_id": "0bdb3fd5-8884-4db5-b85e-94c843aa8935",
        "text": "<@UBS7QANF3> Ah of course, I'll adjust my try\/excepts to check the prices for back\/lay individually, used to if there is being a back generally being a lay, makes sense now",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gad95b05e95e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cad95b05e95ed7575f487d75e10e36c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Chris Davidson",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "chris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y24",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBS7QANF3"
                            },
                            {
                                "type": "text",
                                "text": " Ah of course, I'll adjust my try\/excepts to check the prices for back\/lay individually, used to if there is being a back generally being a lay, makes sense now"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPEU7URG",
        "type": "message",
        "ts": "1575396399.202000",
        "client_msg_id": "31bc55f9-793e-4c1f-874b-5f3495634ece",
        "text": "<@U4H19D1D2> No, I've adapted most of what I've got from here; <https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/> - not a python dev (or a coder at all, really, a sysadmin)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gad95b05e95e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cad95b05e95ed7575f487d75e10e36c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Chris Davidson",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "chris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "liampauling\/betfair",
                "title_link": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/",
                "text": "Lightweight python wrapper for Betfair API-NG (with streaming) - liampauling\/betfair",
                "fallback": "GitHub: liampauling\/betfair",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/12016537?s=400&v=4",
                "from_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/",
                "thumb_width": 392,
                "thumb_height": 392,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9D4rF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": " No, I've adapted most of what I've got from here; "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/"
                            },
                            {
                                "type": "text",
                                "text": " - not a python dev (or a coder at all, really, a sysadmin)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]