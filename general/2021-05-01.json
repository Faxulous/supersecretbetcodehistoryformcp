[
    {
        "user": "U019HMPCQT0",
        "type": "message",
        "ts": "1619855457.013100",
        "client_msg_id": "3753b66f-4e35-48d7-8cb6-3eb9a21f3862",
        "text": "Didn't know there was no transfer cost. Cheers for that.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3a944957ef0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3a944957ef00f52f3c23deff1914200e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "Taking Value",
            "display_name": "Taking Value",
            "team": "T4G9NBD2M",
            "name": "humbolt866",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619684061.477000",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W6hP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Didn't know there was no transfer cost. Cheers for that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0155J92A7Q",
        "type": "message",
        "ts": "1619869097.013400",
        "client_msg_id": "f592f5df-0d31-4df2-9c47-6a27c3a7fe0d",
        "text": "I have started to use <https:\/\/www.sportmonks.com\/> in case anyone finds it useful",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gde8c5d51af5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/de8c5d51af54a5ac7b501f416ddb262c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jorge",
            "display_name": "Jorge",
            "team": "T4G9NBD2M",
            "name": "jgarciam95",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619795163.012700",
        "parent_user_id": "U0155J92A7Q",
        "attachments": [
            {
                "service_name": "Sportmonks",
                "title": "Fast and Reliable Sports Data | SportMonks",
                "title_link": "https:\/\/www.sportmonks.com\/",
                "text": "Fast, reliable and cost-effective Sports Data solutions, including APIs, prediction modelling and data feeds, designed for global use.",
                "fallback": "Sportmonks: Fast and Reliable Sports Data | SportMonks",
                "from_url": "https:\/\/www.sportmonks.com\/",
                "service_icon": "https:\/\/www.sportmonks.com\/wp-content\/themes\/sportmonks\/assets\/favicon\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.sportmonks.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zmlW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have started to use "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.sportmonks.com\/"
                            },
                            {
                                "type": "text",
                                "text": " in case anyone finds it useful"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0155J92A7Q",
        "type": "message",
        "ts": "1619869179.013900",
        "client_msg_id": "27801e1d-8d6c-4697-956a-3f4eaa38aef5",
        "text": "Is there any function in flumine\/bflw that I can use to convert a streaming recorded file to a time series of \"best available to back\" and \"best available to lay\"?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gde8c5d51af5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/de8c5d51af54a5ac7b501f416ddb262c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jorge",
            "display_name": "Jorge",
            "team": "T4G9NBD2M",
            "name": "jgarciam95",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hG7Gj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there any function in flumine\/bflw that I can use to convert a streaming recorded file to a time series of \"best available to back\" and \"best available to lay\"?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1619869188.014200",
        "client_msg_id": "D93C5D7F-619C-4B74-AE42-E2B490203962",
        "text": "Like the example? <https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/strategies\/pricerecorder.py|https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/strategies\/pricerecorder.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[liampauling\/flumine] examples\/strategies\/pricerecorder.py",
                "text": "```\nimport os\nimport csv\n\nfrom flumine import BaseStrategy\nfrom flumine.utils import get_price\n\nHEADERS = [\n    \"market_id\",\n    \"publish_time\",\n    \"status\",\n    \"inplay\",\n    \"selection_id\",\n    \"last_price_traded\",\n    \"back\",\n    \"lay\",\n]\n\n\nclass PriceRecorder(BaseStrategy):\n    \"\"\"\n    Example strategy for recording prices\n    from historical or live data.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        BaseStrategy.__init__(self, *args, **kwargs)\n        self.local_dir = self.context.get(\"local_dir\", \"\/tmp\")\n        self.filename = self.context.get(\"filename\", \"output.txt\")\n        self.file_directory = os.path.join(self.local_dir, self.filename)\n\n    def add(self) -&gt; None:\n        # check local dir\n        if not os.path.isdir(self.local_dir):\n            raise OSError(\"File dir %s does not exist\" % self.local_dir)\n        # write headers\n        with open(self.file_directory, \"w\") as f:\n            writer = csv.DictWriter(f, fieldnames=HEADERS)\n            writer.writeheader()\n\n    def check_market_book(self, market, market_book):\n        return True\n\n    def process_market_book(self, market, market_book):\n        with open(self.file_directory, \"a\") as f:\n            writer = csv.DictWriter(f, fieldnames=HEADERS)\n            for runner in market_book.runners:\n                writer.writerow(\n                    {\n                        \"market_id\": market_book.market_id,\n                        \"publish_time\": market_book.publish_time,\n                        \"status\": market_book.status,\n                        \"inplay\": market_book.inplay,\n                        \"selection_id\": runner.selection_id,\n                        \"last_price_traded\": runner.last_price_traded,\n                        \"back\": get_price(runner.ex.available_to_back, 0),\n                        \"lay\": get_price(runner.ex.available_to_lay, 0),\n                    }\n                )\n\n```",
                "title": "examples\/strategies\/pricerecorder.py",
                "footer": "<https:\/\/github.com\/liampauling\/flumine|liampauling\/flumine>",
                "id": 1,
                "title_link": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/strategies\/pricerecorder.py",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/strategies\/pricerecorder.py",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5IXCI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like the example? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/strategies\/pricerecorder.py",
                                "text": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/strategies\/pricerecorder.py"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1619869387.015100",
        "client_msg_id": "6323897C-3B46-4D47-82BB-2CD58B8DB162",
        "text": "<@UBS7QANF3> shared something in pandas recently ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xKvF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBS7QANF3"
                            },
                            {
                                "type": "text",
                                "text": " shared something in pandas recently "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1619869451.015400",
        "text": "",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[April 5th, 2021 9:34 AM] maurice: ```def market_book_to_data_frame(market_book: Union[MarketBook, dict]) -&gt; pd.DataFrame:\n    if type(market_book) is MarketBook:\n        market_book = market_book._data\n\n    return pd.DataFrame(\n        {\n            'market_id': market_book['marketId'],\n            'inplay': market_book['inplay'],\n            'selection_id': runner['selectionId'],\n            'side': side,\n            'depth': depth,\n            'price': price_size['price'],\n            'size': price_size['size'],\n            **({'publish_time': market_book['publishTime']} if 'publishTime' in market_book else {})\n        }\n        for runner in market_book['runners']\n        for side in ['Back', 'Lay']\n        for depth, price_size in enumerate(runner.get('ex', {}).get(f'availableTo{side}', []))\n    )```",
                "ts": "1617611657.129000",
                "author_id": "UBS7QANF3",
                "author_subname": "Maurice Berk",
                "channel_id": "C4HL6EZTQ",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "```def market_book_to_data_frame(market_book: Union[MarketBook, dict]) -&gt; pd.DataFrame:\n    if type(market_book) is MarketBook:\n        market_book = market_book._data\n\n    return pd.DataFrame(\n        {\n            'market_id': market_book['marketId'],\n            'inplay': market_book['inplay'],\n            'selection_id': runner['selectionId'],\n            'side': side,\n            'depth': depth,\n            'price': price_size['price'],\n            'size': price_size['size'],\n            **({'publish_time': market_book['publishTime']} if 'publishTime' in market_book else {})\n        }\n        for runner in market_book['runners']\n        for side in ['Back', 'Lay']\n        for depth, price_size in enumerate(runner.get('ex', {}).get(f'availableTo{side}', []))\n    )```",
                "author_name": "Maurice Berk",
                "author_link": "https:\/\/betfairlightweight.slack.com\/team\/UBS7QANF3",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/betfairlightweight.slack.com\/archives\/C4HL6EZTQ\/p1617611657129000?thread_ts=1617611657129000&cid=C4HL6EZTQ",
                "is_share": true,
                "footer": "Thread in Slack conversation"
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0155J92A7Q"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0155J92A7Q",
        "type": "message",
        "ts": "1619869531.016100",
        "client_msg_id": "79acd976-2285-474d-b75d-4b1a22c389ab",
        "text": "My issue is how to convert a recorded file into MarketBook objects",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gde8c5d51af5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/de8c5d51af54a5ac7b501f416ddb262c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jorge",
            "display_name": "Jorge",
            "team": "T4G9NBD2M",
            "name": "jgarciam95",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9feEG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My issue is how to convert a recorded file into MarketBook objects"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1619869674.016700",
        "client_msg_id": "C35C7E7C-E578-4D7B-9178-CCE899A3E5CB",
        "text": "Flumine does it out the box or use bflw low level gen as <https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py|per> ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[liampauling\/betfair] examples\/examplestreaminghistorical.py",
                "text": "```\nimport logging\n\nimport betfairlightweight\nfrom betfairlightweight import StreamListener\n\n\"\"\"\nData needs to be downloaded from:\n    <https:\/\/historicdata.betfair.com>\n\"\"\"\n\n# setup logging\nlogging.basicConfig(level=<http:\/\/logging.INFO|logging.INFO>)\n\n# create trading instance (don't need username\/password)\ntrading = betfairlightweight.APIClient(\"username\", \"password\")\n\n# create listener\nlistener = StreamListener(max_latency=None)\n\n# create historical stream (update file_path to your file location)\nstream = trading.streaming.create_historical_generator_stream(\n    file_path=\"\/tmp\/BASIC-1.132153978\",\n    listener=listener,\n)\n\n# create generator\ngen = stream.get_generator()\n\n# print marketBooks\nfor market_books in gen():\n    for market_book in market_books:\n        print(market_book)\n\n# print based on seconds to start\nfor market_books in gen():\n    for market_book in market_books:\n        seconds_to_start = (\n            market_book.market_definition.market_time - market_book.publish_time\n        ).total_seconds()\n        if seconds_to_start &lt; 100:\n            print(market_book.market_id, seconds_to_start, market_book.total_matched)\n\n        # print winner details once market is closed\n        if market_book.status == \"CLOSED\":\n            for runner in market_book.runners:\n                if runner.status == \"WINNER\":\n                    print(\n                        \"{0}: {1} with sp of {2}\".format(\n                            runner.status, runner.selection_id, runner.sp.actual_sp\n                        )\n                    )\n\n# record prices to a file\nwith open(\"output.txt\", \"w\") as output:\n    output.write(\"Time,MarketId,Status,Inplay,SelectionId,LastPriceTraded\\n\")\n\nfor market_books in gen():\n    for market_book in market_books:\n        with open(\"output.txt\", \"a\") as output:\n            for runner in market_book.runners:\n                # how to get runner details from the market definition\n                market_def = market_book.market_definition\n                runners_dict = {\n                    (runner.selection_id, runner.handicap): runner\n                    for runner in market_def.runners\n                }\n                runner_def = runners_dict.get((runner.selection_id, runner.handicap))\n\n                output.write(\n                    \"%s,%s,%s,%s,%s,%s\\n\"\n                    % (\n                        market_book.publish_time,\n                        market_book.market_id,\n                        market_book.status,\n                        market_book.inplay,\n                        runner.selection_id,\n                        runner.last_price_traded or \"\",\n                    )\n                )\n\n```",
                "title": "examples\/examplestreaminghistorical.py",
                "footer": "<https:\/\/github.com\/liampauling\/betfair|liampauling\/betfair>",
                "id": 1,
                "title_link": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7P1A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Flumine does it out the box or use bflw low level gen as "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py",
                                "text": "per"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0155J92A7Q",
        "type": "message",
        "ts": "1619869794.017100",
        "client_msg_id": "aa63d7d9-b1c7-41ff-a9e5-59f697e41fb3",
        "text": "This example is great! Exactly what I need thanks!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gde8c5d51af5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/de8c5d51af54a5ac7b501f416ddb262c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jorge",
            "display_name": "Jorge",
            "team": "T4G9NBD2M",
            "name": "jgarciam95",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Q8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This example is great! Exactly what I need thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]