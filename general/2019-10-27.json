[
    {
        "subtype": "channel_join",
        "user": "UPCNDMPSN",
        "text": "<@UPCNDMPSN> has joined the channel",
        "type": "message",
        "ts": "1572172818.029300"
    },
    {
        "user": "UJAGSTWNL",
        "type": "message",
        "ts": "1572198275.035400",
        "edited": {
            "user": "UJAGSTWNL",
            "ts": "1572198329.000000"
        },
        "client_msg_id": "a247534d-35c4-4c19-b001-67f78de44c2a",
        "text": "Can anybody give me a nudge in the right direction to good ways of dealing with socket.timeout \/ socket.errors.\nexcuse If this is simple, but Is there anyway of catching that specific exception and restarting the stream from my main program?\nI have tried changing the betfairstrem.py section that throws the exception..\n`while self._running and part[-2:] != crlf_bytes:`\n`            try:`\n`                part = self._socket.recv(self.buffer_size)`\n`            except (socket.timeout, socket.error) as e:`\n`                if self._running:`\n`                    self.stop()`\n`                    print('STOP1')`\n`                    time.sleep(5)`\n`                    self.start()`\n`                    # raise SocketError('[Connect: %s]: Socket %s' % (self._unique_id, e))`\n`                else:`\n`                    return  # 133, prevents error if stop is called mid recv`\nbut this is erroneous and creating a horrible subscription loop.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g611556e7945",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2611556e7945b45da74853db872c6a1d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "ash",
            "display_name": "ash",
            "team": "T4G9NBD2M",
            "name": "ashreid20",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4iBz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can anybody give me a nudge in the right direction to good ways of dealing with socket.timeout \/ socket.errors.\nexcuse If this is simple, but Is there anyway of catching that specific exception and restarting the stream from my main program?\nI have tried changing the betfairstrem.py section that throws the exception..\n"
                            },
                            {
                                "type": "text",
                                "text": "while self._running and part[-2:] != crlf_bytes:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            try:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                part = self._socket.recv(self.buffer_size)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            except (socket.timeout, socket.error) as e:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                if self._running:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    self.stop()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    print('STOP1')",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    time.sleep(5)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    self.start()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    # raise SocketError('[Connect: %s]: Socket %s' % (self._unique_id, e))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                else:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    return  # 133, prevents error if stop is called mid recv",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nbut this is erroneous and creating a horrible subscription loop."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1572198313.035800",
        "client_msg_id": "F1788F57-033D-46FF-B881-6D086069F30C",
        "text": "Don’t change anything I there ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nfjEd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Don’t change anything I there"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJAGSTWNL",
        "type": "message",
        "ts": "1572198415.036600",
        "client_msg_id": "c3b2c088-3131-46b9-81c2-2ab3929de2d1",
        "text": "ha, that is definitive. understood.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g611556e7945",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2611556e7945b45da74853db872c6a1d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "ash",
            "display_name": "ash",
            "team": "T4G9NBD2M",
            "name": "ashreid20",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eaYZw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ha, that is definitive. understood."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1572198434.037200",
        "client_msg_id": "9BA4B1D3-C4B5-45BE-A43A-5C5A0C708F2A",
        "text": "Wrap start in a try except, catch BetfairError and a normal Exception ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CvHjI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wrap start in a try except, catch BetfairError and a normal Exception"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1572198470.038000",
        "client_msg_id": "EF4C61D5-57B8-4CF6-9EA5-D7352EC51846",
        "text": "I then use tenacity for retry, you can then resubscribe or just start it back up ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "trn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I then use tenacity for retry, you can then resubscribe or just start it back up"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1572198491.038400",
        "client_msg_id": "9EB3A346-E2F4-4657-8F79-8A1723987503",
        "text": "<https:\/\/github.com\/liampauling\/flumine\/blob\/master\/flumine\/flumine.py#L81>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "liampauling\/flumine",
                "title_link": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/flumine\/flumine.py#L81",
                "text": "flūmine - Betfair data record framework utilising streaming to create a simple data recorder - liampauling\/flumine",
                "fallback": "GitHub: liampauling\/flumine",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/12016537?s=400&v=4",
                "from_url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/flumine\/flumine.py#L81",
                "thumb_width": 392,
                "thumb_height": 392,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/flumine\/flumine.py#L81"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DTg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/flumine\/flumine.py#L81"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJAGSTWNL",
        "type": "message",
        "ts": "1572198758.040200",
        "client_msg_id": "baddf5d8-eb1c-4a67-861a-0338ff930ed1",
        "text": "ahhh ok I had been trying to catch it on the ‘read’ side, testing the output_queue.get().. which didn’t work at all of course.   thankyou",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g611556e7945",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2611556e7945b45da74853db872c6a1d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "ash",
            "display_name": "ash",
            "team": "T4G9NBD2M",
            "name": "ashreid20",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cz1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ahhh ok I had been trying to catch it on the ‘read’ side, testing the output_queue.get().. which didn’t work at all of course.   thankyou"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "UPX44G1C6",
        "text": "<@UPX44G1C6> has joined the channel",
        "type": "message",
        "ts": "1572202948.040400"
    }
]