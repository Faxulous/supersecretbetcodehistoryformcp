[
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1590909751.193600",
        "client_msg_id": "22b2a635-173e-46d6-bce6-2312a1a8908b",
        "text": "If I understand you are after the number for responding to an update which I think should be as close to 0 as possible",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=oW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If I understand you are after the number for responding to an update which I think should be as close to 0 as possible"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013KB5R3T8",
        "type": "message",
        "ts": "1590993200.200900",
        "client_msg_id": "f40b2817-8a08-410e-b57a-46a34130152b",
        "text": "Mo and liam, thanks a ton for the help last week, I super appreciate the package and you guys keeping an active community here! I haven't bought an active key yet, so when I run my modified version of the streaming example, I just get an update from the while loop market_books = output_queue.get() every 180 seconds. For now, I just put some loops underneath that to grab the data that I want from the market books and save it as a csv, but this feels like it can't be the right approach once I have a live key, since I would be copying a bunch of unchanged data constantly. I'm guessing that the way the data stream comes in is that it only sends updates to things that have changed, like the json lines in the historical data? Is there an example that would help me see how to record the stream in a smart way? And thanks in advance for your patience, I suspect that for a more experienced programmer this might be a trivial question to figure out.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g1886eb1420c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1886eb1420c6a6756bad7f0c2c3a7124.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Will Morrison",
            "display_name": "Will Morrison",
            "team": "T4G9NBD2M",
            "name": "wam32008",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IsaI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mo and liam, thanks a ton for the help last week, I super appreciate the package and you guys keeping an active community here! I haven't bought an active key yet, so when I run my modified version of the streaming example, I just get an update from the while loop market_books = output_queue.get() every 180 seconds. For now, I just put some loops underneath that to grab the data that I want from the market books and save it as a csv, but this feels like it can't be the right approach once I have a live key, since I would be copying a bunch of unchanged data constantly. I'm guessing that the way the data stream comes in is that it only sends updates to things that have changed, like the json lines in the historical data? Is there an example that would help me see how to record the stream in a smart way? And thanks in advance for your patience, I suspect that for a more experienced programmer this might be a trivial question to figure out."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1590993252.201300",
        "client_msg_id": "51c7e27f-b191-4659-a2f3-afbba011ea23",
        "text": "Send me a message with you live appKey and I will get it authorised",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a2Idp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Send me a message with you live appKey and I will get it authorised"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1590993296.201800",
        "client_msg_id": "cf74a55f-c7fe-4ad6-bf45-76a2878a86af",
        "text": "Have you had a look at flumine? It does want you want in regards to recording streaming data <https:\/\/github.com\/liampauling\/flumine>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "liampauling\/flumine",
                "text": "flÅ«mine - Betfair trading framework",
                "title": "liampauling\/flumine",
                "footer": "<https:\/\/github.com\/liampauling\/flumine|liampauling\/flumine>",
                "id": 1,
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1479407630,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "18",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "Python",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/flumine",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5\/sz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you had a look at flumine? It does want you want in regards to recording streaming data "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/flumine"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBS7QANF3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013KB5R3T8",
        "type": "message",
        "ts": "1590993946.202800",
        "client_msg_id": "ef24aafb-6737-4627-9adc-7b8f8f3601d2",
        "text": "Perfect, I saw it mentioned before but wasn't sure what it was for. I'll give it a spin today!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g1886eb1420c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1886eb1420c6a6756bad7f0c2c3a7124.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Will Morrison",
            "display_name": "Will Morrison",
            "team": "T4G9NBD2M",
            "name": "wam32008",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9zyng",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perfect, I saw it mentioned before but wasn't sure what it was for. I'll give it a spin today!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]