[
    {
        "user": "U05ULP711T7",
        "type": "message",
        "ts": "1731840025.510589",
        "client_msg_id": "8c5cfb4e-8320-477c-a581-ec06a84447af",
        "text": "Hi, can someone please explain this with flumine?  With the examples, I see the strategies are added, then the framework is run.  Can the framework be run in it's own thread, and then strategies added to it, and if so, could someone please offer a sample code?  Right now I initialize like so:\n```trading = betfairlightweight.APIClient(my_username, my_password, app_key=my_app_key, certs=certs_path)\nclient = clients.BetfairClient(trading, interactive_login=True)\nframework = Flumine(client=client)\nframework_thread = threading.Thread(target=run_framework)\nframework_thread.start()```\nThe framework is now running in it's own thread, and I would like to run a strategy to print the X next upcoming horse races.  Can this be done or is it better to use betfairlightweight?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "d497960b3b10",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-01\/5975712394658_d497960b3b10368d9f9f_72.png",
            "first_name": "Nita",
            "real_name": "Nita Suos",
            "display_name": "Nita Suos",
            "team": "T4G9NBD2M",
            "name": "1.nitasuos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731840025.510589",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1731840163.948709",
        "reply_users": [
            "UBS7QANF3"
        ],
        "replies": [
            {
                "user": "UBS7QANF3",
                "ts": "1731840163.948709"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2dvOd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, can someone please explain this with flumine?  With the examples, I see the strategies are added, then the framework is run.  Can the framework be run in it's own thread, and then strategies added to it, and if so, could someone please offer a sample code?  Right now I initialize like so:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "trading = betfairlightweight.APIClient(my_username, my_password, app_key=my_app_key, certs=certs_path)\nclient = clients.BetfairClient(trading, interactive_login=True)\nframework = Flumine(client=client)\nframework_thread = threading.Thread(target=run_framework)\nframework_thread.start()"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The framework is now running in it's own thread, and I would like to run a strategy to print the X next upcoming horse races.  Can this be done or is it better to use betfairlightweight?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1731840163.948709",
        "client_msg_id": "15deba30-3d53-4a0c-bf9c-e3122569c3b2",
        "text": "If literally all you want to do is print the upcoming horse races then use `betfairlightweight`. If that's just a first step to developing a full blown strategy then ultimately that strategy will need to be implemented in `flumine` rather than `betfairlightweight`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731840025.510589",
        "parent_user_id": "U05ULP711T7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j4yll",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If literally all you want to do is print the upcoming horse races then use "
                            },
                            {
                                "type": "text",
                                "text": "betfairlightweight",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". If that's just a first step to developing a full blown strategy then ultimately that strategy will need to be implemented in "
                            },
                            {
                                "type": "text",
                                "text": "flumine",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rather than "
                            },
                            {
                                "type": "text",
                                "text": "betfairlightweight",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05ULP711T7",
        "type": "message",
        "ts": "1731840445.173659",
        "client_msg_id": "2ee7b782-d74f-4a22-b73e-f6727d5742cf",
        "text": "Thanks Mo.  With adding strategies to Flumine (imagine having a number of different ones being selectable within a gui), would the framework be run, and add strategies\/remove strategies from the framework?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "d497960b3b10",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-01\/5975712394658_d497960b3b10368d9f9f_72.png",
            "first_name": "Nita",
            "real_name": "Nita Suos",
            "display_name": "Nita Suos",
            "team": "T4G9NBD2M",
            "name": "1.nitasuos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731840445.173659",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1731840746.443229",
        "reply_users": [
            "UBS7QANF3"
        ],
        "replies": [
            {
                "user": "UBS7QANF3",
                "ts": "1731840746.443229"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/lMaN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Mo.  With adding strategies to Flumine (imagine having a number of different ones being selectable within a gui), would the framework be run, and add strategies\/remove strategies from the framework?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1731840746.443229",
        "client_msg_id": "24edff07-f7fc-497f-a0e0-ec5867a2a275",
        "text": "You would need to add them all at the start before calling `run`. If you want to dynamically enable or disable them then you could always control this via boolean flags in the strategy that are checked in, for example, `check_market_book`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731840445.173659",
        "parent_user_id": "U05ULP711T7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1rU\/m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You would need to add them all at the start before calling "
                            },
                            {
                                "type": "text",
                                "text": "run",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". If you want to dynamically enable or disable them then you could always control this via boolean flags in the strategy that are checked in, for example, "
                            },
                            {
                                "type": "text",
                                "text": "check_market_book",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05ULP711T7",
        "type": "message",
        "ts": "1731841189.112399",
        "client_msg_id": "206615b0-2592-44db-9f28-d1727c547392",
        "text": "Thanks",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "d497960b3b10",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-01\/5975712394658_d497960b3b10368d9f9f_72.png",
            "first_name": "Nita",
            "real_name": "Nita Suos",
            "display_name": "Nita Suos",
            "team": "T4G9NBD2M",
            "name": "1.nitasuos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AjPto",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUE6E1LA1",
        "type": "message",
        "ts": "1731845296.912779",
        "client_msg_id": "75f31174-b135-4374-b0bc-f8fa214fdc11",
        "text": "Sorry, I've just realised that I was looking at my bets in the LAST race which by some bizarre conincidence WAS a dead heat. I'd clearly read your post as referring to the last race.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gf53cae45edd",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f53cae45edd7f7b67bbe98819597612e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "D C",
            "display_name": "D C",
            "team": "T4G9NBD2M",
            "name": "oddsvantage",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731790409.084119",
        "parent_user_id": "U03QLPZQBLM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ufeET",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry, I've just realised that I was looking at my bets in the LAST race which by some bizarre conincidence WAS a dead heat. I'd clearly read your post as referring to the last race."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQL0QDEKA",
        "type": "message",
        "ts": "1731846459.966289",
        "client_msg_id": "5cf1996b-877d-4677-ae7a-06ffd71fe312",
        "text": "I thought there was another dead heat...one seemed to take almost 30 mins to settle as i recall...",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g444d10128c0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/444d10128c0aaf094041a52a76796602.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Peter",
            "real_name": "Peter Lenagh",
            "display_name": "PeterLe",
            "team": "T4G9NBD2M",
            "name": "lenagh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731790409.084119",
        "parent_user_id": "U03QLPZQBLM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wWWib",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I thought there was another dead heat...one seemed to take almost 30 mins to settle as i recall..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03QLPZQBLM",
        "type": "message",
        "ts": "1731869527.183999",
        "client_msg_id": "044b5270-2aac-4673-b283-a1af12afaf84",
        "text": "There was two back to back dead heats!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gee4caf4e81f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ee4caf4e81ff96058a7d4a3efdf1a260.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Johnny",
            "real_name": "Johnny Boston",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "mike.breen.bbb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731790409.084119",
        "parent_user_id": "U03QLPZQBLM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AeLvs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There was two back to back dead heats!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05ULP711T7",
        "type": "message",
        "ts": "1731886120.746229",
        "client_msg_id": "a3dd6607-61c3-49c5-a273-a53469a7bea8",
        "text": "Can I please clarify this: so if I add a strategy or strategies to the framework and run the framework, at this point it is not possible to add any more strategies, workers etc and for those strategies added they can't be removed unless I shutdown and restart the application, use flags, or is there a solution to this that others use. Thanks.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "d497960b3b10",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-01\/5975712394658_d497960b3b10368d9f9f_72.png",
            "first_name": "Nita",
            "real_name": "Nita Suos",
            "display_name": "Nita Suos",
            "team": "T4G9NBD2M",
            "name": "1.nitasuos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JIit2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can I please clarify this: so if I add a strategy or strategies to the framework and run the framework, at this point it is not possible to add any more strategies, workers etc and for those strategies added they can't be removed unless I shutdown and restart the application, use flags, or is there a solution to this that others use. Thanks."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05ULP711T7",
        "type": "message",
        "ts": "1731910500.261239",
        "client_msg_id": "1d342700-4dc8-419e-a423-3b8ea6504d7a",
        "text": "I am using betfairlightweight streaming for events using market_id and event_id, Can someone tell me how to retrieve the LTP and Volumes for each runner through the stream?  They are always None with the below code.  thanks\n```def stream_data():\n    global trading\n\n    # Create queue and listener\n    output_queue = queue.Queue()\n    listener = betfairlightweight.StreamListener(output_queue=output_queue)\n    stream = trading.streaming.create_stream(listener=listener)\n    current_event_ids = []\n    current_market_ids = []\n    market_id_to_name = {} \n    runner_name_cache = {}  \n\n    while True:\n        event_ids = gd.Betfair.focusEventId\n        market_ids = gd.Betfair.focusMarketId\n\n        # Skip processing if IDs are invalid or None\n        if not event_ids or not market_ids:\n            continue\n\n        if not isinstance(event_ids, list):\n            event_ids = [event_ids]\n        if not isinstance(market_ids, list):\n            market_ids = [market_ids]\n        if set(event_ids) != set(current_event_ids) or set(market_ids) != set(current_market_ids):\n            current_event_ids = event_ids\n            current_market_ids = market_ids\n            stream.stop()\n            market_catalogue = trading.betting.list_market_catalogue(\n                filter=filters.market_filter(\n                    event_ids=[gd.Betfair.focusEventId],\n                    market_ids=[gd.Betfair.focusMarketId]\n                ),\n                market_projection=[\n                    \"MARKET_START_TIME\",\n                    \"RUNNER_DESCRIPTION\",\n                ],\n                max_results=20, lightweight=True,\n            )\n            print(\"PP\")\n            print(market_catalogue)\n            for market in market_catalogue:\n                market_id = market[\"marketId\"]\n                runner_name_cache[market_id] = {\n                    runner[\"selectionId\"]: runner[\"runnerName\"]\n                    for runner in market[\"runners\"]\n                }\n            market_id_to_name = {\n                market[\"marketId\"]: market[\"marketName\"]\n                for market in market_catalogue\n            }\n            market_filter = streaming_market_filter(\n                event_ids=current_event_ids,\n                market_ids=current_market_ids,\n            )\n            market_data_filter = streaming_market_data_filter(\n                fields=[\"EX_BEST_OFFERS\", \"EX_MARKET_DEF\"],\n                ladder_levels=10\n            )\n            stream.subscribe_to_markets(\n                market_filter=market_filter,\n                market_data_filter=market_data_filter,\n                conflate_ms=1000,\n            )\n            threading.Thread(target=stream.start, daemon=True).start()\n\n\n        while not output_queue.empty():\n\n            market_books = output_queue.get()\n            for market_book in market_books:\n\n                print(vars(market_book))\n                print(\"-\" * 50)  \n                market_data = {\n                    \"marketId1\": market_book.market_id,\n                    \"marketName\": market_id_to_name.get(market_book.market_id, \"Unknown Market\"),  # Add marketName\n                    \"isMarketDataDelayed\": market_book.is_market_data_delayed,\n                    \"status\": market_book.status,\n                    \"betDelay\": market_book.bet_delay,\n                    \"bspReconciled\": market_book.bsp_reconciled,\n                    \"complete\": market_book.complete,\n                    \"inplay\": market_book.inplay,\n                    \"numberOfWinners\": market_book.number_of_winners,\n                    \"numberOfRunners\": market_book.number_of_runners,\n                    \"numberOfActiveRunners\": market_book.number_of_active_runners,\n                    \"lastMatchTime\": market_book.last_match_time,\n                    \"totalMatched\": market_book.total_matched,\n                    \"totalAvailable\": market_book.total_available,\n                    \"crossMatching\": market_book.cross_matching,\n                    \"runnersVoidable\": market_book.runners_voidable,\n                    \"version\": market_book.version,\n                    \"runners\": []\n                }\n\n                for runner in market_book.runners:\n                    print(vars(runner))\n                    print(\"-\" * 50)\n                runner_data = {\n                        \"selectionId\": runner.selection_id,\n                        \"runnerName\": runner_name_cache.get(market_book.market_id, {}).get(runner.selection_id,\n                                                                                           \"Unknown Runner\"),\n\n                        \"lastPriceTraded\": runner.last_price_traded,\n                        \"totalMatched\": runner.total_matched,\n                        \"ex\": {\n                            \"availableToBack\": runner.ex.available_to_back,\n                            \"availableToLay\": runner.ex.available_to_lay\n                        },\n                        \"tradedVolume\": runner.ex.traded_volume\n                    }\n                    market_data[\"runners\"].append(runner_data)\n                gd.Betfair.EventMarketCatalogue1 = [market_data]```\n",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "d497960b3b10",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-01\/5975712394658_d497960b3b10368d9f9f_72.png",
            "first_name": "Nita",
            "real_name": "Nita Suos",
            "display_name": "Nita Suos",
            "team": "T4G9NBD2M",
            "name": "1.nitasuos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731910500.261239",
        "reply_count": 6,
        "reply_users_count": 2,
        "latest_reply": "1731931131.852719",
        "reply_users": [
            "UBS7QANF3",
            "U05ULP711T7"
        ],
        "replies": [
            {
                "user": "UBS7QANF3",
                "ts": "1731915404.489819"
            },
            {
                "user": "U05ULP711T7",
                "ts": "1731929653.058019"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1731929718.477949"
            },
            {
                "user": "U05ULP711T7",
                "ts": "1731929944.788939"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1731929975.169339"
            },
            {
                "user": "U05ULP711T7",
                "ts": "1731931131.852719"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nRmMP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am using betfairlightweight streaming for events using market_id and event_id, Can someone tell me how to retrieve the LTP and Volumes for each runner through the stream?  They are always None with the below code.  thanks\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "def stream_data():\n    global trading\n\n    # Create queue and listener\n    output_queue = queue.Queue()\n    listener = betfairlightweight.StreamListener(output_queue=output_queue)\n    stream = trading.streaming.create_stream(listener=listener)\n    current_event_ids = []\n    current_market_ids = []\n    market_id_to_name = {} \n    runner_name_cache = {}  \n\n    while True:\n        event_ids = gd.Betfair.focusEventId\n        market_ids = gd.Betfair.focusMarketId\n\n        # Skip processing if IDs are invalid or None\n        if not event_ids or not market_ids:\n            continue\n\n        if not isinstance(event_ids, list):\n            event_ids = [event_ids]\n        if not isinstance(market_ids, list):\n            market_ids = [market_ids]\n        if set(event_ids) != set(current_event_ids) or set(market_ids) != set(current_market_ids):\n            current_event_ids = event_ids\n            current_market_ids = market_ids\n            stream.stop()\n            market_catalogue = trading.betting.list_market_catalogue(\n                filter=filters.market_filter(\n                    event_ids=[gd.Betfair.focusEventId],\n                    market_ids=[gd.Betfair.focusMarketId]\n                ),\n                market_projection=[\n                    \"MARKET_START_TIME\",\n                    \"RUNNER_DESCRIPTION\",\n                ],\n                max_results=20, lightweight=True,\n            )\n            print(\"PP\")\n            print(market_catalogue)\n            for market in market_catalogue:\n                market_id = market[\"marketId\"]\n                runner_name_cache[market_id] = {\n                    runner[\"selectionId\"]: runner[\"runnerName\"]\n                    for runner in market[\"runners\"]\n                }\n            market_id_to_name = {\n                market[\"marketId\"]: market[\"marketName\"]\n                for market in market_catalogue\n            }\n            market_filter = streaming_market_filter(\n                event_ids=current_event_ids,\n                market_ids=current_market_ids,\n            )\n            market_data_filter = streaming_market_data_filter(\n                fields=[\"EX_BEST_OFFERS\", \"EX_MARKET_DEF\"],\n                ladder_levels=10\n            )\n            stream.subscribe_to_markets(\n                market_filter=market_filter,\n                market_data_filter=market_data_filter,\n                conflate_ms=1000,\n            )\n            threading.Thread(target=stream.start, daemon=True).start()\n\n\n        while not output_queue.empty():\n\n            market_books = output_queue.get()\n            for market_book in market_books:\n\n                print(vars(market_book))\n                print(\"-\" * 50)  \n                market_data = {\n                    \"marketId1\": market_book.market_id,\n                    \"marketName\": market_id_to_name.get(market_book.market_id, \"Unknown Market\"),  # Add marketName\n                    \"isMarketDataDelayed\": market_book.is_market_data_delayed,\n                    \"status\": market_book.status,\n                    \"betDelay\": market_book.bet_delay,\n                    \"bspReconciled\": market_book.bsp_reconciled,\n                    \"complete\": market_book.complete,\n                    \"inplay\": market_book.inplay,\n                    \"numberOfWinners\": market_book.number_of_winners,\n                    \"numberOfRunners\": market_book.number_of_runners,\n                    \"numberOfActiveRunners\": market_book.number_of_active_runners,\n                    \"lastMatchTime\": market_book.last_match_time,\n                    \"totalMatched\": market_book.total_matched,\n                    \"totalAvailable\": market_book.total_available,\n                    \"crossMatching\": market_book.cross_matching,\n                    \"runnersVoidable\": market_book.runners_voidable,\n                    \"version\": market_book.version,\n                    \"runners\": []\n                }\n\n                for runner in market_book.runners:\n                    print(vars(runner))\n                    print(\"-\" * 50)\n                runner_data = {\n                        \"selectionId\": runner.selection_id,\n                        \"runnerName\": runner_name_cache.get(market_book.market_id, {}).get(runner.selection_id,\n                                                                                           \"Unknown Runner\"),\n\n                        \"lastPriceTraded\": runner.last_price_traded,\n                        \"totalMatched\": runner.total_matched,\n                        \"ex\": {\n                            \"availableToBack\": runner.ex.available_to_back,\n                            \"availableToLay\": runner.ex.available_to_lay\n                        },\n                        \"tradedVolume\": runner.ex.traded_volume\n                    }\n                    market_data[\"runners\"].append(runner_data)\n                gd.Betfair.EventMarketCatalogue1 = [market_data]"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1731915404.489819",
        "edited": {
            "user": "UBS7QANF3",
            "ts": "1731915418.000000"
        },
        "client_msg_id": "fbfddce8-61d3-4c01-b8be-645d20fc0b62",
        "text": "They are `None` because you haven't requested them:\n\n```market_data_filter = streaming_market_data_filter(\n    fields=[\"EX_BEST_OFFERS\", \"EX_MARKET_DEF\"],\n    ladder_levels=10\n)```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731910500.261239",
        "parent_user_id": "U05ULP711T7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M9Epo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They are "
                            },
                            {
                                "type": "text",
                                "text": "None",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " because you haven't requested them:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "market_data_filter = streaming_market_data_filter(\n    fields=[\"EX_BEST_OFFERS\", \"EX_MARKET_DEF\"],\n    ladder_levels=10\n)"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    }
]