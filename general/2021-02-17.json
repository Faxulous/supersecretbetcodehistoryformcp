[
    {
        "user": "U01C12ZEADQ",
        "type": "message",
        "ts": "1613550019.003200",
        "client_msg_id": "4d55c65d-131f-43c3-867b-ec638c0e15f1",
        "text": "Yep, do it all the time",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "e3b7687b0ef8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-06\/1432945617648_e3b7687b0ef86e4f28b8_72.png",
            "first_name": "Alessio",
            "real_name": "Alessio",
            "display_name": "Alessio",
            "team": "T4G9NBD2M",
            "name": "alessio",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z6w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep, do it all the time"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01C12ZEADQ",
        "type": "message",
        "ts": "1613550067.003800",
        "client_msg_id": "bdcf2dba-ebde-4bea-b8e2-fc0696ecbc96",
        "text": "if you want to have a bit more control: concurrent.futures.ProcessPoolExecutor (or ThreadPoolExecutor) + tqdm",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "e3b7687b0ef8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-06\/1432945617648_e3b7687b0ef86e4f28b8_72.png",
            "first_name": "Alessio",
            "real_name": "Alessio",
            "display_name": "Alessio",
            "team": "T4G9NBD2M",
            "name": "alessio",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5xo=0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if you want to have a bit more control: concurrent.futures.ProcessPoolExecutor (or ThreadPoolExecutor) + tqdm"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01C12ZEADQ",
        "type": "message",
        "ts": "1613550076.004100",
        "client_msg_id": "2bf9627f-bec0-4877-98bf-3c1169443474",
        "text": "so you can even see the progress via the tqdm callbacks",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "e3b7687b0ef8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-06\/1432945617648_e3b7687b0ef86e4f28b8_72.png",
            "first_name": "Alessio",
            "real_name": "Alessio",
            "display_name": "Alessio",
            "team": "T4G9NBD2M",
            "name": "alessio",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q4vs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so you can even see the progress via the tqdm callbacks"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01C12ZEADQ",
        "type": "message",
        "ts": "1613550101.004300",
        "client_msg_id": "852a050e-818e-4cfc-a477-a8226cdf0090",
        "text": "(I never used the Ray pool though)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "e3b7687b0ef8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-06\/1432945617648_e3b7687b0ef86e4f28b8_72.png",
            "first_name": "Alessio",
            "real_name": "Alessio",
            "display_name": "Alessio",
            "team": "T4G9NBD2M",
            "name": "alessio",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EXL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I never used the Ray pool though)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1613550143.005000",
        "client_msg_id": "ae5f5e1a-b65b-49da-802d-3b17fa96f5d0",
        "text": "yeah same, mine looks like this (limited to 16 markets at a time as I found that optimal but will change when 1.17 is released)\n```def run_processes(markets: list, processes: int, run_id: str, run_framework) -&gt; None:\n    if len(markets) &gt; 1 and processes &gt; 1:\n        _process_jobs = []\n        with futures.ProcessPoolExecutor(max_workers=processes) as p:\n            chunk = min(16, math.ceil(len(markets) \/ processes))\n            for i, m in enumerate((chunks(markets, chunk)), 1):\n                _process_jobs.append(\n                    p.submit(\n                        run_process,\n                        run_id=run_id,\n                        f=run_framework,\n                        process_markets=m,\n                        process_i=i,\n                    )\n                )\n            for job in tqdm(futures.as_completed(_process_jobs), total=i):\n                job.result()  # wait for result\n    else:\n        run_process(\n            run_id=run_id,\n            f=run_framework,\n            process_markets=markets,\n            process_i=1,\n            _print=True,\n        )```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ORGW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah same, mine looks like this (limited to 16 markets at a time as I found that optimal but will change when 1.17 is released)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "def run_processes(markets: list, processes: int, run_id: str, run_framework) -> None:\n    if len(markets) > 1 and processes > 1:\n        _process_jobs = []\n        with futures.ProcessPoolExecutor(max_workers=processes) as p:\n            chunk = min(16, math.ceil(len(markets) \/ processes))\n            for i, m in enumerate((chunks(markets, chunk)), 1):\n                _process_jobs.append(\n                    p.submit(\n                        run_process,\n                        run_id=run_id,\n                        f=run_framework,\n                        process_markets=m,\n                        process_i=i,\n                    )\n                )\n            for job in tqdm(futures.as_completed(_process_jobs), total=i):\n                job.result()  # wait for result\n    else:\n        run_process(\n            run_id=run_id,\n            f=run_framework,\n            process_markets=markets,\n            process_i=1,\n            _print=True,\n        )"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01C12ZEADQ",
        "type": "message",
        "ts": "1613550176.005600",
        "client_msg_id": "40023fe0-4249-4dcc-92e1-da1304b1499a",
        "text": "eexactly. now I tried Ray ~ a few months ago, but the main problem is that if you get an exception you are not guaranteed to understand where it happened",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "e3b7687b0ef8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-06\/1432945617648_e3b7687b0ef86e4f28b8_72.png",
            "first_name": "Alessio",
            "real_name": "Alessio",
            "display_name": "Alessio",
            "team": "T4G9NBD2M",
            "name": "alessio",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O1q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "eexactly. now I tried Ray ~ a few months ago, but the main problem is that if you get an exception you are not guaranteed to understand where it happened"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U019Z6V6DHS",
        "type": "message",
        "ts": "1613550374.006100",
        "client_msg_id": "490eaa6c-1483-4b16-b297-92f2705aa87d",
        "text": "oh wow. flumine is where i am trying to get at! great work!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g2283cf60070",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2283cf60070ef651f7b3fc3bfe06996e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Angelos",
            "display_name": "Angelos",
            "team": "T4G9NBD2M",
            "name": "a2gelosgeo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613500636.497700",
        "parent_user_id": "U016TGY3676",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2W1U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh wow. flumine is where i am trying to get at! great work!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "grin",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U019Z6V6DHS",
        "type": "message",
        "ts": "1613550435.006300",
        "client_msg_id": "2c11fe15-438e-4c15-bf66-9dc2a20a0df1",
        "text": "will post another message with more info of how i will integrate this “cross-market” selection in case you would be interested in making a PR",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g2283cf60070",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2283cf60070ef651f7b3fc3bfe06996e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Angelos",
            "display_name": "Angelos",
            "team": "T4G9NBD2M",
            "name": "a2gelosgeo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613500636.497700",
        "parent_user_id": "U016TGY3676",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WlEN4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "will post another message with more info of how i will integrate this “cross-market” selection in case you would be interested in making a PR"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0154JA98TH",
        "type": "message",
        "ts": "1613556616.007600",
        "client_msg_id": "16cc283e-68b9-47a0-90b7-0a1aa8751e6e",
        "text": "Hi there. Ive been messing around with pulling through account statements using bflw but am occasionally running into problem an INVALID_APP_KEY error. Do you know if the delayed key is unable to access this endpoint\/resource for some reason or should this not affect account retrieval?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g04d857ee3ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/04d857ee3ad168a8451932c84c7d0d6d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Wadsworth",
            "display_name": "Jono",
            "team": "T4G9NBD2M",
            "name": "jonowads",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613463592.474400",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rBmg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi there. Ive been messing around with pulling through account statements using bflw but am occasionally running into problem an INVALID_APP_KEY error. Do you know if the delayed key is unable to access this endpoint\/resource for some reason or should this not affect account retrieval?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1613556667.007800",
        "client_msg_id": "14aa96ed-c5d7-4ca8-91aa-c2f7cfd71f9b",
        "text": "No idea, delayed key is pretty much a complete waste of time so I never use it",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613463592.474400",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IVHc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No idea, delayed key is pretty much a complete waste of time so I never use it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0154JA98TH",
        "type": "message",
        "ts": "1613557032.008000",
        "client_msg_id": "67adb968-861a-4bdb-afdc-7221bbbb44c9",
        "text": "ah right no problem, also do you ever find yourself manually constructing the the request you send to bf eg:\n\n`{\"jsonrpc\": \"2.0\", \"method\": \"SportsAPING\/v1.0\/listClearedOrders\", \"params\": {\"betStatus\":\"SETTLED\", \"groupBy\":\"BET\", \"betIds\": ['bet_id']}, \"id\": 1}`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g04d857ee3ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/04d857ee3ad168a8451932c84c7d0d6d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Wadsworth",
            "display_name": "Jono",
            "team": "T4G9NBD2M",
            "name": "jonowads",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613463592.474400",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6HCjk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ah right no problem, also do you ever find yourself manually constructing the the request you send to bf eg:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "{\"jsonrpc\": \"2.0\", \"method\": \"SportsAPING\/v1.0\/listClearedOrders\", \"params\": {\"betStatus\":\"SETTLED\", \"groupBy\":\"BET\", \"betIds\": ['bet_id']}, \"id\": 1}",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0154JA98TH",
        "type": "message",
        "ts": "1613557059.008200",
        "client_msg_id": "bbfe69b7-7b81-4437-a915-39b828067101",
        "text": "is this ever a necessary thing to do or does it have any advantages",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g04d857ee3ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/04d857ee3ad168a8451932c84c7d0d6d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Wadsworth",
            "display_name": "Jono",
            "team": "T4G9NBD2M",
            "name": "jonowads",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613463592.474400",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kv\/Yy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "is this ever a necessary thing to do or does it have any advantages"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1613557159.008400",
        "client_msg_id": "ae8feae4-79eb-40b2-abeb-e96d08f03920",
        "text": "Never, why can't you just use bflw?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613463592.474400",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hrNlI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Never, why can't you just use bflw?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0154JA98TH",
        "type": "message",
        "ts": "1613557257.008600",
        "edited": {
            "user": "U0154JA98TH",
            "ts": "1613557275.000000"
        },
        "client_msg_id": "9ef481de-94f3-44f7-a9ad-9a09d68f2c2e",
        "text": "was wondering why in your initial replies to my question about account retrieval you said \"If you're using bflw...\" implying i might be accessing the api some other way",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g04d857ee3ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/04d857ee3ad168a8451932c84c7d0d6d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Wadsworth",
            "display_name": "Jono",
            "team": "T4G9NBD2M",
            "name": "jonowads",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613463592.474400",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MWy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "was wondering why in your initial replies to my question about account retrieval you said \"If you're using bflw...\" implying i might be accessing the api some other way"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1613557308.008900",
        "client_msg_id": "318cc0c2-ef66-4c76-87c0-08dbac78cd20",
        "text": "Ah right, well some people on here are not Python developers and don't use bflw but I would still expect them to use a library rather than constructing the requests by hand",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613463592.474400",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BlWC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah right, well some people on here are not Python developers and don't use bflw but I would still expect them to use a library rather than constructing the requests by hand"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0154JA98TH",
        "type": "message",
        "ts": "1613557381.009100",
        "client_msg_id": "9e2db75b-4e6e-4993-a50e-3f60078d9deb",
        "text": "ok no problem, thanks for the help",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g04d857ee3ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/04d857ee3ad168a8451932c84c7d0d6d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Wadsworth",
            "display_name": "Jono",
            "team": "T4G9NBD2M",
            "name": "jonowads",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613463592.474400",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zX00",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok no problem, thanks for the help"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1613557390.009300",
        "client_msg_id": "153f66ba-7564-4771-9489-d220f735c8a9",
        "text": "Any time :+1:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613463592.474400",
        "parent_user_id": "UBS7QANF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pkAiO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Any time "
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK55EGNLA",
        "type": "message",
        "ts": "1613559302.010300",
        "client_msg_id": "5d0c7eb1-9a5d-4cf5-93bd-8a181bca7e3c",
        "text": "For anyone interested in why the historical data for runner total_matched is not correct whereas the live API is, here is my response from betfair:\n```The total cumulative traded volume per runner (at all prices) isn't included in the PRO data set, unlike in the live Stream API.\n\nFor a single price point, 'tv' is cumulative, so each \"trd\" update contains the price and cumulative traded volume traded so far at that price.  The final sum of the 'tv' at each price point for each selection will be equal to the market traded volume.\n\n\"op\":\"mcm\",\"clk\":\"9702272675\",\"pt\":1563905629308,\"mc\":[{\"id\":\"1.160659053\",\"rc\":[{\"trd\":[[4.1,11.11]],\"ltp\":4.1,\"tv\":11.11,\"id\":9938916},{\"atb\":[[4.1,9.93]],\"id\":9938916}],\"con\":true,\"img\":false}]}\n{\"op\":\"mcm\",\"clk\":\"9702305064\",\"pt\":1563905813250,\"mc\":[{\"id\":\"1.160659053\",\"rc\":[{\"trd\":[[4.1,31.31]],\"ltp\":4.1,\"tv\":31.31,\"id\":9938916},{\"atb\":[[4.1,0]],\"id\":9938916},{\"atl\":[[4.1,4.9]],\"id\":9938916}],\"con\":true,\"img\":false}]}\n{\"op\":\"mcm\",\"clk\":\"9703398965\",\"pt\":1563917405197,\"mc\":[{\"id\":\"1.160659053\",\"rc\":[{\"trd\":[[4.1,37.64]],\"ltp\":4.1,\"tv\":37.64,\"id\":9938916},{\"atl\":[[4.1,1.74]],\"id\":9938916},{\"spn\":6.6,\"spf\":1.0,\"id\":11110173}],\"con\":true,\"img\":false}]}\nThe runner tv (\"tv\") represents the cumulative traded amount at the last price traded (ltp) or cumulative amount of all 'trd' amounts in the update if multiple prices are included.```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gdfe07d47541",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/edfe07d47541581fd47335de627fc2b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "Robert",
            "real_name": "Robert",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lHy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For anyone interested in why the historical data for runner total_matched is not correct whereas the live API is, here is my response from betfair:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The total cumulative traded volume per runner (at all prices) isn't included in the PRO data set, unlike in the live Stream API.\n\nFor a single price point, 'tv' is cumulative, so each \"trd\" update contains the price and cumulative traded volume traded so far at that price.  The final sum of the 'tv' at each price point for each selection will be equal to the market traded volume.\n\n\"op\":\"mcm\",\"clk\":\"9702272675\",\"pt\":1563905629308,\"mc\":[{\"id\":\"1.160659053\",\"rc\":[{\"trd\":[[4.1,11.11]],\"ltp\":4.1,\"tv\":11.11,\"id\":9938916},{\"atb\":[[4.1,9.93]],\"id\":9938916}],\"con\":true,\"img\":false}]}\n{\"op\":\"mcm\",\"clk\":\"9702305064\",\"pt\":1563905813250,\"mc\":[{\"id\":\"1.160659053\",\"rc\":[{\"trd\":[[4.1,31.31]],\"ltp\":4.1,\"tv\":31.31,\"id\":9938916},{\"atb\":[[4.1,0]],\"id\":9938916},{\"atl\":[[4.1,4.9]],\"id\":9938916}],\"con\":true,\"img\":false}]}\n{\"op\":\"mcm\",\"clk\":\"9703398965\",\"pt\":1563917405197,\"mc\":[{\"id\":\"1.160659053\",\"rc\":[{\"trd\":[[4.1,37.64]],\"ltp\":4.1,\"tv\":37.64,\"id\":9938916},{\"atl\":[[4.1,1.74]],\"id\":9938916},{\"spn\":6.6,\"spf\":1.0,\"id\":11110173}],\"con\":true,\"img\":false}]}\nThe runner tv (\"tv\") represents the cumulative traded amount at the last price traded (ltp) or cumulative amount of all 'trd' amounts in the update if multiple prices are included."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK55EGNLA",
        "type": "message",
        "ts": "1613559340.011100",
        "edited": {
            "user": "UK55EGNLA",
            "ts": "1613559866.000000"
        },
        "client_msg_id": "857be37b-deda-4009-8908-36f61bd11cb8",
        "text": "so it would be possible to recreate the runner total matched therefore assuming there are no gaps in the updates.  And we can compare to the market total matched anyway as a sanity check.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gdfe07d47541",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/edfe07d47541581fd47335de627fc2b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "Robert",
            "real_name": "Robert",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613559340.011100",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1613561662.011900",
        "reply_users": [
            "U4H19D1D2"
        ],
        "replies": [
            {
                "user": "U4H19D1D2",
                "ts": "1613561645.011700"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1613561662.011900"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1613561662.011900",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kqv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so it would be possible to recreate the runner total matched therefore assuming there are no gaps in the updates.  And we can compare to the market total matched anyway as a sanity check."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0135SLHQBW",
        "type": "message",
        "ts": "1613560959.011600",
        "client_msg_id": "35d696b9-27e4-4103-80bd-ab83f81b2451",
        "text": "I use GNU parallel because I'm lazy :sunglasses:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g316814ce896",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/316814ce896c34a9c72e2ddd6fa17b86.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "",
            "real_name": "MacrcoPolo",
            "display_name": "MacrcoPolo",
            "team": "T4G9NBD2M",
            "name": "omverran",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ugdN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use GNU parallel because I'm lazy "
                            },
                            {
                                "type": "emoji",
                                "name": "sunglasses",
                                "unicode": "1f60e"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1613561645.011700",
        "client_msg_id": "37e71e90-1064-4d0d-9ebd-c141073d8d46",
        "text": "Thanks for the update, I think I did know this, no idea what they have made the spec different to live",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613559340.011100",
        "parent_user_id": "UK55EGNLA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hfIA7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the update, I think I did know this, no idea what they have made the spec different to live"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1613561662.011900",
        "client_msg_id": "7fbcb739-754d-408b-9532-2be1632f167c",
        "text": "You would have to update the listener to handle this",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613559340.011100",
        "parent_user_id": "UK55EGNLA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wz7BN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You would have to update the listener to handle this"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01MCB3Q3FC",
        "type": "message",
        "ts": "1613572115.013200",
        "client_msg_id": "9c05fde7-efcd-4cf9-9d8a-3c265237f820",
        "text": "Does anyone know any 'total idiots guide' to streaming using Python based on this page ?\n<https:\/\/github.com\/liampauling\/betfair>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gab9a215ba97",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ab9a215ba979724227f16250eb9a28fc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "Jon",
            "real_name": "Jon Kidd",
            "display_name": "Jon K",
            "team": "T4G9NBD2M",
            "name": "jon.kidd",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "liampauling\/betfair",
                "text": "betfairlightweight - python wrapper for Betfair API-NG (with streaming)",
                "title": "liampauling\/betfair",
                "footer": "<https:\/\/github.com\/liampauling\/betfair|liampauling\/betfair>",
                "id": 1,
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1452717035,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "240",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "Python",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/betfair",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gum",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone know any 'total idiots guide' to streaming using Python based on this page ?\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1613572148.013500",
        "client_msg_id": "8867ff15-149c-4f8d-b34f-cdb9cc48d2ff",
        "text": "<https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaming.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[liampauling\/betfair] examples\/examplestreaming.py",
                "text": "```\nimport logging\nimport queue\nimport threading\n\nimport betfairlightweight\nfrom betfairlightweight.filters import (\n    streaming_market_filter,\n    streaming_market_data_filter,\n)\n\n\n# setup logging\nlogging.basicConfig(level=<http:\/\/logging.INFO|logging.INFO>)  # change to DEBUG to see log all updates\n\n# create trading instance (app key must be activated for streaming)\ntrading = betfairlightweight.APIClient(\"username\", \"password\", app_key=\"appKey\")\n\n# login\ntrading.login()\n\n# create queue\noutput_queue = queue.Queue()\n\n# create stream listener\nlistener = betfairlightweight.StreamListener(output_queue=output_queue)\n\n# create stream\nstream = trading.streaming.create_stream(listener=listener)\n\n# create filters (GB WIN racing)\nmarket_filter = streaming_market_filter(\n    event_type_ids=[\"7\"], country_codes=[\"GB\"], market_types=[\"WIN\"]\n)\nmarket_data_filter = streaming_market_data_filter(\n    fields=[\"EX_BEST_OFFERS\", \"EX_MARKET_DEF\"], ladder_levels=3\n)\n\n# subscribe\nstreaming_unique_id = stream.subscribe_to_markets(\n    market_filter=market_filter,\n    market_data_filter=market_data_filter,\n    conflate_ms=1000,  # send update every 1000ms\n)\n\n# start stream in a new thread (in production would need err handling)\nt = threading.Thread(target=stream.start, daemon=True)\nt.start()\n\n\"\"\"\nData can also be accessed by using the snap function in the listener, e.g:\n\n    market_books = listener.snap(\n        market_ids=[1.12345323]\n    )\n\nErrors need to be caught at stream.start, resubscribe can then be used to\nprevent full image being sent, e.g:\n\n    streaming_unique_id = stream.subscribe_to_markets(\n        market_filter=market_filter,\n        market_data_filter=market_data_filter,\n        conflate_ms=1000,  # send update every 1000ms\n        initial_clk=listener.initial_clk,\n        clk=listener.clk,\n    )\n\nThe streaming unique id is returned in the market book which allows multiple\nstreams to be differentiated if multiple streams feed into the same queue.\n\"\"\"\n\n# check for updates in output queue\nwhile True:\n    market_books = output_queue.get()\n    print(market_books)\n\n    for market_book in market_books:\n        print(\n            market_book,\n            market_book.streaming_unique_id,  # unique id of stream (returned from subscribe request)\n            market_book.streaming_update,  # json update received\n            market_book.market_definition,  # streaming definition, similar to catalogue request\n            market_book.publish_time,  # betfair publish time of update\n        )\n\n```",
                "title": "examples\/examplestreaming.py",
                "footer": "<https:\/\/github.com\/liampauling\/betfair|liampauling\/betfair>",
                "id": 1,
                "title_link": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaming.py",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaming.py",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QHTUk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaming.py"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1613572163.013900",
        "client_msg_id": "d23526a0-f0a8-47e7-aaa9-f21148aefa4b",
        "text": "<https:\/\/liampauling.github.io\/betfair\/streaming\/|docs> not good enough?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "Streaming - betfairlightweight",
                "title_link": "https:\/\/liampauling.github.io\/betfair\/streaming\/",
                "text": "Lightweight, super fast (uses c libraries) pythonic wrapper for Betfair API-NG.",
                "fallback": "Streaming - betfairlightweight",
                "from_url": "https:\/\/liampauling.github.io\/betfair\/streaming\/",
                "service_icon": "https:\/\/liampauling.github.io\/betfair\/assets\/images\/favicon.png",
                "service_name": "liampauling.github.io",
                "id": 1,
                "original_url": "https:\/\/liampauling.github.io\/betfair\/streaming\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FouG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/liampauling.github.io\/betfair\/streaming\/",
                                "text": "docs"
                            },
                            {
                                "type": "text",
                                "text": " not good enough?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01MCB3Q3FC",
        "type": "message",
        "ts": "1613572297.014200",
        "client_msg_id": "f1a9ed62-f05f-4358-8f64-543b1c175f4c",
        "text": ":+1: How did I miss them",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gab9a215ba97",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ab9a215ba979724227f16250eb9a28fc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "Jon",
            "real_name": "Jon Kidd",
            "display_name": "Jon K",
            "team": "T4G9NBD2M",
            "name": "jon.kidd",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uoG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            },
                            {
                                "type": "text",
                                "text": " How did I miss them"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01MCB3Q3FC",
        "type": "message",
        "ts": "1613572307.014400",
        "client_msg_id": "6ebe3c8c-8e8c-4c3e-a138-e887179c18d3",
        "text": ":face_with_rolling_eyes:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gab9a215ba97",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ab9a215ba979724227f16250eb9a28fc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "Jon",
            "real_name": "Jon Kidd",
            "display_name": "Jon K",
            "team": "T4G9NBD2M",
            "name": "jon.kidd",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i0TK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "face_with_rolling_eyes",
                                "unicode": "1f644"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U01N82K7LAH",
        "text": "<@U01N82K7LAH> has joined the channel",
        "type": "message",
        "ts": "1613577729.014600"
    },
    {
        "user": "UUUAJQZ5J",
        "type": "message",
        "ts": "1613630315.016000",
        "client_msg_id": "721400e2-ad71-43f7-b5d9-435bbbd3c2d8",
        "text": "hey guys. has anyone used bflw to read in the PRO historical data sets from their TAR form? I'm following the <https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py|sample code> and getting the following error, which I assume is due to the TAR format?\n\n```UnicodeDecodeError: 'charmap' codec can't decode byte 0x90 in position 569: character maps to &lt;undefined&gt;```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "f82cfa28f86e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-01-10\/2929887731124_f82cfa28f86eb8c28a2f_72.jpg",
            "first_name": "Kerrin",
            "real_name": "Kerrin Grosvenor",
            "display_name": "KG",
            "team": "T4G9NBD2M",
            "name": "kerrin.grosvenor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[liampauling\/betfair] examples\/examplestreaminghistorical.py",
                "text": "```\nimport logging\n\nimport betfairlightweight\nfrom betfairlightweight import StreamListener\n\n\"\"\"\nData needs to be downloaded from:\n    <https:\/\/historicdata.betfair.com>\n\"\"\"\n\n# setup logging\nlogging.basicConfig(level=<http:\/\/logging.INFO|logging.INFO>)\n\n# create trading instance (don't need username\/password)\ntrading = betfairlightweight.APIClient(\"username\", \"password\")\n\n# create listener\nlistener = StreamListener(max_latency=None)\n\n# create historical stream (update file_path to your file location)\nstream = trading.streaming.create_historical_generator_stream(\n    file_path=\"\/tmp\/BASIC-1.132153978\",\n    listener=listener,\n)\n\n# create generator\ngen = stream.get_generator()\n\n# print marketBooks\nfor market_books in gen():\n    for market_book in market_books:\n        print(market_book)\n\n# print based on seconds to start\nfor market_books in gen():\n    for market_book in market_books:\n        seconds_to_start = (\n            market_book.market_definition.market_time - market_book.publish_time\n        ).total_seconds()\n        if seconds_to_start &lt; 100:\n            print(market_book.market_id, seconds_to_start, market_book.total_matched)\n\n        # print winner details once market is closed\n        if market_book.status == \"CLOSED\":\n            for runner in market_book.runners:\n                if runner.status == \"WINNER\":\n                    print(\n                        \"{0}: {1} with sp of {2}\".format(\n                            runner.status, runner.selection_id, runner.sp.actual_sp\n                        )\n                    )\n\n# record prices to a file\nwith open(\"output.txt\", \"w\") as output:\n    output.write(\"Time,MarketId,Status,Inplay,SelectionId,LastPriceTraded\\n\")\n\nfor market_books in gen():\n    for market_book in market_books:\n        with open(\"output.txt\", \"a\") as output:\n            for runner in market_book.runners:\n                # how to get runner details from the market definition\n                market_def = market_book.market_definition\n                runners_dict = {\n                    (runner.selection_id, runner.handicap): runner\n                    for runner in market_def.runners\n                }\n                runner_def = runners_dict.get((runner.selection_id, runner.handicap))\n\n                output.write(\n                    \"%s,%s,%s,%s,%s,%s\\n\"\n                    % (\n                        market_book.publish_time,\n                        market_book.market_id,\n                        market_book.status,\n                        market_book.inplay,\n                        runner.selection_id,\n                        runner.last_price_traded or \"\",\n                    )\n                )\n\n```",
                "title": "examples\/examplestreaminghistorical.py",
                "footer": "<https:\/\/github.com\/liampauling\/betfair|liampauling\/betfair>",
                "id": 1,
                "title_link": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "raj0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hey guys. has anyone used bflw to read in the PRO historical data sets from their TAR form? I'm following the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py",
                                "text": "sample code"
                            },
                            {
                                "type": "text",
                                "text": " and getting the following error, which I assume is due to the TAR format?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "UnicodeDecodeError: 'charmap' codec can't decode byte 0x90 in position 569: character maps to <undefined>"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1613630452.016200",
        "text": "You can patch open with smart_open.open",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[January 20th, 2021 4:54 PM] fcmisc: <@U4H19D1D2> By patch, do you mean doing something on my side instead of making a change to the bflw codebase? Something like this?\n<https:\/\/betfairlightweight.slack.com\/archives\/C4HL6EZTQ\/p1608035327035400?thread_ts=1608012009.025500&amp;cid=C4HL6EZTQ>",
                "ts": "1611161692.123000",
                "author_id": "UPMUFSGCR",
                "author_subname": "Jon Jon Jon Jon Jon Jon Jon Jon",
                "channel_id": "C4H05KKMY",
                "is_msg_unfurl": true,
                "text": "<@U4H19D1D2> By patch, do you mean doing something on my side instead of making a change to the bflw codebase? Something like this?\n<https:\/\/betfairlightweight.slack.com\/archives\/C4HL6EZTQ\/p1608035327035400?thread_ts=1608012009.025500&amp;cid=C4HL6EZTQ>",
                "author_name": "Jon Jon Jon Jon Jon Jon Jon Jon",
                "author_link": "https:\/\/betfairlightweight.slack.com\/team\/UPMUFSGCR",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2019-10-28\/812386967189_31c0bb5a442c5b8d2c61_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/betfairlightweight.slack.com\/archives\/C4H05KKMY\/p1611161692123000",
                "is_share": true,
                "footer": "Slack conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qzLbX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can patch open with smart_open.open"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UUUAJQZ5J"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UUUAJQZ5J",
        "type": "message",
        "ts": "1613632160.017800",
        "client_msg_id": "818c4be9-5a6e-445c-aa17-95b6380d35bc",
        "text": "thanks <@UBS7QANF3> - I amended with the patch, still getting the same error though - any chance you can cast your eyes over my code and see if you can catch my mistake? I'm not a python native, but trying to get the library to work:\n\n```import logging\n\nfrom unittest.mock import patch\nimport smart_open\n\nimport betfairlightweight\nfrom betfairlightweight import StreamListener\n\n# setup logging\nlogging.basicConfig(level=<http:\/\/logging.INFO|logging.INFO>)\n\n# create trading instance (don't need username\/password)\ntrading = betfairlightweight.APIClient(\"username\", \"password\")\n\n# create listener\nlistener = StreamListener(max_latency=None)\n\n# create historical stream (update file_path to your file location)\nstream = trading.streaming.create_historical_generator_stream(\n    file_path=\"..\/_data\/2021_01_JanRacingPro.tar\",\n    listener=listener,\n)\n\nwith patch(\"builtins.open\", smart_open.open):   \n    gen = stream.get_generator()\n\n    for market_books in gen():\n        for market_book in market_books:\n            print(market_book)```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "f82cfa28f86e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-01-10\/2929887731124_f82cfa28f86eb8c28a2f_72.jpg",
            "first_name": "Kerrin",
            "real_name": "Kerrin Grosvenor",
            "display_name": "KG",
            "team": "T4G9NBD2M",
            "name": "kerrin.grosvenor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XgpIw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UBS7QANF3"
                            },
                            {
                                "type": "text",
                                "text": " - I amended with the patch, still getting the same error though - any chance you can cast your eyes over my code and see if you can catch my mistake? I'm not a python native, but trying to get the library to work:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "import logging\n\nfrom unittest.mock import patch\nimport smart_open\n\nimport betfairlightweight\nfrom betfairlightweight import StreamListener\n\n# setup logging\nlogging.basicConfig(level=logging.INFO)\n\n# create trading instance (don't need username\/password)\ntrading = betfairlightweight.APIClient(\"username\", \"password\")\n\n# create listener\nlistener = StreamListener(max_latency=None)\n\n# create historical stream (update file_path to your file location)\nstream = trading.streaming.create_historical_generator_stream(\n    file_path=\"..\/_data\/2021_01_JanRacingPro.tar\",\n    listener=listener,\n)\n\nwith patch(\"builtins.open\", smart_open.open):   \n    gen = stream.get_generator()\n\n    for market_books in gen():\n        for market_book in market_books:\n            print(market_book)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1613632318.018100",
        "client_msg_id": "dbbeab86-a0ef-41e8-86af-e44691990701",
        "text": "Ah right, you need to extract the tar files",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eC9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah right, you need to extract the tar files"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1613632334.018500",
        "edited": {
            "user": "UBS7QANF3",
            "ts": "1613632384.000000"
        },
        "client_msg_id": "caad08fd-d545-43b7-a095-754d12161db1",
        "text": "The patch will let you read the bzip2 files directly",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nCQKr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The patch will let you read the bzip2 files directly"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUUAJQZ5J",
        "type": "message",
        "ts": "1613632370.019000",
        "client_msg_id": "53800ccf-8769-4d7a-87c3-8e61a1053b32",
        "text": "ah I wondered if it were something like that! thank you :raised_hands:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "f82cfa28f86e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-01-10\/2929887731124_f82cfa28f86eb8c28a2f_72.jpg",
            "first_name": "Kerrin",
            "real_name": "Kerrin Grosvenor",
            "display_name": "KG",
            "team": "T4G9NBD2M",
            "name": "kerrin.grosvenor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b\/1Bt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ah I wondered if it were something like that! thank you "
                            },
                            {
                                "type": "emoji",
                                "name": "raised_hands",
                                "unicode": "1f64c"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]