[
    {
        "user": "U0155J92A7Q",
        "type": "message",
        "ts": "1667980836.970459",
        "client_msg_id": "d577a94e-660d-4bc8-b9bb-47e65ddc7bd0",
        "text": "Hi guys, any way of getting the total profit (bonus for profit net of commission) per market with flumine? Currently I'm calculating it manually using `sum([o.profit for o in market.blotter])`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gde8c5d51af5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/de8c5d51af54a5ac7b501f416ddb262c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jorge",
            "display_name": "Jorge",
            "team": "T4G9NBD2M",
            "name": "jgarciam95",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667980836.970459",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1668006168.725819",
        "reply_users": [
            "UFTBRB3F1",
            "U0155J92A7Q"
        ],
        "replies": [
            {
                "user": "UFTBRB3F1",
                "ts": "1667997414.707409"
            },
            {
                "user": "U0155J92A7Q",
                "ts": "1668006168.725819"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ulTV8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi guys, any way of getting the total profit (bonus for profit net of commission) per market with flumine? Currently I'm calculating it manually using "
                            },
                            {
                                "type": "text",
                                "text": "sum([o.profit for o in market.blotter])",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1667995686.597489",
        "client_msg_id": "075cdb32-28a0-4342-b691-f00157ae08bd",
        "text": "One for any ML users. Any recommendations for an easy ML framework other than tensorflow ? I'm revisiting some 3 year old tensorflow Estimator experiments and tf.v2 deprecates all that work and has switched to Keras - the upgrade path is turning into a time wasting mare. The old v1 is still supported for a while but don't want to risk relying on legacy stuff. Played with <http:\/\/ML.NET|ML.NET> but while that looks promising it will require some sort of IPC to work with flumine in real time which will be too laggy. So preferably something that works natively with Python.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667995686.597489",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1668017927.924329",
        "reply_users": [
            "URMM9463X",
            "U04AD6RAGGH",
            "U02RN7YDRQ9"
        ],
        "replies": [
            {
                "user": "URMM9463X",
                "ts": "1667996103.650109"
            },
            {
                "user": "U04AD6RAGGH",
                "ts": "1668003153.475789"
            },
            {
                "user": "U02RN7YDRQ9",
                "ts": "1668016566.527149"
            },
            {
                "user": "U04AD6RAGGH",
                "ts": "1668017927.924329"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l+G1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One for any ML users. Any recommendations for an easy ML framework other than tensorflow ? I'm revisiting some 3 year old tensorflow Estimator experiments and tf.v2 deprecates all that work and has switched to Keras - the upgrade path is turning into a time wasting mare. The old v1 is still supported for a while but don't want to risk relying on legacy stuff. Played with "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/ML.NET",
                                "text": "ML.NET"
                            },
                            {
                                "type": "text",
                                "text": " but while that looks promising it will require some sort of IPC to work with flumine in real time which will be too laggy. So preferably something that works natively with Python."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "URMM9463X",
        "thread_ts": "1667995686.597489",
        "root": {
            "user": "U02RN7YDRQ9",
            "type": "message",
            "ts": "1667995686.597489",
            "client_msg_id": "075cdb32-28a0-4342-b691-f00157ae08bd",
            "text": "One for any ML users. Any recommendations for an easy ML framework other than tensorflow ? I'm revisiting some 3 year old tensorflow Estimator experiments and tf.v2 deprecates all that work and has switched to Keras - the upgrade path is turning into a time wasting mare. The old v1 is still supported for a while but don't want to risk relying on legacy stuff. Played with <http:\/\/ML.NET|ML.NET> but while that looks promising it will require some sort of IPC to work with flumine in real time which will be too laggy. So preferably something that works natively with Python.",
            "team": "T4G9NBD2M",
            "thread_ts": "1667995686.597489",
            "reply_count": 4,
            "reply_users_count": 3,
            "latest_reply": "1668017927.924329",
            "reply_users": [
                "URMM9463X",
                "U04AD6RAGGH",
                "U02RN7YDRQ9"
            ],
            "replies": [
                {
                    "user": "URMM9463X",
                    "ts": "1667996103.650109"
                },
                {
                    "user": "U04AD6RAGGH",
                    "ts": "1668003153.475789"
                },
                {
                    "user": "U02RN7YDRQ9",
                    "ts": "1668016566.527149"
                },
                {
                    "user": "U04AD6RAGGH",
                    "ts": "1668017927.924329"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "l+G1",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "One for any ML users. Any recommendations for an easy ML framework other than tensorflow ? I'm revisiting some 3 year old tensorflow Estimator experiments and tf.v2 deprecates all that work and has switched to Keras - the upgrade path is turning into a time wasting mare. The old v1 is still supported for a while but don't want to risk relying on legacy stuff. Played with "
                                },
                                {
                                    "type": "link",
                                    "url": "http:\/\/ML.NET",
                                    "text": "ML.NET"
                                },
                                {
                                    "type": "text",
                                    "text": " but while that looks promising it will require some sort of IPC to work with flumine in real time which will be too laggy. So preferably something that works natively with Python."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1667996103.650109",
        "client_msg_id": "1F9EE026-686F-4473-B7ED-E1E56057449C",
        "text": "Easiest would be something like autogluon. I also invested heavily in tensor flow v1 :cry:",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j8nA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Easiest would be something like autogluon. I also invested heavily in tensor flow v1 "
                            },
                            {
                                "type": "emoji",
                                "name": "cry",
                                "unicode": "1f622"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U025AFDS89H",
        "type": "message",
        "ts": "1667997187.339779",
        "client_msg_id": "bdf5f3d1-2870-4171-8581-abcebc94c469",
        "text": "Hi all, I'm trying to build a simple dataframe containing basic details for the day's races. For some reason I can't get the off times for each race. This line `'Start Time': [market_cat_object.market_start_time for market_cat_object in market_catalogues]` just returns None. Can anyone see what the issue is? Thanks\n\n```# Create event filter\nevent_filter = betfairlightweight.filters.market_filter(\n    event_type_ids=[7],\n    market_type_codes=[\"WIN\"],\n    market_countries=[\"GB\", \"IE\"], \n    market_start_time={\n        'to': (datetime.utcnow() + timedelta(hours=time_window)).strftime(\"%Y-%m-%dT%TZ\")\n    }\n)\n\ntodays_races = trading.betting.list_events(\n    filter=event_filter\n)\n\nraces_today = pd.DataFrame({\n    'Event Name': [event_object.event.name for event_object in todays_races],\n    'Event ID': [event_object.event.id for event_object in todays_races],\n})\n\nprint(races_today)\n\nraces_list = races_today['Event ID'].to_list()\nprint(races_list)\n\nmarket_catalogue_filter = betfairlightweight.filters.market_filter(event_ids=races_list, market_type_codes=[\"WIN\"])\n\nmarket_catalogues = trading.betting.list_market_catalogue(\n    filter=market_catalogue_filter,\n    max_results='100',\n    sort='FIRST_TO_START',\n)\n\n# Create a DataFrame for each market catalogue\nraces_df = pd.DataFrame({\n    'Start Time': [market_cat_object.market_start_time for market_cat_object in market_catalogues],\n    'Market Name': [market_cat_object.market_name for market_cat_object in market_catalogues],\n    'Market ID': [market_cat_object.market_id for market_cat_object in market_catalogues],\n    'Total Matched': [market_cat_object.total_matched for market_cat_object in market_catalogues],\n})```\n",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g7aa6fcd81d9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7aa6fcd81d9a81ea32dba8c2cbb235d5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "James",
            "real_name": "James",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "james.armstrong35",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667997187.339779",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1668005088.082469",
        "reply_users": [
            "U4H19D1D2",
            "U025AFDS89H",
            "UBS7QANF3"
        ],
        "replies": [
            {
                "user": "U4H19D1D2",
                "ts": "1667997347.184179"
            },
            {
                "user": "U025AFDS89H",
                "ts": "1667997545.143419"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1667998070.081909"
            },
            {
                "user": "U025AFDS89H",
                "ts": "1668005088.082469"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1668005088.082469",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X4RC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi all, I'm trying to build a simple dataframe containing basic details for the day's races. For some reason I can't get the off times for each race. This line "
                            },
                            {
                                "type": "text",
                                "text": "'Start Time': [market_cat_object.market_start_time for market_cat_object in market_catalogues]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " just returns None. Can anyone see what the issue is? Thanks\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# Create event filter\nevent_filter = betfairlightweight.filters.market_filter(\n    event_type_ids=[7],\n    market_type_codes=[\"WIN\"],\n    market_countries=[\"GB\", \"IE\"], \n    market_start_time={\n        'to': (datetime.utcnow() + timedelta(hours=time_window)).strftime(\"%Y-%m-%dT%TZ\")\n    }\n)\n\ntodays_races = trading.betting.list_events(\n    filter=event_filter\n)\n\nraces_today = pd.DataFrame({\n    'Event Name': [event_object.event.name for event_object in todays_races],\n    'Event ID': [event_object.event.id for event_object in todays_races],\n})\n\nprint(races_today)\n\nraces_list = races_today['Event ID'].to_list()\nprint(races_list)\n\nmarket_catalogue_filter = betfairlightweight.filters.market_filter(event_ids=races_list, market_type_codes=[\"WIN\"])\n\nmarket_catalogues = trading.betting.list_market_catalogue(\n    filter=market_catalogue_filter,\n    max_results='100',\n    sort='FIRST_TO_START',\n)\n\n# Create a DataFrame for each market catalogue\nraces_df = pd.DataFrame({\n    'Start Time': [market_cat_object.market_start_time for market_cat_object in market_catalogues],\n    'Market Name': [market_cat_object.market_name for market_cat_object in market_catalogues],\n    'Market ID': [market_cat_object.market_id for market_cat_object in market_catalogues],\n    'Total Matched': [market_cat_object.total_matched for market_cat_object in market_catalogues],\n})"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1667997347.184179",
        "client_msg_id": "326aba02-c4fc-491b-b6f1-4d9342ec181b",
        "text": "You haven't asked for it in the `list_market_catalogue` request, example <https:\/\/github.com\/betcode-org\/betfair\/blob\/71c8fe2acdd20c9d65663e5a5af7692267489e81\/examples\/exampleone.py#L25|here> that does",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667997187.339779",
        "parent_user_id": "U025AFDS89H",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/betcode-org\/betfair\/blob\/71c8fe2acdd20c9d65663e5a5af7692267489e81\/examples\/exampleone.py#L25",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/betcode-org\/betfair\/blob\/71c8fe2acdd20c9d65663e5a5af7692267489e81\/examples\/exampleone.py | exampleone.py>",
                "text": "```\n    market_catalogues = trading.betting.list_market_catalogue(\n```",
                "title": "<https:\/\/github.com\/betcode-org\/betfair\/blob\/71c8fe2acdd20c9d65663e5a5af7692267489e81\/examples\/exampleone.py | exampleone.py>",
                "footer": "<https:\/\/github.com\/betcode-org\/betfair|betcode-org\/betfair>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tT3bD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You haven't asked for it in the "
                            },
                            {
                                "type": "text",
                                "text": "list_market_catalogue",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " request, example "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/betcode-org\/betfair\/blob\/71c8fe2acdd20c9d65663e5a5af7692267489e81\/examples\/exampleone.py#L25",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": " that does"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U025AFDS89H"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFTBRB3F1",
        "type": "message",
        "ts": "1667997414.707409",
        "client_msg_id": "7657ac44-837b-4209-82fd-31b3c8db6100",
        "text": "You can get this on closure using this example:\n\n<https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/controls\/backtestloggingcontrol.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g771e110be94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a771e110be945b86bede9d5c1bb551e3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Newbie99",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "vjmehra",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667980836.970459",
        "parent_user_id": "U0155J92A7Q",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/controls\/backtestloggingcontrol.py",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/controls\/backtestloggingcontrol.py | backtestloggingcontrol.py>",
                "text": "```\nimport csv\nimport logging\nfrom flumine.controls.loggingcontrols import LoggingControl\nfrom flumine.order.ordertype import OrderTypes\n\nlogger = logging.getLogger(__name__)\n\nFIELDNAMES = [\n    \"bet_id\",\n    \"strategy_name\",\n    \"market_id\",\n    \"selection_id\",\n    \"trade_id\",\n    \"date_time_placed\",\n    \"price\",\n    \"price_matched\",\n    \"size\",\n    \"size_matched\",\n    \"profit\",\n    \"side\",\n    \"elapsed_seconds_executable\",\n    \"order_status\",\n    \"market_note\",\n    \"trade_notes\",\n    \"order_notes\",\n]\n\n\nclass BacktestLoggingControl(LoggingControl):\n    NAME = \"BACKTEST_LOGGING_CONTROL\"\n\n    def __init__(self, *args, **kwargs):\n        super(BacktestLoggingControl, self).__init__(*args, **kwargs)\n        self._setup()\n\n    def _setup(self):\n        with open(\"orders.txt\", \"w\") as m:\n            csv_writer = csv.DictWriter(m, delimiter=\",\", fieldnames=FIELDNAMES)\n            csv_writer.writeheader()\n\n    def _process_cleared_orders_meta(self, event):\n        orders = event.event\n        with open(\"orders.txt\", \"a\") as m:\n            for order in orders:\n                if order.order_type.ORDER_TYPE == OrderTypes.LIMIT:\n                    size = order.order_type.size\n                else:\n                    size = order.order_type.liability\n                if order.order_type.ORDER_TYPE == OrderTypes.MARKET_ON_CLOSE:\n                    price = None\n                else:\n                    price = order.order_type.price\n                try:\n                    order_data = {\n                        \"bet_id\": order.bet_id,\n                        \"strategy_name\": order.trade.strategy,\n                        \"market_id\": order.market_id,\n                        \"selection_id\": order.selection_id,\n                        \"trade_id\": order.trade.id,\n                        \"date_time_placed\": order.responses.date_time_placed,\n                        \"price\": price,\n                        \"price_matched\": order.average_price_matched,\n                        \"size\": size,\n                        \"size_matched\": order.size_matched,\n                        \"profit\": order.profit,\n                        \"side\": order.side,\n                        \"elapsed_seconds_executable\": order.elapsed_seconds_executable,\n                        \"order_status\": order.status.value,\n                        \"market_note\": order.trade.market_notes,\n                        \"trade_notes\": order.trade.notes_str,\n                        \"order_notes\": order.notes_str,\n                    }\n                    csv_writer = csv.DictWriter(m, delimiter=\",\", fieldnames=FIELDNAMES)\n                    csv_writer.writerow(order_data)\n                except Exception as e:\n                    logger.error(\n                        \"_process_cleared_orders_meta: %s\" % e,\n                        extra={\"order\": order, \"error\": e},\n                    )\n\n        <http:\/\/logger.info|logger.info>(\"Orders updated\", extra={\"order_count\": len(orders)})\n\n    def _process_cleared_markets(self, event):\n        cleared_markets = event.event\n        for cleared_market in cleared_markets.orders:\n            <http:\/\/logger.info|logger.info>(\n                \"Cleared market\",\n                extra={\n                    \"market_id\": cleared_market.market_id,\n                    \"bet_count\": cleared_market.bet_count,\n                    \"profit\": cleared_market.profit,\n                    \"commission\": cleared_market.commission,\n                },\n            )\n\n```",
                "title": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/controls\/backtestloggingcontrol.py | backtestloggingcontrol.py>",
                "footer": "<https:\/\/github.com\/betcode-org\/flumine|betcode-org\/flumine>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C6b7U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can get this on closure using this example:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/controls\/backtestloggingcontrol.py"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U025AFDS89H",
        "type": "message",
        "ts": "1667997545.143419",
        "client_msg_id": "37c5b3ee-b636-447a-a7fe-517e76109b60",
        "text": "Doh! Thanks Liam",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g7aa6fcd81d9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7aa6fcd81d9a81ea32dba8c2cbb235d5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "James",
            "real_name": "James",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "james.armstrong35",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667997187.339779",
        "parent_user_id": "U025AFDS89H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nLs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Doh! Thanks Liam"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1667998070.081909",
        "edited": {
            "user": "UBS7QANF3",
            "ts": "1667998095.000000"
        },
        "client_msg_id": "e8304b93-d9ba-40ac-91c5-989d0c8647df",
        "text": "Hate to be That Guy but this is a cleaner way to construct your data frame:\n\n```pd.DataFrame(\n    {\n        \"Start Time\": market_cat_object.market_start_time,\n        \"Market Name\": market_cat_object.market_name,\n        \"Market ID\": market_cat_object.market_id,\n        \"Total Matched\": market_cat_object.total_matched,\n    }\n    for market_cat_object in market_catalogues\n)```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667997187.339779",
        "parent_user_id": "U025AFDS89H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xNq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hate to be That Guy but this is a cleaner way to construct your data frame:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "pd.DataFrame(\n    {\n        \"Start Time\": market_cat_object.market_start_time,\n        \"Market Name\": market_cat_object.market_name,\n        \"Market ID\": market_cat_object.market_id,\n        \"Total Matched\": market_cat_object.total_matched,\n    }\n    for market_cat_object in market_catalogues\n)"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U025AFDS89H"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0478AD7VEU",
        "type": "message",
        "ts": "1667998655.905009",
        "edited": {
            "user": "U0478AD7VEU",
            "ts": "1667998887.000000"
        },
        "client_msg_id": "11f16e2f-95d6-4a2e-81ba-321438fe66b8",
        "text": "Hi guys, I've got a flumine specific question. I don't know if I misunderstand something in the way the blotter works. I'm simulating a simple strategy with historical data. In this particular case, at the end all the orders in the markets blotter show up as PENDING, which is very unlikely since there are a lot of them and I take very bad prices just to see if they ever get the status EXECUTION_COMPLETE.\nI collect some of the orders information into a dataframe. This is one example row. Why do I have a `avg_price_matched` and `size_matched` and `profit`, when the order is still PENDING? By the way the placed_at and completed_at are seconds to start time.\n```selection_id  placed_at  completed_at  status                price  side  avg_price_matched  size_matched  profit\n28396755      -348.287   -348.287      OrderStatus.PENDING   1.81   BACK  1.91               2.0           1.82```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gbf2a1b27d0f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bf2a1b27d0f60050308c5b3c76c5350e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "FT",
            "real_name": "FT",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "taebifarhad",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667998655.905009",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1667999510.634349",
        "reply_users": [
            "U4H19D1D2"
        ],
        "replies": [
            {
                "user": "U4H19D1D2",
                "ts": "1667999510.634349"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1667999510.634349",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k5t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi guys, I've got a flumine specific question. I don't know if I misunderstand something in the way the blotter works. I'm simulating a simple strategy with historical data. In this particular case, at the end all the orders in the markets blotter show up as PENDING, which is very unlikely since there are a lot of them and I take very bad prices just to see if they ever get the status EXECUTION_COMPLETE.\nI collect some of the orders information into a dataframe. This is one example row. Why do I have a "
                            },
                            {
                                "type": "text",
                                "text": "avg_price_matched",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "size_matched",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "profit",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", when the order is still PENDING? By the way the placed_at and completed_at are seconds to start time.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "selection_id  placed_at  completed_at  status                price  side  avg_price_matched  size_matched  profit\n28396755      -348.287   -348.287      OrderStatus.PENDING   1.81   BACK  1.91               2.0           1.82"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "U0478AD7VEU"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1667999510.634349",
        "client_msg_id": "b567e2b0-67d3-466d-ad14-5500c699c20e",
        "text": "without some code to replicate very hard to debug this",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667998655.905009",
        "parent_user_id": "U0478AD7VEU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X=h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "without some code to replicate very hard to debug this"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0478AD7VEU",
        "type": "message",
        "ts": "1668000439.936619",
        "client_msg_id": "f9323747-f594-4c64-841c-185c61eb876b",
        "text": "Problem solved: I had a small but catastrophic typo in the `process_orders` function. An exception lead to the orders beeing stuck in PENDING until the end.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gbf2a1b27d0f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bf2a1b27d0f60050308c5b3c76c5350e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "FT",
            "real_name": "FT",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "taebifarhad",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=l+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Problem solved: I had a small but catastrophic typo in the "
                            },
                            {
                                "type": "text",
                                "text": "process_orders",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " function. An exception lead to the orders beeing stuck in PENDING until the end."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04AD6RAGGH",
        "type": "message",
        "ts": "1668003153.475789",
        "client_msg_id": "5dc3fb5a-917f-4c27-a48f-e588080aee47",
        "text": "Not sure on compatibility with flumine, but in general you have:\n\npytorch or JAX that are pretty efficient and python-friendly.\n\nUsing ML in practice often means converting your model to some lightweight format, check out ONNX for that.  I would be more than happy to discuss further!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "2f5fccb5d023",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-08\/4353229497089_2f5fccb5d0233ef1b00d_72.jpg",
            "first_name": "Rory",
            "real_name": "Rory",
            "display_name": "R",
            "team": "T4G9NBD2M",
            "name": "rorytyrrell2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667995686.597489",
        "parent_user_id": "U02RN7YDRQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g0y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure on compatibility with flumine, but in general you have:\n\npytorch or JAX that are pretty efficient and python-friendly.\n\nUsing ML in practice often means converting your model to some lightweight format, check out ONNX for that.  I would be more than happy to discuss further!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U025AFDS89H",
        "type": "message",
        "ts": "1668005088.082469",
        "client_msg_id": "a8d867e2-9aa0-4d01-8fd0-f1f8f5513f6a",
        "text": "Thanks for the suggestion That Guy",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g7aa6fcd81d9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7aa6fcd81d9a81ea32dba8c2cbb235d5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "James",
            "real_name": "James",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "james.armstrong35",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667997187.339779",
        "parent_user_id": "U025AFDS89H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M5cT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the suggestion That Guy"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBS7QANF3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0155J92A7Q",
        "type": "message",
        "ts": "1668006168.725819",
        "client_msg_id": "81eebded-feb8-405d-8db2-60c68a285631",
        "text": "Nice, thanks! I learned about the LoggingControl thanks to this",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gde8c5d51af5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/de8c5d51af54a5ac7b501f416ddb262c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jorge",
            "display_name": "Jorge",
            "team": "T4G9NBD2M",
            "name": "jgarciam95",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667980836.970459",
        "parent_user_id": "U0155J92A7Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "its55",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice, thanks! I learned about the LoggingControl thanks to this"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1668016566.527149",
        "client_msg_id": "569e7aa4-e285-4008-adbf-64d79d508b86",
        "text": "Got autogluton going fairly quickly so will explore the models on that to start with. Not sure about the trend to try everything then just pick simple best accuracy - the quality of the ones it gets right is more important. I got better results with tf by sticking to one model at a time and playing with the data in terms of changing the feature set, nodes, depth etc. ONNX looks interesting and MS give it some support for Windows so will have a look at that as well. Thanks for suggestions.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667995686.597489",
        "parent_user_id": "U02RN7YDRQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IN3SH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Got autogluton going fairly quickly so will explore the models on that to start with. Not sure about the trend to try everything then just pick simple best accuracy - the quality of the ones it gets right is more important. I got better results with tf by sticking to one model at a time and playing with the data in terms of changing the feature set, nodes, depth etc. ONNX looks interesting and MS give it some support for Windows so will have a look at that as well. Thanks for suggestions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04AD6RAGGH",
        "type": "message",
        "ts": "1668017927.924329",
        "client_msg_id": "98999d02-16bd-419b-80fc-a3912f1e9c29",
        "text": "If AutoGluon is interesting, you can also have a look at PyCaret.   Similar automl framework.\n\nYou are correct about the notion that accuracy is not always the best metric.  Measuring the right thing is hard.  Really hard.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "2f5fccb5d023",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-08\/4353229497089_2f5fccb5d0233ef1b00d_72.jpg",
            "first_name": "Rory",
            "real_name": "Rory",
            "display_name": "R",
            "team": "T4G9NBD2M",
            "name": "rorytyrrell2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667995686.597489",
        "parent_user_id": "U02RN7YDRQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zYGW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If AutoGluon is interesting, you can also have a look at PyCaret.   Similar automl framework.\n\nYou are correct about the notion that accuracy is not always the best metric.  Measuring the right thing is hard.  Really hard."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U02RN7YDRQ9"
                ],
                "count": 1
            }
        ]
    }
]