[
    {
        "user": "U016TGY3676",
        "type": "message",
        "ts": "1658001522.679799",
        "edited": {
            "user": "U016TGY3676",
            "ts": "1658001692.000000"
        },
        "client_msg_id": "e1c36274-ef71-477e-8d9b-ac85454f7ed8",
        "text": "I've been using python for years but have discovered a strange (to me) issue with copying lists in a Flumine strategy. So all of these create a REFERENCE to the same object, however I was expecting a new list\/dereferenced copy:\n\n`atbs = runner.ex.available_to_back[:]\natbs = runner.ex.available_to_back.copy()\natbs = [d for d in runner.ex.available_to_back]`\n\nIf I make changes to elements in `atbs`, they are also changed in the Flumine object  `runner.ex.available_to_back`. The only way to make a real copy is:\n\n`atbs = deepcopy(runner.ex.available_to_back)`\n\nI'm going to hazard a guess that this is due to the list being dict elements, so the shallow copy methods copy the dict references rather than making new ones? Python has probably always done this and I've just not noticed it before...\nJust to clarify, I don't think this is an issue with Flumine.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6a681220e11",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6a681220e11c1a2ed3685375d658dadb.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "birchy",
            "display_name": "birchy",
            "team": "T4G9NBD2M",
            "name": "birchy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fgeV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been using python for years but have discovered a strange (to me) issue with copying lists in a Flumine strategy. So all of these create a REFERENCE to the same object, however I was expecting a new list\/dereferenced copy:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "atbs = runner.ex.available_to_back[:]\n",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "atbs = runner.ex.available_to_back.copy()\n",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "atbs = [d for d in runner.ex.available_to_back]\n",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nIf I make changes to elements in "
                            },
                            {
                                "type": "text",
                                "text": "atbs",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", they are also changed in the Flumine object  "
                            },
                            {
                                "type": "text",
                                "text": "runner.ex.available_to_back",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The only way to make a real copy is:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "atbs = deepcopy(runner.ex.available_to_back)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nI'm going to hazard a guess that this is due to the list being dict elements, so the shallow copy methods copy the dict references rather than making new ones? Python has probably always done this and I've just not noticed it before...\nJust to clarify, I don't think this is an issue with Flumine."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]