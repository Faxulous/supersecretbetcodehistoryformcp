[
    {
        "user": "U05N9773A23",
        "type": "message",
        "ts": "1692782439.375579",
        "client_msg_id": "90f5eba9-ba59-4a65-b270-d380822152e4",
        "text": "Call the listMarketCatalogue endpoint with the following marketFilter: eventTypeIds = 7, marketCountries = \"GB\", marketTypeCodes = \"WIN\". Use the marketStartTime to restrict based on a time range. This will return a list of markets. Take the marketIds from those markets and use them in the stream's marketFilter.marketIds parameter",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g9a60fb53f27",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/9a60fb53f27a5eefe4207d5f5b9ce4bc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "Justice",
            "real_name": "Justice",
            "display_name": "Justice",
            "team": "T4G9NBD2M",
            "name": "bkwdev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692641420.459099",
        "parent_user_id": "U0415903NVB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6AY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Call the listMarketCatalogue endpoint with the following marketFilter: eventTypeIds = 7, marketCountries = \"GB\", marketTypeCodes = \"WIN\". Use the marketStartTime to restrict based on a time range. This will return a list of markets. Take the marketIds from those markets and use them in the stream's marketFilter.marketIds parameter"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "-1",
                "users": [
                    "UBS7QANF3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03N4QBJ0TV",
        "type": "message",
        "ts": "1692784255.188879",
        "client_msg_id": "7de46a4b-2714-43fc-a4df-5a664c40673a",
        "text": "Hey all. Is there a way to use Multiprocessing with <https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py|this example script> for recording market data from recorded markets\/historical data? My attempts to implement it so far aren't working.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g2c8538b47ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2c8538b47ad4bed6facbb148134bb486.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Trex44",
            "real_name": "Trex44",
            "display_name": "Trex44",
            "team": "T4G9NBD2M",
            "name": "c.s.mpharm",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692784255.188879",
        "reply_count": 8,
        "reply_users_count": 3,
        "latest_reply": "1692884515.530409",
        "reply_users": [
            "U4H19D1D2",
            "U03N4QBJ0TV",
            "U01D23DDMTQ"
        ],
        "replies": [
            {
                "user": "U4H19D1D2",
                "ts": "1692787677.029149"
            },
            {
                "user": "U03N4QBJ0TV",
                "ts": "1692791278.384909"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1692792363.180089"
            },
            {
                "user": "U03N4QBJ0TV",
                "ts": "1692811926.854019"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1692812856.406159"
            },
            {
                "user": "U01D23DDMTQ",
                "ts": "1692823740.756959"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1692861244.694849"
            },
            {
                "user": "U03N4QBJ0TV",
                "ts": "1692884515.530409"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1692884515.530409",
        "attachments": [
            {
                "id": 1,
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py | examplestreaminghistorical.py>",
                "text": "```\nimport logging\n\nimport betfairlightweight\nfrom betfairlightweight import StreamListener\n\n\"\"\"\nData needs to be downloaded from:\n    <https:\/\/historicdata.betfair.com>\n    \nsmart-open library recommended for opening bz2\/gz files\n\"\"\"\n\n# setup logging\nlogging.basicConfig(level=<http:\/\/logging.INFO|logging.INFO>)\n\n# create trading instance (don't need username\/password)\ntrading = betfairlightweight.APIClient(\"username\", \"password\")\n\n# create listener\nlistener = StreamListener(max_latency=None)\n\n# create historical stream (update file_path to your file location)\nstream = trading.streaming.create_historical_generator_stream(\n    file_path=\"\/tmp\/BASIC-1.132153978\",\n    listener=listener,\n)\n\n# create generator\ngen = stream.get_generator()\n\n# print marketBooks\nfor market_books in gen():\n    for market_book in market_books:\n        print(market_book)\n\n# print based on seconds to start\nfor market_books in gen():\n    for market_book in market_books:\n        seconds_to_start = (\n            market_book.market_definition.market_time - market_book.publish_time\n        ).total_seconds()\n        if seconds_to_start < 100:\n            print(market_book.market_id, seconds_to_start, market_book.total_matched)\n\n        # print winner details once market is closed\n        if market_book.status == \"CLOSED\":\n            for runner in market_book.runners:\n                if runner.status == \"WINNER\":\n                    print(\n                        \"{0}: {1} with sp of {2}\".format(\n                            runner.status, runner.selection_id, runner.sp.actual_sp\n                        )\n                    )\n\n# record prices to a file\nwith open(\"output.txt\", \"w\") as output:\n    output.write(\"Time,MarketId,Status,Inplay,SelectionId,LastPriceTraded\\n\")\n\nfor market_books in gen():\n    for market_book in market_books:\n        with open(\"output.txt\", \"a\") as output:\n            for runner in market_book.runners:\n                # how to get runner details from the market definition\n                market_def = market_book.market_definition\n                runners_dict = {\n                    (runner.selection_id, runner.handicap): runner\n                    for runner in market_def.runners\n                }\n                runner_def = runners_dict.get((runner.selection_id, runner.handicap))\n\n                output.write(\n                    \"%s,%s,%s,%s,%s,%s\\n\"\n                    % (\n                        market_book.publish_time,\n                        market_book.market_id,\n                        market_book.status,\n                        market_book.inplay,\n                        runner.selection_id,\n                        runner.last_price_traded or \"\",\n                    )\n                )\n\n```",
                "title": "<https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py | examplestreaminghistorical.py>",
                "footer": "<https:\/\/github.com\/betcode-org\/betfair|betcode-org\/betfair>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4WJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey all. Is there a way to use Multiprocessing with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/examples\/examplestreaminghistorical.py",
                                "text": "this example script"
                            },
                            {
                                "type": "text",
                                "text": " for recording market data from recorded markets\/historical data? My attempts to implement it so far aren't working."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1692787677.029149",
        "client_msg_id": "2be797d0-41f9-4c34-85cc-a30f4b125bcb",
        "text": "What are you trying to do? \/ got code?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692784255.188879",
        "parent_user_id": "U03N4QBJ0TV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ej8B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are you trying to do? \/ got code?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03N4QBJ0TV",
        "type": "message",
        "ts": "1692791278.384909",
        "client_msg_id": "4151d324-8da8-432a-80ba-f5e9ba3bb52f",
        "text": "I am using it to create 1 second snapshots from pro data and save to csv. So save the ltp every 1 second. Works great but I figured there would be a faster way to do it across multiple files if I could use multiprocessing.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g2c8538b47ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2c8538b47ad4bed6facbb148134bb486.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Trex44",
            "real_name": "Trex44",
            "display_name": "Trex44",
            "team": "T4G9NBD2M",
            "name": "c.s.mpharm",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692784255.188879",
        "parent_user_id": "U03N4QBJ0TV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YOm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am using it to create 1 second snapshots from pro data and save to csv. So save the ltp every 1 second. Works great but I figured there would be a faster way to do it across multiple files if I could use multiprocessing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1692792363.180089",
        "client_msg_id": "66498376-bfdc-4a67-a52e-808239363f20",
        "text": "I do this by using a tmp file per process and then just combine into one at the end",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692784255.188879",
        "parent_user_id": "U03N4QBJ0TV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "19g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do this by using a tmp file per process and then just combine into one at the end"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03N4QBJ0TV",
        "type": "message",
        "ts": "1692811926.854019",
        "client_msg_id": "7d3e2f1f-cbe8-4361-ba44-d0ab5128f72d",
        "text": "I don't mind about the output being in multiple files. Its just that it is clearly going through the file list sequentially whereas I figured if I could get multiprocessing to work it would work on more than one file at once",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g2c8538b47ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2c8538b47ad4bed6facbb148134bb486.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Trex44",
            "real_name": "Trex44",
            "display_name": "Trex44",
            "team": "T4G9NBD2M",
            "name": "c.s.mpharm",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692784255.188879",
        "parent_user_id": "U03N4QBJ0TV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xT64",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't mind about the output being in multiple files. Its just that it is clearly going through the file list sequentially whereas I figured if I could get multiprocessing to work it would work on more than one file at once"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1692812856.406159",
        "client_msg_id": "26358178-f126-4d7e-910f-7e9a74564658",
        "text": "share your code then",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692784255.188879",
        "parent_user_id": "U03N4QBJ0TV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B14",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "share your code then"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01D23DDMTQ",
        "type": "message",
        "ts": "1692823740.756959",
        "edited": {
            "user": "U01D23DDMTQ",
            "ts": "1692823818.000000"
        },
        "client_msg_id": "DD3E25F4-2350-4187-96C9-8AE3AF4DB79D",
        "text": "With thanks once again to Liam, isn’t this what you’re looking for. Works for me. <https:\/\/betcode-org.github.io\/flumine\/performance\/|https:\/\/betcode-org.github.io\/flumine\/performance\/> I create a CSV output per market. Subsequently you can merge or leave as 1:1 for your market PRO stream files.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "5d6a9e5a85c0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-06-26\/2219792322468_5d6a9e5a85c01e3abc9e_72.png",
            "first_name": "Andrew",
            "real_name": "Andrew",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "agruskin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692784255.188879",
        "parent_user_id": "U03N4QBJ0TV",
        "attachments": [
            {
                "from_url": "https:\/\/betcode-org.github.io\/flumine\/performance\/",
                "service_icon": "https:\/\/betcode-org.github.io\/flumine\/images\/logo.png",
                "id": 1,
                "original_url": "https:\/\/betcode-org.github.io\/flumine\/performance\/",
                "fallback": "Performance - flumine",
                "text": "Betting trading framework",
                "title": "Performance - flumine",
                "title_link": "https:\/\/betcode-org.github.io\/flumine\/performance\/",
                "service_name": "betcode-org.github.io"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0h3y\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With thanks once again to Liam, isn’t this what you’re looking for. Works for me. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/betcode-org.github.io\/flumine\/performance\/",
                                "text": "https:\/\/betcode-org.github.io\/flumine\/performance\/"
                            },
                            {
                                "type": "text",
                                "text": " I create a CSV output per market. Subsequently you can merge or leave as 1:1 for your market PRO stream files."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]