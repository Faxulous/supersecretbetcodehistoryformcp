[
    {
        "subtype": "thread_broadcast",
        "user": "U02B32JBR0B",
        "thread_ts": "1651762178.677089",
        "root": {
            "user": "UFTBRB3F1",
            "type": "message",
            "ts": "1651762178.677089",
            "client_msg_id": "d80c48e3-6585-403c-ac72-732c6b14e2f8",
            "text": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/controls\/backtestloggingcontrol.py>",
            "team": "T4G9NBD2M",
            "thread_ts": "1651762178.677089",
            "reply_count": 1,
            "reply_users_count": 1,
            "latest_reply": "1651934081.584259",
            "reply_users": [
                "U02B32JBR0B"
            ],
            "replies": [
                {
                    "user": "U02B32JBR0B",
                    "ts": "1651934081.584259"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "id": 1,
                    "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                    "color": "24292f",
                    "bot_id": "B021ZJYSBMW",
                    "app_unfurl_url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/controls\/backtestloggingcontrol.py",
                    "is_app_unfurl": true,
                    "app_id": "A01BP7R4KNY",
                    "fallback": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/controls\/backtestloggingcontrol.py | backtestloggingcontrol.py>",
                    "text": "```\nimport csv\nimport logging\nfrom flumine.controls.loggingcontrols import LoggingControl\nfrom flumine.order.ordertype import OrderTypes\n\nlogger = logging.getLogger(__name__)\n\nFIELDNAMES = [\n    \"bet_id\",\n    \"strategy_name\",\n    \"market_id\",\n    \"selection_id\",\n    \"trade_id\",\n    \"date_time_placed\",\n    \"price\",\n    \"price_matched\",\n    \"size\",\n    \"size_matched\",\n    \"profit\",\n    \"side\",\n    \"elapsed_seconds_executable\",\n    \"order_status\",\n    \"market_note\",\n    \"trade_notes\",\n    \"order_notes\",\n]\n\n\nclass BacktestLoggingControl(LoggingControl):\n    NAME = \"BACKTEST_LOGGING_CONTROL\"\n\n    def __init__(self, *args, **kwargs):\n        super(BacktestLoggingControl, self).__init__(*args, **kwargs)\n        self._setup()\n\n    def _setup(self):\n        with open(\"orders.txt\", \"w\") as m:\n            csv_writer = csv.DictWriter(m, delimiter=\",\", fieldnames=FIELDNAMES)\n            csv_writer.writeheader()\n\n    def _process_cleared_orders_meta(self, event):\n        orders = event.event\n        with open(\"orders.txt\", \"a\") as m:\n            for order in orders:\n                if order.order_type.ORDER_TYPE == OrderTypes.LIMIT:\n                    size = order.order_type.size\n                else:\n                    size = order.order_type.liability\n                if order.order_type.ORDER_TYPE == OrderTypes.MARKET_ON_CLOSE:\n                    price = None\n                else:\n                    price = order.order_type.price\n                try:\n                    order_data = {\n                        \"bet_id\": order.bet_id,\n                        \"strategy_name\": order.trade.strategy,\n                        \"market_id\": order.market_id,\n                        \"selection_id\": order.selection_id,\n                        \"trade_id\": order.trade.id,\n                        \"date_time_placed\": order.responses.date_time_placed,\n                        \"price\": price,\n                        \"price_matched\": order.average_price_matched,\n                        \"size\": size,\n                        \"size_matched\": order.size_matched,\n                        \"profit\": order.simulated.profit,\n                        \"side\": order.side,\n                        \"elapsed_seconds_executable\": order.elapsed_seconds_executable,\n                        \"order_status\": order.status.value,\n                        \"market_note\": order.trade.market_notes,\n                        \"trade_notes\": order.trade.notes_str,\n                        \"order_notes\": order.notes_str,\n                    }\n                    csv_writer = csv.DictWriter(m, delimiter=\",\", fieldnames=FIELDNAMES)\n                    csv_writer.writerow(order_data)\n                except Exception as e:\n                    logger.error(\n                        \"_process_cleared_orders_meta: %s\" % e,\n                        extra={\"order\": order, \"error\": e},\n                    )\n\n        <http:\/\/logger.info|logger.info>(\"Orders updated\", extra={\"order_count\": len(orders)})\n\n    def _process_cleared_markets(self, event):\n        cleared_markets = event.event\n        for cleared_market in cleared_markets.orders:\n            <http:\/\/logger.info|logger.info>(\n                \"Cleared market\",\n                extra={\n                    \"market_id\": cleared_market.market_id,\n                    \"bet_count\": cleared_market.bet_count,\n                    \"profit\": cleared_market.profit,\n                    \"commission\": cleared_market.commission,\n                },\n            )\n\n```",
                    "title": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/controls\/backtestloggingcontrol.py | backtestloggingcontrol.py>",
                    "footer": "<https:\/\/github.com\/betcode-org\/flumine|betcode-org\/flumine>",
                    "mrkdwn_in": [
                        "text"
                    ]
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "4ygpM",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "link",
                                    "url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/controls\/backtestloggingcontrol.py"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1651934081.584259",
        "client_msg_id": "3f518a9f-716a-4bc4-91e1-26cfb27c0d58",
        "text": "Tried implementing the code, but having some issues. Swapped from\n```\"profit\": order.simulated.profit```\nto:\n```\"profit\": order.profit```\nbut was hitting some issues, logger shows:\n```_process_cleared_orders_meta: 'BetfairOrder' object has no attribute 'profit'```\ntook a look at the `BaseOrder` class and the `BetfairOrder` class on github but couldn't find any attributes relating to profit. Am I able to get profit from logging control?  Whats the best way of also getting the profit along with the bets?",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EQnU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tried implementing the code, but having some issues. Swapped from\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"profit\": order.simulated.profit"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"profit\": order.profit"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but was hitting some issues, logger shows:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "_process_cleared_orders_meta: 'BetfairOrder' object has no attribute 'profit'"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "took a look at the "
                            },
                            {
                                "type": "text",
                                "text": "BaseOrder",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " class and the "
                            },
                            {
                                "type": "text",
                                "text": "BetfairOrder",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " class on github but couldn't find any attributes relating to profit. Am I able to get profit from logging control?  Whats the best way of also getting the profit along with the bets?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U011VL3CA2Y",
        "type": "message",
        "ts": "1651934329.197819",
        "client_msg_id": "9ee800be-5833-4396-852d-e280b40316f7",
        "text": "profit is a property, that will only be available if there is a cleared_order object within the order",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g1ec6e88d1e4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1ec6e88d1e4dd0bff349d83e9edba6bd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Ruben",
            "real_name": "Ruben",
            "display_name": "Ruben",
            "team": "T4G9NBD2M",
            "name": "tduqruqtgtpiioibww",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6DBx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "profit is a property, that will only be available if there is a cleared_order object within the order"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U011VL3CA2Y",
        "type": "message",
        "ts": "1651934347.916179",
        "client_msg_id": "99ee6647-af9c-4b27-861f-034ff2509d17",
        "text": "you can do `0 if not order.cleared_order else order.cleared_order.profit`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g1ec6e88d1e4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1ec6e88d1e4dd0bff349d83e9edba6bd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Ruben",
            "real_name": "Ruben",
            "display_name": "Ruben",
            "team": "T4G9NBD2M",
            "name": "tduqruqtgtpiioibww",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ffdn\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you can do "
                            },
                            {
                                "type": "text",
                                "text": "0 if not order.cleared_order else order.cleared_order.profit",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U011VL3CA2Y",
        "type": "message",
        "ts": "1651934376.013999",
        "client_msg_id": "60b3954d-4d18-45c4-af6b-f4a772acf48c",
        "text": "this is what I do anyways",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g1ec6e88d1e4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1ec6e88d1e4dd0bff349d83e9edba6bd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Ruben",
            "real_name": "Ruben",
            "display_name": "Ruben",
            "team": "T4G9NBD2M",
            "name": "tduqruqtgtpiioibww",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YoqrT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is what I do anyways"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02B32JBR0B",
        "type": "message",
        "ts": "1651935598.371379",
        "client_msg_id": "1515aa0f-a814-46ff-9b90-a1825656408b",
        "text": "Amazing, got it working with that, thanks!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g0632106e050",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0632106e05050875d3005a7872ab742a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Zhou",
            "display_name": "Ivan Zhou",
            "team": "T4G9NBD2M",
            "name": "ivan.zhou",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jZI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Amazing, got it working with that, thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1651936222.912079",
        "client_msg_id": "513CEC65-BA15-4BB7-AB8A-923CF0752B1E",
        "text": "I will add that property next time ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DzvUa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I will add that property next time "
                            }
                        ]
                    }
                ]
            }
        ]
    }
]