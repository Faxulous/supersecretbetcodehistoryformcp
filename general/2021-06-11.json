[
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1623404322.376300",
        "client_msg_id": "b2b1891d-177b-4f92-928f-47740e1aea54",
        "text": "Basic data is utterly useless",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623404322.376300",
        "reply_count": 7,
        "reply_users_count": 2,
        "latest_reply": "1629360131.290600",
        "reply_users": [
            "U02BG9NUJF6",
            "UBS7QANF3"
        ],
        "replies": [
            {
                "user": "U02BG9NUJF6",
                "ts": "1629358062.289100"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1629358177.289600"
            },
            {
                "user": "U02BG9NUJF6",
                "ts": "1629358266.289800"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1629358854.290000"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1629358863.290200"
            },
            {
                "user": "U02BG9NUJF6",
                "ts": "1629359874.290400"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1629360131.290600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z5ua",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Basic data is utterly useless"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1623404444.376800",
        "client_msg_id": "4801c412-2e4f-4278-8ec6-e8eb5957db97",
        "text": "Generating a data frame from the prices files is simple though:\n\n```from typing import Union\n\nimport betfairlightweight\nimport pandas as pd\nimport seaborn as sns\nimport smart_open\nfrom betfairlightweight.resources.bettingresources import MarketBook\nfrom betfairlightweight.streaming import StreamListener\nfrom unittest.mock import patch\n\n\ndef market_book_to_data_frame(market_book: Union[MarketBook, dict]) -&gt; pd.DataFrame:\n    if type(market_book) is MarketBook:\n        market_book = market_book._data\n\n    return pd.DataFrame(\n        {\n            'market_id': market_book['marketId'],\n            'inplay': market_book['inplay'],\n            'selection_id': runner['selectionId'],\n            'side': side,\n            'depth': depth,\n            'price': price_size['price'],\n            'size': price_size['size'],\n            **({'publish_time': market_book['publishTime']} if 'publishTime' in market_book else {})\n        }\n        for runner in market_book['runners']\n        for side in ['Back', 'Lay']\n        for depth, price_size in enumerate(runner.get('ex', {}).get(f'availableTo{side}', []))\n    )\n\n\ndef file_to_data_frame(path_to_betfair_price_file: str) -&gt; pd.DataFrame:\n    trading = betfairlightweight.APIClient(username='', password='', app_key='')\n    stream = trading.streaming.create_historical_generator_stream(\n        directory=path_to_betfair_price_file,\n        listener=StreamListener(max_latency=None, lightweight=True)\n    )\n\n    with patch(\"builtins.open\", smart_open.open):\n        g = stream.get_generator()\n        return pd.concat(market_book_to_data_frame(mbs[0]) for mbs in g())```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NfM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Generating a data frame from the prices files is simple though:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "from typing import Union\n\nimport betfairlightweight\nimport pandas as pd\nimport seaborn as sns\nimport smart_open\nfrom betfairlightweight.resources.bettingresources import MarketBook\nfrom betfairlightweight.streaming import StreamListener\nfrom unittest.mock import patch\n\n\ndef market_book_to_data_frame(market_book: Union[MarketBook, dict]) -> pd.DataFrame:\n    if type(market_book) is MarketBook:\n        market_book = market_book._data\n\n    return pd.DataFrame(\n        {\n            'market_id': market_book['marketId'],\n            'inplay': market_book['inplay'],\n            'selection_id': runner['selectionId'],\n            'side': side,\n            'depth': depth,\n            'price': price_size['price'],\n            'size': price_size['size'],\n            **({'publish_time': market_book['publishTime']} if 'publishTime' in market_book else {})\n        }\n        for runner in market_book['runners']\n        for side in ['Back', 'Lay']\n        for depth, price_size in enumerate(runner.get('ex', {}).get(f'availableTo{side}', []))\n    )\n\n\ndef file_to_data_frame(path_to_betfair_price_file: str) -> pd.DataFrame:\n    trading = betfairlightweight.APIClient(username='', password='', app_key='')\n    stream = trading.streaming.create_historical_generator_stream(\n        directory=path_to_betfair_price_file,\n        listener=StreamListener(max_latency=None, lightweight=True)\n    )\n\n    with patch(\"builtins.open\", smart_open.open):\n        g = stream.get_generator()\n        return pd.concat(market_book_to_data_frame(mbs[0]) for mbs in g())"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQ379K087",
        "type": "message",
        "ts": "1623409158.378700",
        "client_msg_id": "bed25e82-46f1-49d8-a58b-91c4c8ade6d4",
        "text": "Hi guys, is anyone on here a sports writer, working in online magazines\/newspapers etc by any chance? Potential job opportunity for you if so. Or if anyone knows anyone who is let me know. Cheers.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g454a622d575",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/454a622d57566f9f550d99ae30d74287.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "",
            "real_name": "James McKenzie",
            "display_name": "James McKenzie",
            "team": "T4G9NBD2M",
            "name": "jamesmckenzie4",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R+sC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi guys, is anyone on here a sports writer, working in online magazines\/newspapers etc by any chance? Potential job opportunity for you if so. Or if anyone knows anyone who is let me know. Cheers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U025GAD181E",
        "text": "<@U025GAD181E> has joined the channel",
        "type": "message",
        "ts": "1623415320.378900"
    }
]