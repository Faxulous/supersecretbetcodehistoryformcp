[
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1613203404.414000",
        "client_msg_id": "8147FC6A-49D5-410E-838C-00BE4A0CA49D",
        "text": "I’ve done many sports previously including football but no I am currently 100% tennis",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vOr2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve done many sports previously including football but no I am currently 100% tennis"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U016535QCJ2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013MLED3V1",
        "type": "message",
        "ts": "1613205865.416300",
        "client_msg_id": "8a1b21d4-e438-4c11-8068-2c09dde92ee6",
        "text": "<@U01NDEXURBK> most of developers here use different programming languages. My bots are programmed in C# and F# so .net programming languages, but I use R and python to integrate ML to my F# betfair bots.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g76de2b0594d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/76de2b0594d8598d76169231046f271a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "StefanBelo",
            "real_name": "StefanBelo",
            "display_name": "Stefan",
            "team": "T4G9NBD2M",
            "name": "stefanbelopotocan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rm2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01NDEXURBK"
                            },
                            {
                                "type": "text",
                                "text": " most of developers here use different programming languages. My bots are programmed in C# and F# so .net programming languages, but I use R and python to integrate ML to my F# betfair bots."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U01NR1BTXME",
        "text": "<@U01NR1BTXME> has joined the channel",
        "type": "message",
        "ts": "1613221048.418300"
    },
    {
        "user": "U01A3B4SBDZ",
        "type": "message",
        "ts": "1613232088.419800",
        "client_msg_id": "e9961b32-683e-44da-a72e-f0e07dcbfdd0",
        "text": "I am also developing in C# Ryan. But as Misha says, plenty of reason to stick around here anyway. This is the most interesting forum I have participated in (and I have been doing this for quite a few years :slightly_smiling_face: )",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gab79d3fadbd",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ab79d3fadbd18abc3a25aa548a2a392a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "jptrader",
            "display_name": "jp",
            "team": "T4G9NBD2M",
            "name": "petterto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PRH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am also developing in C# Ryan. But as Misha says, plenty of reason to stick around here anyway. This is the most interesting forum I have participated in (and I have been doing this for quite a few years "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " )"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFF3N7K9",
        "type": "message",
        "ts": "1613250135.420300",
        "client_msg_id": "14fced97-f252-4214-9343-c288cedeaea2",
        "text": "hey, does anyone know where I can find the betfair odds ticks?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gc6f16eb1052",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8c6f16eb1052bb1f12a451a9e89e72f7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Collins",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "qemtek",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/RX\/x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hey, does anyone know where I can find the betfair odds ticks?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFF3N7K9",
        "type": "message",
        "ts": "1613250151.420600",
        "client_msg_id": "6d1a036b-251a-47a0-96cf-30dcac504064",
        "text": "to avoid placing bets on invalid prices",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gc6f16eb1052",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8c6f16eb1052bb1f12a451a9e89e72f7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Collins",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "qemtek",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MThA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to avoid placing bets on invalid prices"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFTBRB3F1",
        "type": "message",
        "ts": "1613250238.420800",
        "client_msg_id": "f739098a-b648-4edf-b60e-b4d0613ec916",
        "text": "<https:\/\/github.com\/liampauling\/flumine\/blob\/master\/flumine\/utils.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g771e110be94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a771e110be945b86bede9d5c1bb551e3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Newbie99",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "vjmehra",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[liampauling\/flumine] flumine\/utils.py",
                "text": "```\nimport uuid\nimport logging\nimport hashlib\nfrom collections import defaultdict\nfrom typing import Optional, Tuple, Callable\nfrom decimal import Decimal, ROUND_HALF_UP\nfrom betfairlightweight.resources.bettingresources import MarketBook, RunnerBook\n\nfrom . import config\nfrom .exceptions import FlumineException\n\nlogger = logging.getLogger(__name__)\n\nCUTOFFS = (\n    (2, 100),\n    (3, 50),\n    (4, 20),\n    (6, 10),\n    (10, 5),\n    (20, 2),\n    (30, 1),\n    (50, 0.5),\n    (100, 0.2),\n    (1000, 0.1),\n)\nMIN_PRICE = 1.01\nMAX_PRICE = 1000\n\n\ndef create_short_uuid() -&gt; str:\n    return str(uuid.uuid4())[:8]\n\n\ndef file_line_count(file_path: str) -&gt; int:\n    with open(file_path) as f:\n        for i, l in enumerate(f):\n            pass\n    return i + 1\n\n\ndef chunks(l: list, n: int) -&gt; list:\n    for i in range(0, len(l), n):\n        yield l[i : i + n]\n\n\ndef batch_orders(orders: list) -&gt; dict:\n    # batch by market_version -&gt; batch\n    _return_orders = defaultdict(list)  # market_version: [[&lt;Order&gt;, ], .. ]\n    a = _split_orders_by(orders, \"market_version\")\n    for market_version, a_orders in a.items():\n        b = _split_orders_by(a_orders, \"batch\", True)\n        for batch, b_orders in b.items():\n            _temp = []\n            for order, _ in b_orders:\n                if batch is False:\n                    _return_orders[market_version].append([order])\n                else:\n                    _temp.append(order)\n            if _temp:\n                _return_orders[market_version].append(_temp)\n    return _return_orders\n\n\ndef _split_orders_by(orders: list, by: str, default=None) -&gt; dict:\n    res = defaultdict(list)\n    for order, request_data in orders:\n        res[request_data.get(by, default)].append((order, request_data))\n    return res\n\n\ndef create_cheap_hash(txt: str, length: int = 15) -&gt; str:\n    # This is just a hash for debugging purposes.\n    #    It does not need to be unique, just fast and short.\n    # <https:\/\/stackoverflow.com\/questions\/14023350>\n    hash_ = hashlib.sha1()\n    hash_.update(txt.encode())\n    return hash_.hexdigest()[:length]\n\n\ndef as_dec(value):\n    return Decimal(str(value))\n\n\ndef arange(start, stop, step):\n    while start &lt; stop:\n        yield start\n        start += step\n\n\ndef make_prices(min_price, cutoffs):\n    prices = []\n    cursor = as_dec(min_price)\n    for cutoff, step in cutoffs:\n        prices.extend(arange(as_dec(cursor), as_dec(cutoff), as_dec(1 \/ step)))\n        cursor = cutoff\n    prices.append(as_dec(MAX_PRICE))\n    return prices\n\n\nPRICES = make_prices(MIN_PRICE, CUTOFFS)\n\n\ndef get_nearest_price(price, cutoffs=CUTOFFS):\n    if price &lt;= MIN_PRICE:\n        return MIN_PRICE\n    if price &gt; MAX_PRICE:\n        return MAX_PRICE\n    price = as_dec(price)\n    for cutoff, step in cutoffs:\n        if price &lt; cutoff:\n            break\n    step = as_dec(step)\n    return float((price * step).quantize(2, ROUND_HALF_UP) \/ step)\n\n\ndef get_price(data: list, level: int) -&gt; Optional[float]:\n    try:\n        return data[level][\"price\"]\n    except KeyError:\n        return\n    except IndexError:\n        return\n    except TypeError:\n        return\n\n\ndef get_size(data: list, level: int) -&gt; Optional[float]:\n    try:\n        return data[level][\"size\"]\n    except KeyError:\n        return\n    except IndexError:\n        return\n    except TypeError:\n        return\n\n\ndef get_sp(runner: RunnerBook) -&gt; Optional[float]:\n    if isinstance(runner.sp, list):\n        return\n    elif runner.sp is None:\n        return\n    elif runner.sp.actual_sp == \"NaN\":\n        return\n    else:\n        return runner.sp.actual_sp\n\n\ndef price_ticks_away(price: float, n_ticks: int) -&gt; float:\n    try:\n        price_index = PRICES.index(as_dec(price))\n        if price_index + n_ticks &lt; 0:\n            return 1.01\n        return float(PRICES[price_index + n_ticks])\n    except IndexError:\n        return 1000\n\n\n# todo LRU cache?\n# JH: LRU cache does not work with list inputs as they are unhashable.\n#     So might need to refactor mb and ml into tuples.\ndef calculate_matched_exposure(mb: list, ml: list) -&gt; Tuple:\n    \"\"\"Calculates exposure based on list\n    of (price, size)\n    returns the tuple (profit_if_win, profit_if_lose)\n    \"\"\"\n    if not mb and not ml:\n        return 0.0, 0.0\n    back_exp = sum(-i[1] for i in mb)\n    back_profit = sum((i[0] - 1) * i[1] for i in mb)\n    lay_exp = sum((i[0] - 1) * -i[1] for i in ml)\n    lay_profit = sum(i[1] for i in ml)\n    _win = back_profit + lay_exp\n    _lose = lay_profit + back_exp\n    return round(_win, 2), round(_lose, 2)\n\n\ndef calculate_unmatched_exposure(ub: list, ul: list) -&gt; Tuple:\n    \"\"\"Calculates worse-case exposure based on list\n    of (price, size)\n    returns the tuple (profit_if_win, profit_if_lose)\n\n    The worst case profit_if_win arises if all lay bets are matched and the selection wins.\n    The worst case profit_if_lose arises if all back bets are matched and the selection loses.\n\n    \"\"\"\n    if not ub and not ul:\n        return 0.0, 0.0\n    back_exp = sum(-i[1] for i in ub)\n    lay_exp = sum((i[0] - 1) * -i[1] for i in ul)\n    return round(lay_exp, 2), round(back_exp, 2)\n\n\n# todo LRU cache?\ndef wap(matched: list) -&gt; Tuple[float, float]:\n    if not matched:\n        return 0, 0\n    a, b = 0, 0\n    for match in matched:\n        a += match[1] * match[2]\n        b += match[2]\n    if b == 0 or a == 0:\n        return 0, 0\n    else:\n        return round(b, 2), round(a \/ b, 2)\n\n\ndef call_check_market(\n    strategy_check_market: Callable, market, market_book: MarketBook\n) -&gt; bool:\n    try:\n        return strategy_check_market(market, market_book)\n    except FlumineException as e:\n        logger.error(\n            \"FlumineException %s in strategy_check_market %s %s\"\n            % (e, strategy_check_market, market.market_id),\n            exc_info=True,\n        )\n    except Exception as e:\n        logger.critical(\n            \"Unknown error %s in strategy_check_market %s %s\"\n            % (e, strategy_check_market, market.market_id),\n            exc_info=True,\n        )\n        if config.raise_errors:\n            raise\n    return False\n\n\ndef call_process_market_book(\n    strategy_process_market_book: Callable, market, market_book: MarketBook\n) -&gt; None:\n    try:\n        strategy_process_market_book(market, market_book)\n    except FlumineException as e:\n        logger.error(\n            \"FlumineException %s in strategy_process_market_book %s %s\"\n            % (e, strategy_process_market_book, market.market_id),\n            exc_info=True,\n        )\n    except Exception as e:\n        logger.critical(\n            \"Unknown error %s in strategy_process_market_book %s %s\"\n            % (e, strategy_process_market_book, market.market_id),\n            exc_info=True,\n        )\n        if config.raise_errors:\n            raise\n\n\ndef get_runner_book(\n    market_book: MarketBook, selection_id: int, handicap=0\n) -&gt; Optional[RunnerBook]:\n    \"\"\"Returns runner book based on selection id.\"\"\"\n    for runner_book in market_book.runners:\n        if (\n            runner_book.selection_id == selection_id\n            and runner_book.handicap == handicap\n        ):\n            return runner_book\n\n\ndef get_market_notes(market, selection_id: int) -&gt; Optional[str]:\n    \"\"\"Returns a string of notes for a runner,\n    currently 'back,lay,last_price_traded'\n    \"\"\"\n    runner = get_runner_book(market.market_book, selection_id)\n    if runner:\n        return \"{0},{1},{2}\".format(\n            get_price(runner.ex.available_to_back, 0),\n            get_price(runner.ex.available_to_lay, 0),\n            runner.last_price_traded,\n        )\n\n\ndef get_event_ids(markets: list, event_type_id: str) -&gt; list:\n    event_ids = []\n    for market in markets:\n        if not market.closed and market.event_type_id == event_type_id:\n            event_ids.append(market.event_id)\n    return list(set(event_ids))\n\n```",
                "title": "flumine\/utils.py",
                "footer": "<https:\/\/github.com\/liampauling\/flumine|liampauling\/flumine>",
                "id": 1,
                "title_link": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/flumine\/utils.py",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/flumine\/utils.py",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tLa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/flumine\/utils.py"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFTBRB3F1",
        "type": "message",
        "ts": "1613250264.421200",
        "client_msg_id": "66c4941c-6a2b-410c-8517-3142c8b30023",
        "text": "The function is already there :slightly_smiling_face:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g771e110be94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a771e110be945b86bede9d5c1bb551e3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Newbie99",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "vjmehra",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Oooa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The function is already there "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFF3N7K9",
        "type": "message",
        "ts": "1613250820.421400",
        "client_msg_id": "bcc05ff3-e128-4120-83d2-ef9aa3683faa",
        "text": "ooh awesome, thanks!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gc6f16eb1052",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8c6f16eb1052bb1f12a451a9e89e72f7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Collins",
            "display_name": "Chris",
            "team": "T4G9NBD2M",
            "name": "qemtek",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BBeG6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ooh awesome, thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U01NEA8BBCZ",
        "text": "<@U01NEA8BBCZ> has joined the channel",
        "type": "message",
        "ts": "1613257327.421600"
    }
]