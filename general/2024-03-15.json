[
    {
        "user": "U05V9E7JA58",
        "type": "message",
        "ts": "1710513630.299069",
        "edited": {
            "user": "U05V9E7JA58",
            "ts": "1710513791.000000"
        },
        "client_msg_id": "2dbbd14c-498f-4104-b349-1df88b809f03",
        "text": "Hi folks, I'm looking to place a limit order where the unfilled volume get automatically cancelled after 3 seconds. I've been playing around with time_in_force but I can't get it to work. Here's what I'm attempting:\norder = trade.create_order(\n\tside=\"BACK\",\n\torder_type=LimitOrder(5, 5,time_in_force=3),\n\tnotes=OrderedDict(lay=actualLay, back=actualBack),\n)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "cc7dc83644f0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-05\/5995483702786_cc7dc83644f0419b2460_72.png",
            "first_name": "Tony",
            "real_name": "Tony Holder",
            "display_name": "tone",
            "team": "T4G9NBD2M",
            "name": "tjwhold",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710513630.299069",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1710522028.780029",
        "reply_users": [
            "U05V9E7JA58",
            "U04NWADNCFR",
            "UQL0QDEKA",
            "UBS7QANF3"
        ],
        "replies": [
            {
                "user": "U05V9E7JA58",
                "ts": "1710514392.290409"
            },
            {
                "user": "U04NWADNCFR",
                "ts": "1710515660.458889"
            },
            {
                "user": "UQL0QDEKA",
                "ts": "1710519430.434399"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1710520469.185369"
            },
            {
                "user": "U05V9E7JA58",
                "ts": "1710522028.780029"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jVIdb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi folks, I'm looking to place a limit order where the unfilled volume get automatically cancelled after 3 seconds. I've been playing around with time_in_force but I can't get it to work. Here's what I'm attempting:\norder = trade.create_order(\n\tside=\"BACK\",\n\torder_type=LimitOrder(5, 5,time_in_force=3),\n\tnotes=OrderedDict(lay=actualLay, back=actualBack),\n)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05V9E7JA58",
        "type": "message",
        "ts": "1710514392.290409",
        "client_msg_id": "16b08a80-6df6-4375-b6fc-80fb0dcd0ca7",
        "text": "I think what I need is time_in_force=\"FILL_OR_KILL\" but only after 3 seconds have elapsed. My guess is that I have to handle this myself process_orders?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "cc7dc83644f0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-05\/5995483702786_cc7dc83644f0419b2460_72.png",
            "first_name": "Tony",
            "real_name": "Tony Holder",
            "display_name": "tone",
            "team": "T4G9NBD2M",
            "name": "tjwhold",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710513630.299069",
        "parent_user_id": "U05V9E7JA58",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tlC7J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think what I need is time_in_force=\"FILL_OR_KILL\" but only after 3 seconds have elapsed. My guess is that I have to handle this myself process_orders?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04NWADNCFR",
        "type": "message",
        "ts": "1710515660.458889",
        "client_msg_id": "fc523436-0552-405a-8672-f0dd9310b3d6",
        "text": "process_orders is a good place for this logic, see the example: <https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/strategies\/lowestlayer.py> which might meet your needs",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3c4e33a28db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3c4e33a28dbfc1fe70799f8e243bf305.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Derek",
            "real_name": "Derek C",
            "display_name": "Derek C",
            "team": "T4G9NBD2M",
            "name": "dataexmachinazzzzz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710513630.299069",
        "parent_user_id": "U05V9E7JA58",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/strategies\/lowestlayer.py",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/strategies\/lowestlayer.py | lowestlayer.py>",
                "text": "```\nfrom collections import OrderedDict\nfrom flumine import BaseStrategy\nfrom flumine.order.trade import Trade\nfrom flumine.order.order import OrderStatus\nfrom flumine.order.ordertype import LimitOrder\nfrom flumine.utils import get_price\n\n\nclass LowestLayer(BaseStrategy):\n    \"\"\"\n    Example strategy for inplay racing market, lay order\n    will be placed on current lowest priced runner.\n    - Market is active and inplay\n    - Lay price below 3.0\n    - No live trades (EXECUTABLE orders in the market)\n    - Order killed after 2 seconds if not matched\n    \"\"\"\n\n    def check_market_book(self, market, market_book):\n        if market_book.status == \"OPEN\" and market_book.inplay:\n            return True\n\n    def process_market_book(self, market, market_book):\n        # get lowest price runner\n        prices = [\n            (r.selection_id, r.last_price_traded)\n            for r in market_book.runners\n            if r.status == \"ACTIVE\" and r.last_price_traded\n        ]\n        if not prices:\n            return\n        prices.sort(key=lambda tup: tup[1])\n        selection_id = prices[0][0]\n\n        if prices[0][1] > 3:\n            return\n\n        # calculate market underround for later analysis\n        underround = _calculate_underround(market_book.runners)\n\n        for runner in market_book.runners:\n            if runner.selection_id == selection_id:\n                runner_context = self.get_runner_context(\n                    market.market_id, runner.selection_id, runner.handicap\n                )\n                if runner_context.live_trade_count == 0:\n                    # lay at current best lay price\n                    lay = get_price(runner.ex.available_to_lay, 0)\n                    # create trade\n                    trade = Trade(\n                        market_book.market_id,\n                        runner.selection_id,\n                        runner.handicap,\n                        self,\n                    )\n                    # create order\n                    order = trade.create_order(\n                        side=\"LAY\",\n                        order_type=LimitOrder(lay, self.context[\"stake\"]),\n                        notes=OrderedDict(underround=round(underround, 4)),\n                    )\n                    # place order for execution\n                    market.place_order(order)\n\n    def process_orders(self, market, orders):\n        # kill order if unmatched in market for greater than 2 seconds\n        for order in orders:\n            if order.status == OrderStatus.EXECUTABLE:\n                if order.elapsed_seconds and order.elapsed_seconds > 2:\n                    market.cancel_order(order)\n\n\ndef _calculate_underround(runners: list) -> float:\n    return sum(\n        [\n            1 \/ get_price(r.ex.available_to_lay, 0)\n            for r in runners\n            if r.ex.available_to_lay\n        ]\n    )\n\n```",
                "title": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/strategies\/lowestlayer.py | lowestlayer.py>",
                "footer": "<https:\/\/github.com\/betcode-org\/flumine|betcode-org\/flumine>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3qA9g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "process_orders is a good place for this logic, see the example: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/strategies\/lowestlayer.py"
                            },
                            {
                                "type": "text",
                                "text": " which might meet your needs"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQL0QDEKA",
        "type": "message",
        "ts": "1710519430.434399",
        "client_msg_id": "f0ca370b-fcad-4984-9db2-bce0584d853b",
        "text": "Hi does this help :\n\n```order = trade.create_order(\n            side=\"LAY\",\n            order_type=LimitOrder(price, stake)\n        )\n        market.place_order(order)\n\ndef process_orders(self, market, orders):\n    for order in orders:\n        if order.status == OrderStatus.EXECUTABLE:\n            if order.elapsed_seconds and order.elapsed_seconds &gt; 1.5:\n                market.cancel_order(order)```\n",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g444d10128c0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/444d10128c0aaf094041a52a76796602.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Peter",
            "real_name": "Peter Lenagh",
            "display_name": "PeterLe",
            "team": "T4G9NBD2M",
            "name": "lenagh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710513630.299069",
        "parent_user_id": "U05V9E7JA58",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S+7se",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi does this help :\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "order = trade.create_order(\n            side=\"LAY\",\n            order_type=LimitOrder(price, stake)\n        )\n        market.place_order(order)\n\ndef process_orders(self, market, orders):\n    for order in orders:\n        if order.status == OrderStatus.EXECUTABLE:\n            if order.elapsed_seconds and order.elapsed_seconds > 1.5:\n                market.cancel_order(order)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1710520469.185369",
        "client_msg_id": "1A3698EC-4FFC-43D4-91D4-44B68DED182A",
        "text": "What you’re trying to do has to be done on the client side. There’s no functionality for it in the API",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710513630.299069",
        "parent_user_id": "U05V9E7JA58",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qz2bL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What "
                            },
                            {
                                "type": "text",
                                "text": "you’re"
                            },
                            {
                                "type": "text",
                                "text": " trying to do has to be done on the client side"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "There’s"
                            },
                            {
                                "type": "text",
                                "text": " no functionality for it in the API"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05V9E7JA58",
        "type": "message",
        "ts": "1710522028.780029",
        "client_msg_id": "54198eda-7cff-4686-853c-98c9e1e3ea34",
        "text": "ic. Thanks everyone for your time &amp; have a great weekend!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "cc7dc83644f0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-05\/5995483702786_cc7dc83644f0419b2460_72.png",
            "first_name": "Tony",
            "real_name": "Tony Holder",
            "display_name": "tone",
            "team": "T4G9NBD2M",
            "name": "tjwhold",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710513630.299069",
        "parent_user_id": "U05V9E7JA58",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bRsRZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ic. Thanks everyone for your time & have a great weekend!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]