[
    {
        "text": "Just noticed a few errors on my stuff...",
        "files": [
            {
                "id": "F05JZN84B71",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UQL0QDEKA",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8tXgH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just noticed a few errors on my stuff..."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1690722515.492279",
        "client_msg_id": "5e7c5b23-507c-4255-879e-ab7cef49a767"
    },
    {
        "user": "U04AD6RAGGH",
        "type": "message",
        "ts": "1690727032.437779",
        "client_msg_id": "40415292-f666-4da0-95cb-5ace49a41dcd",
        "text": "Is there a way to capture the distance of a race via the betfair exchange?\n\nMy guess is that the WIN markets are formatted like &lt;distance&gt; &lt;some other qualifiers I don't understand&gt; .\n\nWould that be right?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "2f5fccb5d023",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-08\/4353229497089_2f5fccb5d0233ef1b00d_72.jpg",
            "first_name": "Rory",
            "real_name": "Rory",
            "display_name": "R",
            "team": "T4G9NBD2M",
            "name": "rorytyrrell2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1690727032.437779",
        "reply_count": 10,
        "reply_users_count": 4,
        "latest_reply": "1690831790.079609",
        "reply_users": [
            "UBS7QANF3",
            "U04AD6RAGGH",
            "UUE6E1LA1",
            "U4H19D1D2"
        ],
        "replies": [
            {
                "user": "UBS7QANF3",
                "ts": "1690728815.223069"
            },
            {
                "user": "U04AD6RAGGH",
                "ts": "1690734549.672189"
            },
            {
                "user": "UUE6E1LA1",
                "ts": "1690735376.530369"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1690736294.530889"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1690789767.653139"
            },
            {
                "user": "U04AD6RAGGH",
                "ts": "1690825848.467689"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1690825910.578469"
            },
            {
                "user": "U04AD6RAGGH",
                "ts": "1690831565.828389"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1690831703.991929"
            },
            {
                "user": "UBS7QANF3",
                "ts": "1690831790.079609"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1690831790.079609",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PaVG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a way to capture the distance of a race via the betfair exchange?\n\nMy guess is that the WIN markets are formatted like <distance> <some other qualifiers I don't understand> .\n\nWould that be right?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1690728815.223069",
        "client_msg_id": "0d108b3c-211d-4bf8-bcf0-47f2c0dcf2d0",
        "text": "Race card",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1690727032.437779",
        "parent_user_id": "U04AD6RAGGH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=YxQm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Race card"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04AD6RAGGH",
        "type": "message",
        "ts": "1690734549.672189",
        "client_msg_id": "f5b228b2-0734-4a3a-bea7-f0fab3b6639a",
        "text": "Can I get this from the API?  I've dug around but can't seem to spot where it is",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "2f5fccb5d023",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-08\/4353229497089_2f5fccb5d0233ef1b00d_72.jpg",
            "first_name": "Rory",
            "real_name": "Rory",
            "display_name": "R",
            "team": "T4G9NBD2M",
            "name": "rorytyrrell2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1690727032.437779",
        "parent_user_id": "U04AD6RAGGH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BDy+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can I get this from the API?  I've dug around but can't seem to spot where it is"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUE6E1LA1",
        "type": "message",
        "ts": "1690735376.530369",
        "client_msg_id": "09eb1f1f-89ec-4d4c-9eca-30152d20ddc6",
        "text": "I just parse the name of the win market. Its of the form XmYf for miles and furlongs for all the ones I am interested in but I think its in metres for AUS stuff. It does for me but it you want a resolution finer than a single furlong it won't suffice.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gf53cae45edd",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f53cae45edd7f7b67bbe98819597612e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "D C",
            "display_name": "D C",
            "team": "T4G9NBD2M",
            "name": "oddsvantage",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1690727032.437779",
        "parent_user_id": "U04AD6RAGGH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b6Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just parse the name of the win market. Its of the form XmYf for miles and furlongs for all the ones I am interested in but I think its in metres for AUS stuff. It does for me but it you want a resolution finer than a single furlong it won't suffice."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1690736294.530889",
        "client_msg_id": "d1dc1a35-8f59-4c16-a151-b663e4e0e0e7",
        "text": "<https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/betfairlightweight\/endpoints\/racecard.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1690727032.437779",
        "parent_user_id": "U04AD6RAGGH",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/betfairlightweight\/endpoints\/racecard.py",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/betfairlightweight\/endpoints\/racecard.py | racecard.py>",
                "text": "```\nimport re\nimport time\nimport requests\nfrom typing import Union, List\n\nfrom ..exceptions import APIError, RaceCardError, InvalidResponse\nfrom ..utils import check_status_code\nfrom .baseendpoint import BaseEndpoint\nfrom .. import resources\nfrom ..compat import json\n\n\nclass RaceCard(BaseEndpoint):\n    \"\"\"\n    RaceCard operations.\n    \"\"\"\n\n    app_key = None\n\n    def login(self, session: requests.Session = None) -> None:\n        \"\"\"\n        Parses app key from betfair exchange site.\n\n        :param requests.session session: Requests session object\n        \"\"\"\n        session = session or self.client.session\n        try:\n            response = session.get(self.login_url)\n        except requests.ConnectionError as e:\n            raise APIError(None, self.login_url, None, e)\n        except Exception as e:\n            raise APIError(None, self.login_url, None, e)\n        app_key = re.findall(\n            r'''\"appKey\":\\s\"(.*?)\"''', response.content.decode(\"utf-8\")\n        )\n        if app_key:\n            self.app_key = app_key[0]\n        else:\n            raise RaceCardError(\"Unable to find appKey\")\n\n    def get_race_card(\n        self,\n        market_ids: list,\n        data_entries: str = None,\n        session: requests.Session = None,\n        lightweight: bool = False,\n    ) -> Union[list, List[resources.RaceCard]]:\n        \"\"\"\n        Returns a list of race cards based on market ids provided.\n\n        :param list market_ids: The filter to select desired markets\n        :param str data_entries: Data to be returned\n        :param requests.session session: Requests session object\n        :param bool lightweight: If True will return dict not a resource\n\n        :rtype: list[resources.RaceCard]\n        \"\"\"\n        if not self.app_key:\n            raise RaceCardError(\n                \"You need to login before requesting a race_card\\n\"\n                \"APIClient.race_card.login()\"\n            )\n        params = self.create_race_card_req(market_ids, data_entries)\n        (response, response_json, elapsed_time) = self.request(\n            \"raceCard\", params=params, session=session\n        )\n        return self.process_response(\n            response_json, resources.RaceCard, elapsed_time, lightweight\n        )\n\n    def get_race_result(\n        self,\n        market_ids: list,\n        data_entries: str = None,\n        session: requests.Session = None,\n        lightweight: bool = True,\n    ) -> list:\n        \"\"\"\n        Returns a list of race results based on event ids provided.\n\n        :param list market_ids: The filter to select desired events\n        :param str data_entries: Data to be returned\n        :param requests.session session: Requests session object\n        :param bool lightweight: If True will return dict not a resource\n\n        :rtype: list[resources.RaceResult]\n        \"\"\"\n        if not self.app_key:\n            raise RaceCardError(\n                \"You need to login before requesting a race_card\\n\"\n                \"APIClient.race_card.login()\"\n            )\n        params = self.create_race_result_req(market_ids, data_entries)\n        (response, response_json, elapsed_time) = self.request(\n            \"raceResults\", params=params, session=session\n        )\n        return self.process_response(response_json, None, elapsed_time, lightweight)\n\n    def request(\n        self, method: str = None, params: dict = None, session: requests.Session = None\n    ) -> (dict, float):\n        session = session or self.client.session\n        time_sent = time.time()\n        url = \"%s%s\" % (self.url, method)\n        try:\n            response = session.get(\n                url,\n                params=params,\n                headers=self.headers,\n                timeout=(self.connect_timeout, self.read_timeout),\n            )\n        except requests.ConnectionError as e:\n            raise APIError(None, method, params, e)\n        except Exception as e:\n            raise APIError(None, method, params, e)\n        elapsed_time = time.time() - time_sent\n\n        check_status_code(response)\n        try:\n            response_json = json.loads(response.content.decode(\"utf-8\"))\n        except ValueError:\n            raise InvalidResponse(response.text)\n\n        return response, response_json, elapsed_time\n\n    @staticmethod\n    def create_race_card_req(market_ids: list, data_entries: str) -> dict:\n        if not data_entries:\n            data_entries = \"RACE, TIMEFORM_DATA, RUNNERS, RUNNER_DETAILS\"\n        return {\"dataEntries\": data_entries, \"marketId\": \",\".join(market_ids)}\n\n    @staticmethod\n    def create_race_result_req(market_ids: list, data_entries: str) -> dict:\n        if not data_entries:\n            data_entries = \"RUNNERS, MARKETS, PRICES, RACE, COURSE\"\n        return {\n            \"dataEntries\": data_entries,\n            \"marketId\": \",\".join(market_ids),\n            \"sortBy\": \"DATE_DESC\",\n        }\n\n    @property\n    def headers(self) -> dict:\n        return {\n            \"Connection\": \"keep-alive\",\n            \"Content-Type\": \"application\/json\",\n            \"X-Application\": self.app_key,\n        }\n\n    @property\n    def login_url(self) -> str:\n        return \"<https:\/\/www.betfair.com\/exchange\/plus\/>\"\n\n    @property\n    def url(self) -> str:\n        return \"<https:\/\/www.betfair.com\/rest\/v2\/>\"\n\n```",
                "title": "<https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/betfairlightweight\/endpoints\/racecard.py | racecard.py>",
                "footer": "<https:\/\/github.com\/betcode-org\/betfair|betcode-org\/betfair>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pOZ=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/betfairlightweight\/endpoints\/racecard.py"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]