[
    {
        "user": "U03FS7KM2NL",
        "type": "message",
        "ts": "1683462244.690719",
        "client_msg_id": "AE0C4D31-7322-40DD-B9B7-E53650AFE3F1",
        "text": "Trying to remember the name - good method for approximating true prices if there’s a wide ish spread? Something more robust than mid price or overround ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g160a197a059",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/160a197a059d9b97aabdd95ca66dc341.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Ralegh",
            "real_name": "Ralegh",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "ralegh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683462244.690719",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1683463003.282149",
        "reply_users": [
            "UBS7QANF3",
            "U03FS7KM2NL"
        ],
        "replies": [
            {
                "user": "UBS7QANF3",
                "ts": "1683462988.661219"
            },
            {
                "user": "U03FS7KM2NL",
                "ts": "1683463003.282149"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m5W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Trying to remember the name - good method for approximating true prices if "
                            },
                            {
                                "type": "text",
                                "text": "there’s"
                            },
                            {
                                "type": "text",
                                "text": " a wide ish spread? Something more robust than mid price or overround "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1683462988.661219",
        "client_msg_id": "431E1D61-1C63-42D8-9B52-FC53BF1E0948",
        "text": "Shin’s method? <https:\/\/github.com\/mberk\/shin|https:\/\/github.com\/mberk\/shin>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683462244.690719",
        "parent_user_id": "U03FS7KM2NL",
        "attachments": [
            {
                "id": 1,
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/mberk\/shin",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "mberk\/shin",
                "text": "Python implementation of Shin's method for calculating implied probabilities from bookmaker odds",
                "title": "mberk\/shin",
                "fields": [
                    {
                        "value": "46",
                        "title": "Stars",
                        "short": true
                    },
                    {
                        "value": "Python",
                        "title": "Language",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d0z8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Shin’s method? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/mberk\/shin",
                                "text": "https:\/\/github.com\/mberk\/shin"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03FS7KM2NL",
        "type": "message",
        "ts": "1683463003.282149",
        "client_msg_id": "5EF8A102-AF9B-4158-A2DC-63A66421078E",
        "text": "Yep that’s it! Thanks",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g160a197a059",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/160a197a059d9b97aabdd95ca66dc341.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Ralegh",
            "real_name": "Ralegh",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "ralegh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683462244.690719",
        "parent_user_id": "U03FS7KM2NL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cuhh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep "
                            },
                            {
                                "type": "text",
                                "text": "that’s"
                            },
                            {
                                "type": "text",
                                "text": " it! Thanks"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013K4VNB6D",
        "type": "message",
        "ts": "1683497739.059879",
        "client_msg_id": "58f23eef-301f-473d-91d8-26aee3dfc084",
        "text": "I've put some code in process_market_book to log the WOM when my orders are at least partially matched:\n\n```for order in market.blotter.live_orders:\n    runner = Repository().get_runner_from_order(order)\n    if order.size_matched &gt; 0 and not hasattr(order, \"wom\"):\n        order.wom = Wom().get_wom_for_runner(runner)```\nWhen I print my results to a spreadsheet, I use:\n\n```wom = order.wom if hasattr(order, \"wom\") else 0```\nWhen I print the results, for orders that were matched, some of my entries are zero and some are the wom. I don't understand why it's sometimes the case that the order object is given a 'wom' attribute when money has been matched, and sometimes it isn't?\n\nI wondered whether it might be due to race conditions, as I'm using multi-processing. I'm aware that, with multi-processing, each process has its own memory space, but Chat GPT assures me that race conditions can nevertheless happen (and yes, I'm aware that GPT isn't an authoritative source! :smile:). Anyway, I applied a lock to everything in process_market_book, but that didn't fix the issue.\n\nAny suggestions would be appreciated.\n\nThanks\n\nJeff",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gf188478b89f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f188478b89f4a5e2c5af9eafa0433712.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-72.png",
            "first_name": "",
            "real_name": "Jeff Waters",
            "display_name": "Jeff Waters",
            "team": "T4G9NBD2M",
            "name": "watersjg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683497739.059879",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1683539343.892819",
        "reply_users": [
            "U0128E7BEHW",
            "U013K4VNB6D"
        ],
        "replies": [
            {
                "user": "U0128E7BEHW",
                "ts": "1683528103.791839"
            },
            {
                "user": "U013K4VNB6D",
                "ts": "1683539343.892819"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e=j3X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've put some code in process_market_book to log the WOM when my orders are at least partially matched:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for order in market.blotter.live_orders:\n    runner = Repository().get_runner_from_order(order)\n    if order.size_matched > 0 and not hasattr(order, \"wom\"):\n        order.wom = Wom().get_wom_for_runner(runner)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhen I print my results to a spreadsheet, I use:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wom = order.wom if hasattr(order, \"wom\") else 0"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhen I print the results, for orders that were matched, some of my entries are zero and some are the wom. I don't understand why it's sometimes the case that the order object is given a 'wom' attribute when money has been matched, and sometimes it isn't?\n\nI wondered whether it might be due to race conditions, as I'm using multi-processing. I'm aware that, with multi-processing, each process has its own memory space, but Chat GPT assures me that race conditions can nevertheless happen (and yes, I'm aware that GPT isn't an authoritative source! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "). Anyway, I applied a lock to everything in process_market_book, but that didn't fix the issue.\n\nAny suggestions would be appreciated.\n\nThanks\n\nJeff"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0128E7BEHW",
        "type": "message",
        "ts": "1683528103.791839",
        "client_msg_id": "8ac51908-3bde-4a7e-ab14-0e564a15eba3",
        "text": "You cannot create a new attribute like that and expect it to be preserved (race condition or not). I would use the order.notes functionality as it was created for this kind of thing, and then come back if you see the issues persist",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gb57a2bdd15a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b57a2bdd15acccdb845ce257f38940cc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Dave",
            "real_name": "Dave R",
            "display_name": "Dave",
            "team": "T4G9NBD2M",
            "name": "d7m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683497739.059879",
        "parent_user_id": "U013K4VNB6D",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "admm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You cannot create a new attribute like that and expect it to be preserved (race condition or not). I would use the order.notes functionality as it was created for this kind of thing, and then come back if you see the issues persist"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]