[
    {
        "subtype": "thread_broadcast",
        "user": "UUX1L88MC",
        "thread_ts": "1647684486.589039",
        "root": {
            "user": "U016TGY3676",
            "type": "message",
            "ts": "1647684486.589039",
            "edited": {
                "user": "U016TGY3676",
                "ts": "1647684553.000000"
            },
            "client_msg_id": "5bb8aa09-ec06-4c8e-9843-1d75d781cd3f",
            "text": "When using Flumine backtest to process market data into csv's and I only need to call `process_market_book()` once per market, is it possible to skip straight to market closure? I currently use:\n`def check_market_book(self, market, market_book):\n    if 'signals' in market.context: return`\n...but am wondering if it's possible to speed up\/skip the unwanted updates? It seems like premature optimisation at first glance, but when processing 50K+ markets, it would make a difference.",
            "team": "T4G9NBD2M",
            "thread_ts": "1647684486.589039",
            "reply_count": 3,
            "reply_users_count": 3,
            "latest_reply": "1648493675.054259",
            "reply_users": [
                "UUX1L88MC",
                "ULDAVFDRP",
                "U013ZS16QJZ"
            ],
            "replies": [
                {
                    "user": "UUX1L88MC",
                    "ts": "1648443623.064389"
                },
                {
                    "user": "ULDAVFDRP",
                    "ts": "1648446103.980899"
                },
                {
                    "user": "U013ZS16QJZ",
                    "ts": "1648493675.054259"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "Mvgk",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "When using Flumine backtest to process market data into csv's and I only need to call "
                                },
                                {
                                    "type": "text",
                                    "text": "process_market_book()",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " once per market, is it possible to skip straight to market closure? I currently use:\n"
                                },
                                {
                                    "type": "text",
                                    "text": "def check_market_book(self, market, market_book):\n",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "    if 'signals' in market.context: return",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "\n...but am wondering if it's possible to speed up\/skip the unwanted updates? It seems like premature optimisation at first glance, but when processing 50K+ markets, it would make a difference."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1648443623.064389",
        "client_msg_id": "fa46d01b-fbbd-4c3c-9ff3-01a62af258d6",
        "text": "Hey, You might be interested in my library I made with the bf aus automation guys - I posted it here a few months ago.\n<https:\/\/github.com\/tarb\/betfair_data> its a rust based library for reading\/parsing stream files, that supports official betfair data, and flumine recorded files. It has multiple formats including a drop in replacement for betfairlightweight.\n\nIf youre generating csv’s you can see our article about how we dropped it in as a replacement, and cut our scripts time from over 2 and a half hours to less then 5 minutes, and generated the exact same csv output.\n<https:\/\/betfair-datascientists.github.io\/historicData\/jsonToCsvRevisited\/>",
        "attachments": [
            {
                "from_url": "https:\/\/betfair-datascientists.github.io\/historicData\/jsonToCsvRevisited\/",
                "service_icon": "https:\/\/betfair-datascientists.github.io\/img\/BetfairFavicon.ico",
                "id": 1,
                "original_url": "https:\/\/betfair-datascientists.github.io\/historicData\/jsonToCsvRevisited\/",
                "fallback": "JSON to CSV | Revisited - The Automation Hub",
                "text": "Documentation, guides and articles on creating, developing and implementing automated betting strategies, using data analysis to inform betting models and how to interact with the Betfair API.",
                "title": "JSON to CSV | Revisited - The Automation Hub",
                "title_link": "https:\/\/betfair-datascientists.github.io\/historicData\/jsonToCsvRevisited\/",
                "service_name": "betfair-datascientists.github.io"
            },
            {
                "id": 2,
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/tarb\/betfair_data",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "tarb\/betfair_data",
                "text": "Fast Python Betfair historical data file parser",
                "title": "tarb\/betfair_data",
                "fields": [
                    {
                        "value": "8",
                        "title": "Stars",
                        "short": true
                    },
                    {
                        "value": "Rust",
                        "title": "Language",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xzy9P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey, You might be interested in my library I made with the bf aus automation guys - I posted it here a few months ago.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/tarb\/betfair_data"
                            },
                            {
                                "type": "text",
                                "text": " its a rust based library for reading\/parsing stream files, that supports official betfair data, and flumine recorded files. It has multiple formats including a drop in replacement for betfairlightweight.\n\nIf youre generating csv’s you can see our article about how we dropped it in as a replacement, and cut our scripts time from over 2 and a half hours to less then 5 minutes, and generated the exact same csv output.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/betfair-datascientists.github.io\/historicData\/jsonToCsvRevisited\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "rocket",
                "users": [
                    "ULDAVFDRP",
                    "U4H19D1D2",
                    "U016TGY3676"
                ],
                "count": 3
            },
            {
                "name": "clap",
                "users": [
                    "UUUAJQZ5J",
                    "U80AMMRKP",
                    "U013ZS16QJZ"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "ULDAVFDRP",
        "type": "message",
        "ts": "1648446103.980899",
        "client_msg_id": "2f8b9747-7a6e-4bc4-9f38-3b8284399ade",
        "text": "top work mate, ill be playing around with all of today and let you know if I have any more feedback :+1:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g46fe1c1bf03",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b46fe1c1bf03e18d951e7032fb494283.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Oliver Varney",
            "display_name": "Oliver Varney",
            "team": "T4G9NBD2M",
            "name": "oliverashleyvarney",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1647684486.589039",
        "parent_user_id": "U016TGY3676",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LHQY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "top work mate, ill be playing around with all of today and let you know if I have any more feedback "
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UUX1L88MC"
                ],
                "count": 1
            }
        ]
    }
]