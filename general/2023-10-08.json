[
    {
        "user": "U01PJ5YMFBJ",
        "type": "message",
        "ts": "1696760953.778499",
        "client_msg_id": "1DF9EE5A-9E3E-4EA0-838D-9B1CDCEF067E",
        "text": "Is the streaming subscription limit per connection or per user ?\nEg. is the default 200 across all 10 available connections, or 200 per connection(thus potential 2000 in total) ?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g819c7f591cc",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/819c7f591cc888486f19b3f2f49f2011.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "AndyL",
            "real_name": "AndyL",
            "display_name": "AndyL",
            "team": "T4G9NBD2M",
            "name": "andrew_m_leonard",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696760953.778499",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1696762066.908259",
        "reply_users": [
            "UUCD6P13J",
            "U01PJ5YMFBJ"
        ],
        "replies": [
            {
                "user": "UUCD6P13J",
                "ts": "1696761985.047779"
            },
            {
                "user": "U01PJ5YMFBJ",
                "ts": "1696762066.908259"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gTzdL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is the streaming subscription limit per connection or per user ?\nEg. is the default 200 across all 10 available connections, or 200 per connection(thus potential 2000 in total"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            },
                            {
                                "type": "text",
                                "text": " ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUCD6P13J",
        "type": "message",
        "ts": "1696761985.047779",
        "client_msg_id": "46df0c73-effd-403a-a928-2a50f57fc2fb",
        "text": "per connection",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6898272ab81",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6898272ab810e419c2c9ca9af1e53da8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0012-72.png",
            "first_name": "Lee",
            "real_name": "Lee U",
            "display_name": "Lee",
            "team": "T4G9NBD2M",
            "name": "lunswor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696760953.778499",
        "parent_user_id": "U01PJ5YMFBJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zZ6hi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "per connection"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01PJ5YMFBJ",
        "type": "message",
        "ts": "1696762066.908259",
        "client_msg_id": "DD312609-FC1C-4CD9-A111-86B14B097238",
        "text": "Ah good to know thanks Lee",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g819c7f591cc",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/819c7f591cc888486f19b3f2f49f2011.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "AndyL",
            "real_name": "AndyL",
            "display_name": "AndyL",
            "team": "T4G9NBD2M",
            "name": "andrew_m_leonard",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696760953.778499",
        "parent_user_id": "U01PJ5YMFBJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q+Yp4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah good to know thanks Lee"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U03FVSE9R9V",
        "thread_ts": "1696578021.313699",
        "root": {
            "user": "U03FVSE9R9V",
            "type": "message",
            "ts": "1696578021.313699",
            "edited": {
                "user": "U03FVSE9R9V",
                "ts": "1696578112.000000"
            },
            "client_msg_id": "544ad63f-7c6d-4b6e-b1e1-181ffb5842cf",
            "text": "Hello. I am using the simple strategy from the Flumine tutorial. Below are some code snippets\n```strategy = LayStrategy(\n    market_filter=streaming_market_filter(\n        event_type_ids=[\"7\"], # Greyhounds\n        country_codes=[\"AU\", \"NZ\"], # Australia\n        market_types=[\"WIN\"], # Win Markets\n\n    )\n\n\n)\ndef check_market_book(self, market: Market, market_book: MarketBook) -> bool:\n    # process_market_book only executed if this returns True\n    if market_book.status != \"CLOSED\":\n        return True\n\n# If check_market_book returns true i.e. the market is open and not closed then we will run process_market_book once initially\n#  After the first initial time, process_market_book runs every single time someone places, updates or cancels a bet\ndef process_market_book(self, market: Market, market_book: MarketBook) -> None:\n    if market.seconds_to_start <= 120:\n        for runner in market_book.runners:\n            logging.info(f'runner.selection_id ,{runner.selection_id},Status :{runner.status},Matches{[(m.price, m.side)for m in runner.matches]}'\n                         f'Orders:{[(o.price, o.size_matched, o.size_cancelled) for o in runner.orders]},TMthd{runner.total_matched},HdCpd{runner.handicap}'\n                         f',SP:{[runner.sp.actual_sp, runner.sp.lay_liability_taken, runner.sp.near_price, runner.sp.far_price, runner.sp.actual_sp]}')\n            logging.info(f'Complete orders = {runner.orders}')```\nI am trying to log the matched orders for each market but no order shows up in the log file. Can anyone guide what I am doing wrong?",
            "team": "T4G9NBD2M",
            "thread_ts": "1696578021.313699",
            "reply_count": 20,
            "reply_users_count": 4,
            "latest_reply": "1696936628.049939",
            "reply_users": [
                "U4H19D1D2",
                "U03FVSE9R9V",
                "UEA14GBRR",
                "U02RN7YDRQ9"
            ],
            "replies": [
                {
                    "user": "U4H19D1D2",
                    "ts": "1696578450.531959"
                },
                {
                    "user": "U03FVSE9R9V",
                    "ts": "1696640281.205729"
                },
                {
                    "user": "U03FVSE9R9V",
                    "ts": "1696658692.492309"
                },
                {
                    "user": "U4H19D1D2",
                    "ts": "1696660795.140329"
                },
                {
                    "user": "U03FVSE9R9V",
                    "ts": "1696781127.947989"
                },
                {
                    "user": "UEA14GBRR",
                    "ts": "1696785116.837739"
                },
                {
                    "user": "U4H19D1D2",
                    "ts": "1696789305.382619"
                },
                {
                    "user": "U03FVSE9R9V",
                    "ts": "1696850267.603579"
                },
                {
                    "user": "U4H19D1D2",
                    "ts": "1696850680.126119"
                },
                {
                    "user": "U03FVSE9R9V",
                    "ts": "1696857011.610939"
                },
                {
                    "user": "U4H19D1D2",
                    "ts": "1696857873.906469"
                },
                {
                    "user": "U03FVSE9R9V",
                    "ts": "1696858297.695539"
                },
                {
                    "user": "U4H19D1D2",
                    "ts": "1696858569.650199"
                },
                {
                    "user": "U03FVSE9R9V",
                    "ts": "1696861320.651059"
                },
                {
                    "user": "U02RN7YDRQ9",
                    "ts": "1696861692.681939"
                },
                {
                    "user": "U03FVSE9R9V",
                    "ts": "1696863935.670279"
                },
                {
                    "user": "U03FVSE9R9V",
                    "ts": "1696931070.638939"
                },
                {
                    "user": "U4H19D1D2",
                    "ts": "1696933305.001439"
                },
                {
                    "user": "U03FVSE9R9V",
                    "ts": "1696936099.178879"
                },
                {
                    "user": "U4H19D1D2",
                    "ts": "1696936628.049939"
                }
            ],
            "is_locked": false,
            "subscribed": true,
            "last_read": "1696936628.049939",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "ZgzeQ",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Hello. I am using the simple strategy from the Flumine tutorial. Below are some code snippets\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_preformatted",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "strategy = LayStrategy(\n    market_filter=streaming_market_filter(\n        event_type_ids=[\"7\"], # Greyhounds\n        country_codes=[\"AU\", \"NZ\"], # Australia\n        market_types=[\"WIN\"], # Win Markets\n\n    )\n\n\n)\ndef check_market_book(self, market: Market, market_book: MarketBook) -> bool:\n    # process_market_book only executed if this returns True\n    if market_book.status != \"CLOSED\":\n        return True\n\n# If check_market_book returns true i.e. the market is open and not closed then we will run process_market_book once initially\n#  After the first initial time, process_market_book runs every single time someone places, updates or cancels a bet\ndef process_market_book(self, market: Market, market_book: MarketBook) -> None:\n    if market.seconds_to_start <= 120:\n        for runner in market_book.runners:\n            logging.info(f'runner.selection_id ,{runner.selection_id},Status :{runner.status},Matches{[(m.price, m.side)for m in runner.matches]}'\n                         f'Orders:{[(o.price, o.size_matched, o.size_cancelled) for o in runner.orders]},TMthd{runner.total_matched},HdCpd{runner.handicap}'\n                         f',SP:{[runner.sp.actual_sp, runner.sp.lay_liability_taken, runner.sp.near_price, runner.sp.far_price, runner.sp.actual_sp]}')\n            logging.info(f'Complete orders = {runner.orders}')"
                                }
                            ],
                            "border": 0
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "I am trying to log the matched orders for each market but no order shows up in the log file. Can anyone guide what I am doing wrong?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1696781127.947989",
        "client_msg_id": "357675e1-f8f5-4cc3-b7f0-e98fd2a3ee10",
        "text": "Thanks for the reply <@U4H19D1D2>. When do they get populated? I have a simple use case where I want to analyze the matched orders for a horse (selection) before placing my own. How do I do it with Flumine?",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p1iRc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the reply "
                            },
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": ". When do they get populated? I have a simple use case where I want to analyze the matched orders for a horse (selection) before placing my own. How do I do it with Flumine?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEA14GBRR",
        "type": "message",
        "ts": "1696785116.837739",
        "client_msg_id": "6f843aba-ec50-478f-8e2d-bc756b552baf",
        "text": "You can see the change in traded vol at each price, but not the individual matched orders (apart from your own)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "889680f46fe7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-06\/6774538588752_889680f46fe773047cb9_72.jpg",
            "first_name": "",
            "real_name": "Shaun White",
            "display_name": "ShaunW",
            "team": "T4G9NBD2M",
            "name": "shaunwhite",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696578021.313699",
        "parent_user_id": "U03FVSE9R9V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j5pWL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can see the change in traded vol at each price, but not the individual matched orders (apart from your own)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1696789305.382619",
        "client_msg_id": "30B33A08-F935-4DC7-9D08-8D210B8DF011",
        "text": "They don’t when streaming, you need to use process_orders or just the blotter in the market object, check out the docs ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696578021.313699",
        "parent_user_id": "U03FVSE9R9V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nBMC+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They "
                            },
                            {
                                "type": "text",
                                "text": "don’t"
                            },
                            {
                                "type": "text",
                                "text": " when streaming, you need to use process_orders or just the blotter in the market object, check out the docs "
                            }
                        ]
                    }
                ]
            }
        ]
    }
]