[
    {
        "user": "U032F6F7B5M",
        "type": "message",
        "ts": "1728561144.642219",
        "client_msg_id": "97644efd-24df-469d-ab01-3644d6c4209a",
        "text": "Hi <@U4H19D1D2> I don't know if I really pushed it too far, because the test I did was with 6 simultaneous charts, but I'm analyzing whether it could be the fault of some kind of escape, since there is a script trigger for each of them, with the intention of being asynchronous. I managed to solve the memory accumulation, by the way.\n\nI'm also thinking about generating the requests with Python and sending the JSON data to be processed by HTML instead of using JS for this, perhaps it will provide more security and stability.\n\nBut if I do notice that there is such a limitation, I will use the graph api to learn and reproduce it using the official API.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "f1a6af0e57e6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-20\/3417984726532_f1a6af0e57e6096efe9d_72.jpg",
            "first_name": "Brøndby",
            "real_name": "Brøndby IF",
            "display_name": "Brøndby IF",
            "team": "T4G9NBD2M",
            "name": "frattosdj",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1728417322.134079",
        "parent_user_id": "U032F6F7B5M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3zi59",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": " I don't know if I really pushed it too far, because the test I did was with 6 simultaneous charts, but I'm analyzing whether it could be the fault of some kind of escape, since there is a script trigger for each of them, with the intention of being asynchronous. I managed to solve the memory accumulation, by the way.\n\nI'm also thinking about generating the requests with Python and sending the JSON data to be processed by HTML instead of using JS for this, perhaps it will provide more security and stability.\n\nBut if I do notice that there is such a limitation, I will use the graph api to learn and reproduce it using the official API."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U032F6F7B5M",
        "type": "message",
        "ts": "1728561182.209119",
        "client_msg_id": "c1894939-ab77-416a-9517-1c44033e162e",
        "text": "Anyway, when I manage to come up with something final, I'll post the project here so that everyone has access to it for both use and feedback.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "f1a6af0e57e6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-20\/3417984726532_f1a6af0e57e6096efe9d_72.jpg",
            "first_name": "Brøndby",
            "real_name": "Brøndby IF",
            "display_name": "Brøndby IF",
            "team": "T4G9NBD2M",
            "name": "frattosdj",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1728417322.134079",
        "parent_user_id": "U032F6F7B5M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Au47N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyway, when I manage to come up with something final, I'll post the project here so that everyone has access to it for both use and feedback."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1728562771.750679",
        "client_msg_id": "4098b4ff-3c2b-44a5-a88d-7686b1596c9f",
        "text": "But how often where you hitting the endpoint?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1728417322.134079",
        "parent_user_id": "U032F6F7B5M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MFZfG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But how often where you hitting the endpoint?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCQB6S222",
        "type": "message",
        "ts": "1728565564.757049",
        "client_msg_id": "3f0a15ea-e2d5-4fd4-b5cc-4f751dad47c2",
        "text": "Just use selenium",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g953ffd5e3b7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5813be539113b05ece8212c2a06d006a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "George",
            "real_name": "George",
            "display_name": "George",
            "team": "T4G9NBD2M",
            "name": "gd",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1728417322.134079",
        "parent_user_id": "U032F6F7B5M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rrpoa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just use selenium"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "-1",
                "users": [
                    "U02FXEUUMRN",
                    "U07AK2APF2B"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U80AMMRKP",
        "type": "message",
        "ts": "1728567804.538529",
        "client_msg_id": "a742abd3-9aa8-4055-b073-666b8bbda819",
        "text": "Are we expecting any straightforward perf gains from 3.13? pydantic-core might need a bump <@U4H19D1D2>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g09081be09e4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/709081be09e4187898ec0e3540c4bb49.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-72.png",
            "first_name": "J",
            "real_name": "J",
            "display_name": "Gooat",
            "team": "T4G9NBD2M",
            "name": "maunders.abie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1728567804.538529",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1728567849.952489",
        "reply_users": [
            "U4H19D1D2"
        ],
        "replies": [
            {
                "user": "U4H19D1D2",
                "ts": "1728567849.952489"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1728567849.952489",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l\/efK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are we expecting any straightforward perf gains from 3.13? pydantic-core might need a bump "
                            },
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1728567849.952489",
        "client_msg_id": "fce97b7a-62cf-40b3-85f9-5fb867ab2794",
        "text": "I think we have some issues to fix for 3.12 first :sweat_smile:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1728567804.538529",
        "parent_user_id": "U80AMMRKP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+5Ttn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think we have some issues to fix for 3.12 first "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U80AMMRKP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U042NB80A1X",
        "type": "message",
        "ts": "1728624868.669209",
        "client_msg_id": "2b713fc7-e3d9-49b5-be6b-42697f5eea1c",
        "text": "<@UBS7QANF3> I've had this question for a while and tried to understand the math a bit better to do it myself but am failing miserably - do you know what it would take to get a shins type method to increase overround proportionately (rather than normalise to 1, set it from 1.05 to say 1.10)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3ab37102618",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ab37102618df1ba57a0e6b5c8538c66.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "Tom",
            "real_name": "Tom",
            "display_name": "Tom",
            "team": "T4G9NBD2M",
            "name": "tkuhnau",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1728624868.669209",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1728646410.804729",
        "reply_users": [
            "UBS7QANF3",
            "U042NB80A1X"
        ],
        "replies": [
            {
                "user": "UBS7QANF3",
                "ts": "1728629829.440739"
            },
            {
                "user": "U042NB80A1X",
                "ts": "1728646410.804729"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Pb46",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBS7QANF3"
                            },
                            {
                                "type": "text",
                                "text": " I've had this question for a while and tried to understand the math a bit better to do it myself but am failing miserably - do you know what it would take to get a shins type method to increase overround proportionately (rather than normalise to 1, set it from 1.05 to say 1.10)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1728629829.440739",
        "client_msg_id": "ce2a97ed-7728-4bb8-b12c-f358be748bc2",
        "text": "I think what you're asking is a way to use Shin to add the overround rather than remove it?\n\nThere's this issue in my repo that's relevant: <https:\/\/github.com\/mberk\/shin\/issues\/6>. As referenced in the first comment, the R package `implied` already does this. You can also take a look at the referenced PR",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1728624868.669209",
        "parent_user_id": "U042NB80A1X",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "ts": 1706767486,
                "color": "36a64f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/mberk\/shin\/issues\/6",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "#6 feature: implied odds calculator",
                "text": "A natural counterpart to probability inference would be odds inference, i.e., output a set of prices for a given set of probabilities (that sum to 1) for a target overround\/margin, where the sum of the inverse output prices would = 1 + target overround\/margin.\n\ndef test_calculate_implied_odds() -> None:\n    odds = [2.6, 2.4, 4.3]\n    margin = sum([1 \/ o for o in odds]) - 1\n    implied_probabilities = shin.calculate_implied_probabilities(odds)\n    res = shin.calculate_implied_odds(implied_probabilities, margin=margin)\n    assert pytest.approx(res) == odds\n\nWould you be interested in including something like this in the library?\n\nR's <https:\/\/rdrr.io\/cran\/implied\/src\/R\/implied_odds.R|implied> package does this, and I've put together a very raw python implementation based from that which you can see diff'd against the typing branch here: <https:\/\/github.com\/peterschutt\/shin\/pull\/1\/files|https:\/\/github.com\/peterschutt\/shin\/pull\/1\/files>.",
                "title": "#6 feature: implied odds calculator",
                "title_link": "https:\/\/github.com\/mberk\/shin\/issues\/6",
                "footer": "<https:\/\/github.com\/mberk\/shin|mberk\/shin>",
                "fields": [
                    {
                        "value": "6",
                        "title": "Comments",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9pi47",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think what you're asking is a way to use Shin to add the overround rather than remove it?\n\nThere's this issue in my repo that's relevant: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/mberk\/shin\/issues\/6"
                            },
                            {
                                "type": "text",
                                "text": ". As referenced in the first comment, the R package "
                            },
                            {
                                "type": "text",
                                "text": "implied",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " already does this. You can also take a look at the referenced PR"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]