[
    {
        "user": "UFTBRB3F1",
        "type": "message",
        "ts": "1636537497.243100",
        "client_msg_id": "451c9a58-d6e0-4598-8357-a40f43833216",
        "text": "My code is correct, its just that there are data limits.\n\nWhat data do you need for the market_book?\n\nI'll re-do it quickly so it doesn't error, but it won't show you much!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g771e110be94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a771e110be945b86bede9d5c1bb551e3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Newbie99",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "vjmehra",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1636479438.238300",
        "parent_user_id": "U01DVUAE2G1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nlc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My code is correct, its just that there are data limits.\n\nWhat data do you need for the market_book?\n\nI'll re-do it quickly so it doesn't error, but it won't show you much!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFTBRB3F1",
        "type": "message",
        "ts": "1636537700.243300",
        "client_msg_id": "53fa880d-edf2-4849-ae10-c2d6f1cdd11f",
        "text": "This will return 100 markets (just change the max results, but it will cut off around the 200 mark):\n\n```import betfairlightweight as bf\n\n''' Enter parameters here '''\naccname = 'account_name'\naccpass = 'account_password'\nacckey = 'account_key'\npath = 'certificate_path'\nevent_type_ids = ['1']\n\ntrading = bf.APIClient(accname, accpass, acckey, certs=path)\ntrading.login()\nfilters = bf.filters\n\n\nmarket_catalogues = trading.betting.list_market_catalogue(\n                    filter=filters.market_filter(event_type_ids=event_type_ids,\n                                                 ),\n                    market_projection=[\n                        \"MARKET_START_TIME\",\n                    ],  # runner description required\n                    sort=\"FIRST_TO_START\",\n                    max_results=100,\n                )\n\nmarket_books = trading.betting.list_market_book(\n            market_ids=[m.market_id for m in market_catalogues],\n            order_projection=\"ALL\",\n    lightweight=True\n        )\n\nfor market_book in market_books:\n    if market_book['inplay'] is True:\n        print('IN PLAY','\\n',market_book)\n    else:\n        print('NOT IN PLAY','\\n',market_book)```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g771e110be94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a771e110be945b86bede9d5c1bb551e3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Newbie99",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "vjmehra",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1636479438.238300",
        "parent_user_id": "U01DVUAE2G1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u6dM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This will return 100 markets (just change the max results, but it will cut off around the 200 mark):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "import betfairlightweight as bf\n\n''' Enter parameters here '''\naccname = 'account_name'\naccpass = 'account_password'\nacckey = 'account_key'\npath = 'certificate_path'\nevent_type_ids = ['1']\n\ntrading = bf.APIClient(accname, accpass, acckey, certs=path)\ntrading.login()\nfilters = bf.filters\n\n\nmarket_catalogues = trading.betting.list_market_catalogue(\n                    filter=filters.market_filter(event_type_ids=event_type_ids,\n                                                 ),\n                    market_projection=[\n                        \"MARKET_START_TIME\",\n                    ],  # runner description required\n                    sort=\"FIRST_TO_START\",\n                    max_results=100,\n                )\n\nmarket_books = trading.betting.list_market_book(\n            market_ids=[m.market_id for m in market_catalogues],\n            order_projection=\"ALL\",\n    lightweight=True\n        )\n\nfor market_book in market_books:\n    if market_book['inplay'] is True:\n        print('IN PLAY','\\n',market_book)\n    else:\n        print('NOT IN PLAY','\\n',market_book)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZS16QJZ",
        "type": "message",
        "ts": "1636558055.243500",
        "client_msg_id": "ed0b8732-01a9-4c1d-98d9-634c1ddfdba4",
        "text": "```Thanks for the contribution, I would like to get the IDs of these events <https:\/\/www.betfair.com\/exchange\/plus\/inplay\/football>\n\nBy clicking on one of these events the ID will be on the link, so what I currently do is get these IDs using Selenium, in a way that is usually less efficient than scraping. I believed that through the API using a library I could get a better solution, but so far I haven't found it.\n\nThanks```\n",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g16b34a6e706",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/16b34a6e706dbe59fcc7dd82d1ae4930.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "VT",
            "real_name": "VT",
            "display_name": "VT",
            "team": "T4G9NBD2M",
            "name": "joaobaldoni",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1636479438.238300",
        "parent_user_id": "U01DVUAE2G1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HE+=v",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the contribution, I would like to get the IDs of these events "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.betfair.com\/exchange\/plus\/inplay\/football"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBy clicking on one of these events the ID will be on the link, so what I currently do is get these IDs using Selenium, in a way that is usually less efficient than scraping. I believed that through the API using a library I could get a better solution, but so far I haven't found it.\n\nThanks"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "text": "",
        "files": [
            {
                "id": "F02M83DNHA5",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U013ZS16QJZ",
        "display_as_bot": false,
        "type": "message",
        "ts": "1636558078.243700",
        "client_msg_id": "9797b869-857f-41c1-bb7b-ec8ccc7a0953",
        "thread_ts": "1636479438.238300",
        "parent_user_id": "U01DVUAE2G1"
    },
    {
        "user": "UFTBRB3F1",
        "type": "message",
        "ts": "1636558798.243900",
        "client_msg_id": "695838f4-1e52-410f-b4aa-ae3346789533",
        "text": "For what you're trying to do, you can either:\n\n1. Use the REST API approach, but make multiple calls (as you are limited with the amount of data you can return per call)\n2. Use streaming and setup a filter for football\nHowever, using either approach, there is no 'in-play' filter, you still need to check:\n\n```if market_book.status == 'OPEN':\n    if market_book.inplay:\n        return True```\nAt some point.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g771e110be94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a771e110be945b86bede9d5c1bb551e3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Newbie99",
            "display_name": "",
            "team": "T4G9NBD2M",
            "name": "vjmehra",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1636479438.238300",
        "parent_user_id": "U01DVUAE2G1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A\/gaZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For what you're trying to do, you can either:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Use the REST API approach, but make multiple calls (as you are limited with the amount of data you can return per call)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Use streaming and setup a filter for football"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nHowever, using either approach, there is no 'in-play' filter, you still need to check:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if market_book.status == 'OPEN':\n    if market_book.inplay:\n        return True"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAt some point."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01U24AG35W",
        "type": "message",
        "ts": "1636600473.248900",
        "edited": {
            "user": "U01U24AG35W",
            "ts": "1636600500.000000"
        },
        "client_msg_id": "54e124bd-a732-4e5d-97da-6387d9e77819",
        "text": "In Flumine back testing when I want to 'get' a runner directly without iterating over all runners I use the following long winded technique to access the marketbook cache and not the marketbook as I do not see a way to do that in the marketbook. I wonder if I am missing something simple.\n\nSo to get say the best available to back price what I do is...\nGet the stream's index\n`stream_idx = mystrategy.stream_ids.index(market_book.streaming_unique_id)`\nand then...\n`mystrategy.streams[stream_idx]._listener.stream._caches[market_book.market_id].runner_dict[(selection_id, 0)].available_to_back.serialised[0][\"price\"]`\n\nIt just don't feel right!",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "d12d00b0e337",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-05\/1930559079267_d12d00b0e33706cb4bbd_72.png",
            "first_name": "Thomas",
            "real_name": "Thomas Jakubauskas",
            "display_name": "ThomasJ",
            "team": "T4G9NBD2M",
            "name": "thomasaj05",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fh3O0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In Flumine back testing when I want to 'get' a runner directly without iterating over all runners I use the following long winded technique to access the marketbook cache and not the marketbook as I do not see a way to do that in the marketbook. I wonder if I am missing something simple.\n\nSo to get say the best available to back price what I do is...\nGet the stream's index\n"
                            },
                            {
                                "type": "text",
                                "text": "stream_idx = mystrategy.stream_ids.index(market_book.streaming_unique_id)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nand then...\n"
                            },
                            {
                                "type": "text",
                                "text": "mystrategy.streams[stream_idx]._listener.stream._caches[market_book.market_id].runner_dict[(selection_id, 0)].available_to_back.serialised[0][\"price\"]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt just don't feel right!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "face_vomiting",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1636612399.249800",
        "client_msg_id": "99457819-093D-4F48-A091-E5ABC4DACEFB",
        "text": "`from flumine.utils import get_runner_book`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1636612399.249800",
        "reply_count": 8,
        "reply_users_count": 2,
        "latest_reply": "1636624032.252000",
        "reply_users": [
            "U01U24AG35W",
            "U4H19D1D2"
        ],
        "replies": [
            {
                "user": "U01U24AG35W",
                "ts": "1636622202.250000"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1636622273.250800"
            },
            {
                "user": "U01U24AG35W",
                "ts": "1636622331.251000"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1636622806.251200"
            },
            {
                "user": "U01U24AG35W",
                "ts": "1636623496.251400"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1636623662.251600"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1636623667.251800"
            },
            {
                "user": "U01U24AG35W",
                "ts": "1636624032.252000"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1636624032.252000",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sL1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "from flumine.utils import get_runner_book",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    }
]