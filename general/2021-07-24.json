[
    {
        "user": "U0154JA98TH",
        "type": "message",
        "ts": "1627114961.109100",
        "edited": {
            "user": "U0154JA98TH",
            "ts": "1627115685.000000"
        },
        "client_msg_id": "fd46ca24-488d-4ff4-bacd-078e1dbd4e26",
        "text": "i was wondering the best way\/practice to cancel any unmatched bets on a market using flumine? The reason i am asking is that although i am aware that the runner context should only allow 1 active bet per market per selection, upon running the strategy i am currently testing out it seems to place another order. Thus i would like to cancel the unmatched bet placed previously by the strategy so i dont unnecessarily increase my exposure whilst getting to grips with flumine. Below is the codfe i belived should have cancelled any outstanding orders i have but this is causing errors at \"market.cancel_order(order)\". Any help very much appreciated thank you!\n\n`def process_orders(self, market, orders):`\n`        <http:\/\/logging.info|logging.info>(\"Processing orders: %s\"%(orders))`\n        `for order in orders:`\n`    `\n            `try:`\n`                <http:\/\/logging.info|logging.info>(\"Order: %s\"%(order.__dir__))`\n                `for key, value in order.__dict__.items():`\n`                    <http:\/\/logging.info|logging.info>(\"%s : %s\"%(key, value))`\n            `except:`\n`                <http:\/\/logging.info|logging.info>(\"Couldn't log order dict in method above\")`\n\n\n            `if order.status == OrderStatus.EXECUTABLE:`\n`                <http:\/\/logging.info|logging.info>(\"Order executable\")`\n\n            `market.cancel_order(order)`                \n`            `\n`            <http:\/\/logging.info|logging.info>(\"Order cancelled supposedly\")`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g04d857ee3ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/04d857ee3ad168a8451932c84c7d0d6d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Wadsworth",
            "display_name": "Jono",
            "team": "T4G9NBD2M",
            "name": "jonowads",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q+I\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i was wondering the best way\/practice to cancel any unmatched bets on a market using flumine? The reason i am asking is that although i am aware that the runner context should only allow 1 active bet per market per selection, upon running the strategy i am currently testing out it seems to place another order. Thus i would like to cancel the unmatched bet placed previously by the strategy so i dont unnecessarily increase my exposure whilst getting to grips with flumine. Below is the codfe i belived should have cancelled any outstanding orders i have but this is causing errors at \"market.cancel_order(order)\". Any help very much appreciated thank you!\n\n"
                            },
                            {
                                "type": "text",
                                "text": "def process_orders(self, market, orders):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/logging.info",
                                "text": "logging.info",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(\"Processing orders: %s\"%(orders))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        for order in orders:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            try:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/logging.info",
                                "text": "logging.info",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(\"Order: %s\"%(order.__dir__))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                for key, value in order.__dict__.items():",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                    ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/logging.info",
                                "text": "logging.info",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(\"%s : %s\"%(key, value))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            except:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/logging.info",
                                "text": "logging.info",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(\"Couldn't log order dict in method above\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n\n"
                            },
                            {
                                "type": "text",
                                "text": "            if order.status == OrderStatus.EXECUTABLE:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/logging.info",
                                "text": "logging.info",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(\"Order executable\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "            market.cancel_order(order)                ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/logging.info",
                                "text": "logging.info",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(\"Order cancelled supposedly\")",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1627121991.109700",
        "client_msg_id": "C03F09E4-80BD-4427-B381-35AB91B960A9",
        "text": "What errors you getting? ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eOe7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What errors you getting? "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0154JA98TH",
        "type": "message",
        "ts": "1627122864.109900",
        "client_msg_id": "cbbdf6bb-6daa-4e84-a207-322ae6657096",
        "text": "Traceback (most recent call last):\npythonbbauto-skrimming_1  |   File \"\/usr\/local\/lib\/python3.9\/site-packages\/flumine\/utils.py\", line 233, in call_process_orders_error_handling\npythonbbauto-skrimming_1  |     strategy.process_orders(market, strategy_orders)\npythonbbauto-skrimming_1  |   File \"\/usr\/src\/app\/syndicate_middleware\/syndicateMiddlewareMain.py\", line 232, in process_orders\npythonbbauto-skrimming_1  |     market.cancel_order(order)\npythonbbauto-skrimming_1  |   File \"\/usr\/local\/lib\/python3.9\/site-packages\/flumine\/markets\/market.py\", line 84, in cancel_order\npythonbbauto-skrimming_1  |     return t.cancel_order(order, size_reduction)\npythonbbauto-skrimming_1  |   File \"\/usr\/local\/lib\/python3.9\/site-packages\/flumine\/execution\/transaction.py\", line 69, in cancel_order\npythonbbauto-skrimming_1  |     order.cancel(size_reduction)\npythonbbauto-skrimming_1  |   File \"\/usr\/local\/lib\/python3.9\/site-packages\/flumine\/order\/order.py\", line 314, in cancel\npythonbbauto-skrimming_1  |     raise OrderUpdateError(\"Current status: %s\" % self.status)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g04d857ee3ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/04d857ee3ad168a8451932c84c7d0d6d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Wadsworth",
            "display_name": "Jono",
            "team": "T4G9NBD2M",
            "name": "jonowads",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BmPex",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Traceback (most recent call last):\npythonbbauto-skrimming_1  |   File \"\/usr\/local\/lib\/python3.9\/site-packages\/flumine\/utils.py\", line 233, in call_process_orders_error_handling\npythonbbauto-skrimming_1  |     strategy.process_orders(market, strategy_orders)\npythonbbauto-skrimming_1  |   File \"\/usr\/src\/app\/syndicate_middleware\/syndicateMiddlewareMain.py\", line 232, in process_orders\npythonbbauto-skrimming_1  |     market.cancel_order(order)\npythonbbauto-skrimming_1  |   File \"\/usr\/local\/lib\/python3.9\/site-packages\/flumine\/markets\/market.py\", line 84, in cancel_order\npythonbbauto-skrimming_1  |     return t.cancel_order(order, size_reduction)\npythonbbauto-skrimming_1  |   File \"\/usr\/local\/lib\/python3.9\/site-packages\/flumine\/execution\/transaction.py\", line 69, in cancel_order\npythonbbauto-skrimming_1  |     order.cancel(size_reduction)\npythonbbauto-skrimming_1  |   File \"\/usr\/local\/lib\/python3.9\/site-packages\/flumine\/order\/order.py\", line 314, in cancel\npythonbbauto-skrimming_1  |     raise OrderUpdateError(\"Current status: %s\" % self.status)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0154JA98TH",
        "type": "message",
        "ts": "1627123288.114700",
        "client_msg_id": "455dcd41-8a7c-43d9-aeb8-137bea7deb2f",
        "text": "Is flumine set up to be able to pick up orders already placed in the event of a stream ending error? Similarly is there a way of using it to process generic orders placed ie bets placed through the api not placed using flumine for a strategy or those placed on the exchange manually",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g04d857ee3ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/04d857ee3ad168a8451932c84c7d0d6d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Wadsworth",
            "display_name": "Jono",
            "team": "T4G9NBD2M",
            "name": "jonowads",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q=kr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is flumine set up to be able to pick up orders already placed in the event of a stream ending error? Similarly is there a way of using it to process generic orders placed ie bets placed through the api not placed using flumine for a strategy or those placed on the exchange manually"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U028ZPVJ45T",
        "text": "<@U028ZPVJ45T> has joined the channel",
        "type": "message",
        "ts": "1627130695.114900"
    },
    {
        "subtype": "channel_join",
        "user": "U02998TUYN8",
        "text": "<@U02998TUYN8> has joined the channel",
        "type": "message",
        "ts": "1627150968.115100"
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1627155370.117000",
        "client_msg_id": "171D7D08-CD16-4771-A5EA-22E031FB2B19",
        "text": "That’s odd the only way you would get that error is if the order is not executable but you have an if statement handling that although it looks like it isn’t actually in the if? Or has the formatting on the message fucked it?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AL9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That’s odd the only way you would get that error is if the order is not executable but you have an if statement handling that although it looks like it isn’t actually in the if? Or has the formatting on the message fucked it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U02935SKX98",
        "text": "<@U02935SKX98> has joined the channel",
        "type": "message",
        "ts": "1627160331.117200"
    }
]