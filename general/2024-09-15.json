[
    {
        "user": "U06PDHLH3PZ",
        "type": "message",
        "ts": "1726389146.639779",
        "client_msg_id": "bf4de5a4-5208-4a26-b924-cbfa9ac0e8fc",
        "text": "I recently separated my market recorder and strategy code and this has caused the market recorder to start generating enormous logs full of warnings like these :\n\n```{\"asctime\": \"2024-09-14 18:04:50,227\", \"levelname\": \"WARNING\", \"message\": \"Order 361076840419 not present in blotter\", \"bet_id\": \"361076840419\", \"market_id\": \"1.232946144\", \"customer_strategy_ref\": \"ip-172-26-2-232\", \"customer_order_ref\": \"fbcd952b00c57-139456298400765211\", \"client_username\": \"xxxxxxx\"}\n{\"asctime\": \"2024-09-14 18:04:50,227\", \"levelname\": \"WARNING\", \"message\": \"Strategy not available to create order 139456298400765211\", \"bet_id\": \"361076840419\", \"market_id\": \"1.232946144\", \"customer_strategy_ref\": \"ip-172-26-2-232\", \"customer_order_ref\": \"fbcd952b00c57-139456298400765211\", \"strategy_name_hash\": \"fbcd952b00c57\"}```\nCan I safely suppress these with a logging filter or do they indicate that I'm doing something wrong? All the recorder's connections are specified as DataStream which I thought meant that they wouldn't receive any order info?\n\n```racing_recorder = S3MarketRecorder(\n    name=\"RACING_RECORDER\",\n    market_filter=betfairlightweight.filters.streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\",\"IE\",\"FR\"],\n        market_types=[\"WIN\"],\n    ),\n    stream_class=DataStream,\n    context={\n        \"local_dir\": local_dir,\n        \"force_update\": False,\n        \"remove_file\": True,\n        \"remove_gz_file\": True,\n        \"recorder_id\": recorder_id,\n        \"bucket\":\"xxxxxx\",\n    },\n)```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "d3d0e1b16af0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6810161706994_d3d0e1b16af0b1f4d487_72.png",
            "first_name": "johnnb",
            "real_name": "johnnb",
            "display_name": "Johnnb",
            "team": "T4G9NBD2M",
            "name": "ewelchlogistics",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "reply_count": 10,
        "reply_users_count": 3,
        "latest_reply": "1726422423.692189",
        "reply_users": [
            "U02RN7YDRQ9",
            "U06PDHLH3PZ",
            "U4H19D1D2"
        ],
        "replies": [
            {
                "user": "U02RN7YDRQ9",
                "ts": "1726389850.346579"
            },
            {
                "user": "U06PDHLH3PZ",
                "ts": "1726394585.242109"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1726396011.356009"
            },
            {
                "user": "U02RN7YDRQ9",
                "ts": "1726421130.368479"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1726421252.125489"
            },
            {
                "user": "U02RN7YDRQ9",
                "ts": "1726421305.310369"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1726421369.473389"
            },
            {
                "user": "U02RN7YDRQ9",
                "ts": "1726421462.290509"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1726421509.203599"
            },
            {
                "user": "U06PDHLH3PZ",
                "ts": "1726422423.692189"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1726422423.692189",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c5uBf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I recently separated my market recorder and strategy code and this has caused the market recorder to start generating enormous logs full of warnings like these :\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "{\"asctime\": \"2024-09-14 18:04:50,227\", \"levelname\": \"WARNING\", \"message\": \"Order 361076840419 not present in blotter\", \"bet_id\": \"361076840419\", \"market_id\": \"1.232946144\", \"customer_strategy_ref\": \"ip-172-26-2-232\", \"customer_order_ref\": \"fbcd952b00c57-139456298400765211\", \"client_username\": \"xxxxxxx\"}\n{\"asctime\": \"2024-09-14 18:04:50,227\", \"levelname\": \"WARNING\", \"message\": \"Strategy not available to create order 139456298400765211\", \"bet_id\": \"361076840419\", \"market_id\": \"1.232946144\", \"customer_strategy_ref\": \"ip-172-26-2-232\", \"customer_order_ref\": \"fbcd952b00c57-139456298400765211\", \"strategy_name_hash\": \"fbcd952b00c57\"}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can I safely suppress these with a logging filter or do they indicate that I'm doing something wrong? All the recorder's connections are specified as DataStream which I thought meant that they wouldn't receive any order info?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "racing_recorder = S3MarketRecorder(\n    name=\"RACING_RECORDER\",\n    market_filter=betfairlightweight.filters.streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\",\"IE\",\"FR\"],\n        market_types=[\"WIN\"],\n    ),\n    stream_class=DataStream,\n    context={\n        \"local_dir\": local_dir,\n        \"force_update\": False,\n        \"remove_file\": True,\n        \"remove_gz_file\": True,\n        \"recorder_id\": recorder_id,\n        \"bucket\":\"xxxxxx\",\n    },\n)"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1726389850.346579",
        "client_msg_id": "e5ae2ff7-b2e3-4bd8-8548-0882058de724",
        "text": "That looks ok - must have left some strategy stuff in - the example works out of the box - look at that <https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/strategies\/marketrecorder.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "parent_user_id": "U06PDHLH3PZ",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/strategies\/marketrecorder.py",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/strategies\/marketrecorder.py | marketrecorder.py>",
                "text": "```\nimport os\nimport json\nimport time\nimport logging\nimport gzip\nimport boto3\nimport queue\nimport threading\nfrom boto3.s3.transfer import S3Transfer, TransferConfig\nfrom botocore.exceptions import BotoCoreError\n\nfrom flumine import BaseStrategy\nfrom flumine.utils import create_short_uuid, file_line_count\n\nlogger = logging.getLogger(__name__)\n\n\nclass MarketRecorder(BaseStrategy):\n    \"\"\"\n    Simple raw streaming market recorder, context:\n\n        market_expiration: int, Seconds to wait after market closure before removing files\n        remove_file: bool, Remove txt file during cleanup\n        remove_gz_file: bool, Remove gz file during cleanup\n        force_update: bool, Update zip\/closure if update received after closure\n        load_market_catalogue: bool, Store marketCatalogue as {marketId}.json\n        local_dir: str, Dir to store data\n        recorder_id: str, Directory name (defaults to random uuid)\n    \"\"\"\n\n    MARKET_ID_LOOKUP = \"id\"\n\n    def __init__(self, *args, **kwargs):\n        BaseStrategy.__init__(self, *args, **kwargs)\n        self._market_expiration = self.context.get(\"market_expiration\", 3600)  # seconds\n        self._remove_file = self.context.get(\"remove_file\", False)\n        self._remove_gz_file = self.context.get(\"remove_gz_file\", False)\n        self._force_update = self.context.get(\"force_update\", True)\n        self._load_market_catalogue = self.context.get(\"load_market_catalogue\", True)\n        self.local_dir = self.context.get(\"local_dir\", \"\/tmp\")\n        self.recorder_id = self.context.get(\"recorder_id\", create_short_uuid())\n        self._loaded_markets = []  # list of marketIds\n        self._queue = queue.Queue()\n\n    def add(self, flumine) -> None:\n        <http:\/\/logger.info|logger.info>(\"Adding strategy %s with id %s\", self.name, self.recorder_id)\n        # check local dir\n        if not os.path.isdir(self.local_dir):\n            raise OSError(\"File dir %s does not exist\" % self.local_dir)\n        # create sub dir\n        directory = os.path.join(self.local_dir, self.recorder_id)\n        if not os.path.exists(directory):\n            os.makedirs(directory)\n\n    def start(self, flumine) -> None:\n        # start load processor thread\n        threading.Thread(\n            name=\"{0}_load_processor\".format(self.name),\n            target=self._load_processor,\n            daemon=True,\n        ).start()\n\n    def process_raw_data(self, clk: str, publish_time: int, data: dict):\n        market_id = data.get(self.MARKET_ID_LOOKUP)\n        file_directory = os.path.join(self.local_dir, self.recorder_id, market_id)\n        with open(file_directory, \"a\") as f:\n            f.write(\n                json.dumps(\n                    {\"op\": \"mcm\", \"clk\": clk, \"pt\": publish_time, \"mc\": [data]},\n                    separators=(\",\", \":\"),\n                )\n                + \"\\n\"\n            )\n\n    def process_closed_market(self, market, data: dict) -> None:\n        market_id = data.get(self.MARKET_ID_LOOKUP)\n        if market_id in self._loaded_markets:\n            if self._force_update:\n                logger.warning(\n                    \"File: \/{0}\/{1}\/{2} has already been loaded, updating..\".format(\n                        self.local_dir, self.recorder_id, market_id\n                    )\n                )\n            else:\n                return\n        else:\n            self._loaded_markets.append(market_id)\n        <http:\/\/logger.info|logger.info>(\"Closing market %s\" % market_id)\n\n        file_dir = os.path.join(self.local_dir, self.recorder_id, market_id)\n        market_definition = data.get(\"marketDefinition\")\n\n        # check that file actually exists\n        if not os.path.isfile(file_dir):\n            logger.error(\n                \"File: %s does not exist in \/%s\/%s\/\",\n                self.local_dir,\n                market_id,\n                self.recorder_id,\n            )\n            return\n\n        # check that file is not empty \/ 1 line (i.e. the market had already closed on startup)\n        line_count = file_line_count(file_dir)\n        if line_count == 1:\n            logger.warning(\n                \"File: %s contains one line only and will not be loaded (already closed on startup)\"\n                % file_dir\n            )\n            return\n\n        self._queue.put((market, file_dir, market_definition))\n\n    def _load_processor(self):\n        # process compression\/load in thread\n        while True:\n            market, file_dir, market_definition = self._queue.get(block=True)\n            # check file still exists (potential race condition)\n            if not os.path.isfile(file_dir):\n                logger.warning(\n                    \"File: %s does not exist in %s\", market.market_id, file_dir\n                )\n                continue\n            # compress file\n            compress_file_dir = self._compress_file(file_dir)\n            # core load code\n            self._load(market, compress_file_dir, market_definition)\n            # clean up\n            self._clean_up()\n\n    def _compress_file(self, file_dir: str) -> str:\n        \"\"\"compresses txt file into filename.gz\"\"\"\n        compressed_file_dir = \"{0}.gz\".format(file_dir)\n        with open(file_dir, \"rb\") as f:\n            with gzip.open(compressed_file_dir, \"wb\") as compressed_file:\n                compressed_file.writelines(f)\n        return compressed_file_dir\n\n    def _load(self, market, compress_file_dir: str, market_definition: dict) -> None:\n        # store marketCatalogue data `{marketId}.json.gz`\n        if market and self._load_market_catalogue:\n            if market.market_catalogue is None:\n                logger.warning(\n                    \"No marketCatalogue data available for %s\" % market.market_id\n                )\n                return\n            market_catalogue_compressed = self._compress_catalogue(\n                market.market_catalogue\n            )\n            # save to file\n            file_dir = os.path.join(\n                self.local_dir, self.recorder_id, \"{0}.json.gz\".format(market.market_id)\n            )\n            with open(file_dir, \"wb\") as f:\n                f.write(market_catalogue_compressed)\n\n    @staticmethod\n    def _compress_catalogue(market_catalogue) -> bytes:\n        market_catalogue_dumped = market_catalogue.json()\n        if isinstance(market_catalogue_dumped, str):\n            market_catalogue_dumped = market_catalogue_dumped.encode(\"utf-8\")\n        return gzip.compress(market_catalogue_dumped)\n\n    def _clean_up(self) -> None:\n        \"\"\"If gz > market_expiration old remove\n        gz and txt file\n        \"\"\"\n        directory = os.path.join(self.local_dir, self.recorder_id)\n        for file in os.listdir(directory):\n            if file.endswith(\".gz\"):\n                gz_path = os.path.join(directory, file)\n                file_stats = os.stat(gz_path)\n                seconds_since = time.time() - file_stats.st_mtime\n                if seconds_since > self._market_expiration:\n                    if self._remove_gz_file:\n                        <http:\/\/logger.info|logger.info>(\n                            \"Removing: %s, age: %ss\", gz_path, round(seconds_since, 2)\n                        )\n                        os.remove(gz_path)\n                    txt_path = os.path.join(directory, file.split(\".gz\")[0])\n                    if os.path.exists(txt_path) and self._remove_file:\n                        file_stats = os.stat(txt_path)\n                        seconds_since = time.time() - file_stats.st_mtime\n                        if seconds_since > self._market_expiration:\n                            <http:\/\/logger.info|logger.info>(\n                                \"Removing: %s, age: %ss\",\n                                txt_path,\n                                round(seconds_since, 2),\n                            )\n                            os.remove(txt_path)\n\n    @staticmethod\n    def _create_metadata(market_definition: dict) -> dict:\n        try:\n            del market_definition[\"runners\"]\n        except KeyError:\n      …",
                "title": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/strategies\/marketrecorder.py | marketrecorder.py>",
                "footer": "<https:\/\/github.com\/betcode-org\/flumine|betcode-org\/flumine>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vh7LB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That looks ok - must have left some strategy stuff in - the example works out of the box - look at that "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/master\/examples\/strategies\/marketrecorder.py"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06PDHLH3PZ",
        "type": "message",
        "ts": "1726394585.242109",
        "client_msg_id": "E9D0F431-588F-4B2A-8CE5-D9D3C95DAAE2",
        "text": "Thanks. I'll try starting again from scratch using the example",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "d3d0e1b16af0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6810161706994_d3d0e1b16af0b1f4d487_72.png",
            "first_name": "johnnb",
            "real_name": "johnnb",
            "display_name": "Johnnb",
            "team": "T4G9NBD2M",
            "name": "ewelchlogistics",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "parent_user_id": "U06PDHLH3PZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1sR1b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I'll try starting again from scratch using the example"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1726396011.356009",
        "client_msg_id": "A7DCFAE5-59BB-4BF7-9CA2-0328C77F42B6",
        "text": "It’s because you are running both with the same hostname, hardcode it to something on the recorder (it’s in the config)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "parent_user_id": "U06PDHLH3PZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jRna8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s"
                            },
                            {
                                "type": "text",
                                "text": " because you are running both with the same hostname, hardcode it to something on the recorder ("
                            },
                            {
                                "type": "text",
                                "text": "it’s"
                            },
                            {
                                "type": "text",
                                "text": " in the config)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1726421130.368479",
        "client_msg_id": "86d97dcb-6352-443d-b9de-dd2582b3bdc0",
        "text": "My config.py is as package download and runs fine without changing ? I run recorder and live betting in separate processes so totally different framework - may be relevant <@U4H19D1D2> ?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "parent_user_id": "U06PDHLH3PZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7SRhc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My config.py is as package download and runs fine without changing ? I run recorder and live betting in separate processes so totally different framework - may be relevant "
                            },
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": " ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1726421252.125489",
        "client_msg_id": "642CDE8B-CE09-4CAB-98AA-4F45D34BC0DD",
        "text": "What os?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "parent_user_id": "U06PDHLH3PZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b+QrX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What os?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1726421305.310369",
        "client_msg_id": "05a97caf-24e6-4d96-9604-4a10c62ebdfa",
        "text": "Windows :confused:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "parent_user_id": "U06PDHLH3PZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LbshA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Windows "
                            },
                            {
                                "type": "emoji",
                                "name": "confused",
                                "unicode": "1f615"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "face_vomiting",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1726421369.473389",
        "client_msg_id": "332A521A-61A2-4E56-9EC5-D6BBE0EC30AA",
        "text": "Who knows with windows but flumine uses the hostname to separate orders (strategies) so you will get this when running multiple flumine instances on the same host ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "parent_user_id": "U06PDHLH3PZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iCzPW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Who knows with windows but flumine uses the hostname to separate orders (strategies) so you will get this when running multiple flumine instances on the same host "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1726421462.290509",
        "client_msg_id": "0a59d255-ccf9-4f20-9fee-4d632c01ed83",
        "text": "This might be the answer\n```client = MyBetfairClient(trading, order_stream=False, market_recording_mode=True)```\n",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "parent_user_id": "U06PDHLH3PZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pekTE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This might be the answer\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "client = MyBetfairClient(trading, order_stream=False, market_recording_mode=True)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1726421509.203599",
        "client_msg_id": "B2B98149-54E3-415C-A5C3-3769D437F816",
        "text": "Yeah that will solve it as the order stream won’t start, <@U06PDHLH3PZ> do that ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "parent_user_id": "U06PDHLH3PZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pbnEr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah that will solve it as the order stream "
                            },
                            {
                                "type": "text",
                                "text": "won’t"
                            },
                            {
                                "type": "text",
                                "text": " start, "
                            },
                            {
                                "type": "user",
                                "user_id": "U06PDHLH3PZ"
                            },
                            {
                                "type": "text",
                                "text": " do that "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06PDHLH3PZ",
        "type": "message",
        "ts": "1726422423.692189",
        "client_msg_id": "873f1dd7-0f8d-4b2d-9d94-87a8fa5c4b86",
        "text": "Thanks <@U02RN7YDRQ9> and <@U4H19D1D2>, I'll give that a go tomorrow :pray:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "d3d0e1b16af0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6810161706994_d3d0e1b16af0b1f4d487_72.png",
            "first_name": "johnnb",
            "real_name": "johnnb",
            "display_name": "Johnnb",
            "team": "T4G9NBD2M",
            "name": "ewelchlogistics",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726389146.639779",
        "parent_user_id": "U06PDHLH3PZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dpdWM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U02RN7YDRQ9"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": ", I'll give that a go tomorrow "
                            },
                            {
                                "type": "emoji",
                                "name": "pray",
                                "unicode": "1f64f"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]