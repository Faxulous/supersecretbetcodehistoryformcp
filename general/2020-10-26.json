[
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1603705138.112800",
        "client_msg_id": "387a88b3-bcf7-43ff-8e50-7f2672f326a1",
        "text": "<https:\/\/github.com\/liampauling\/betfair\/blob\/master\/HISTORY.rst#291-2020-10-26|2.9.1> released, historic improvement (<@UBS7QANF3>) and I have moved all C\/Rust libraries to a speed install\n```pip install betfairlightweight[speed]```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[liampauling\/betfair] HISTORY.rst",
                "text": "```\n.. :changelog:\n\nRelease History\n---------------\n\n2.9.1 (2020-10-26)\n+++++++++++++++++++\n\n**Improvements**\n\n- #345: Improve Historic.download_file (@mberk)\n\n**Dependencies**\n\n- orjson and ciso8601 moved to optional requirement using `pip install betfairlightweight[speed]`\n\n2.9.0 (2020-10-12)\n+++++++++++++++++++\n\n**Improvements**\n\n- Fix types for list_race_details (synapticarbors)\n- #340 cache removal added on old markets (8 hours closed)\n- Streaming snap added to resources\n\n**Bug Fixes**\n\n- PR added to actions\n\n**Dependencies**\n\n- py3.9 added to tests\n- orjson updated to 3.4.0\n\n2.8.0 (2020-09-14)\n+++++++++++++++++++\n\n**Improvements**\n\n- Transaction count updated to 5000\n- Minor codebase cleanup\n\n**Dependencies**\n\n- #328 ujson migrated to orjson\n- black updated to 20.8b1\n\n2.7.2 (2020-08-03)\n+++++++++++++++++++\n\n**Improvements**\n\n- Historical streaming cleanup (operation)\n\n2.7.1 (2020-08-03)\n+++++++++++++++++++\n\n**Improvements**\n\n- #325 listener.status property added\n\n**Dependencies**\n\n- ujson bumped to 3.1.0\n\n2.7.0 (2020-07-27)\n+++++++++++++++++++\n\n**Improvements**\n\n- #308 remove directory warnings \/ handling (breaking change)\n- #318 include streaming_update in generator\n\n**Bug Fixes**\n\n- #320 generator reuse fix\n\n2.6.0 (2020-07-09)\n+++++++++++++++++++\n\n**Improvements**\n\n- Response (_response) removed from BaseResources due to potential memory leaks\n\n**Bug Fixes**\n\n- marketType bug fix (politics markets)\n\n2.5.0 (2020-06-22)\n+++++++++++++++++++\n\n**Improvements**\n\n- #308 rename directory to file_path\n\n**Bug Fixes**\n\n- #301 uncaught Error in list_market_book\n\n**Dependencies**\n\n- requests bumped to &lt; 2.25.0\n\n2.4.0 (2020-06-09)\n+++++++++++++++++++\n\n**Improvements**\n\n- Github actions added\n\n**Bug Fixes**\n\n- #304 missing regulator auth code\n\n**Dependencies**\n\n- ujson upgraded from 2.0.3 to 3.0.0\n\n2.3.1 (2020-05-12)\n+++++++++++++++++++\n\n**Improvements**\n\n- LRUCache added to strip datetime\n- NemID docs added\n\n2.3.0 (2020-04-06)\n+++++++++++++++++++\n\n**Dependencies**\n\n- ujson upgraded to 2.0.3\n- c based libraries restricted to darwin and linux platforms only\n\n2.2.0 (2020-03-09)\n+++++++++++++++++++\n\n**Improvements**\n\n- #283 max_latency can now be set to None\n\n**Dependencies**\n\n- requests upgraded from 2.22.0 to 2.23.0\n- ujson upgraded from 1.35 to 2.0.1 (updates to compat.py)\n\n2.1.0 (2020-03-02)\n+++++++++++++++++++\n\n**Improvements**\n\n- datetime handling added to time_range filter (@trigvi)\n- connectionsAvailable handling added\n\n**Bug Fixes**\n\n- #273 error handling added for markets without marketDefinition\n- #233 sendall used instead of send so that all data is sent (bug present since 2016!)\n\n2.0.1 (2020-02-17)\n+++++++++++++++++++\n\n**Improvements**\n\n- Listener.add_stream cleanup\n\n**Bug Fixes**\n\n- #268 CPU bug when using response.text\n\n2.0.0 (2020-02-10)\n+++++++++++++++++++\n\n**Improvements**\n\n- *Breaking* async removed from streaming (force user to handle thread)\n- *Breaking* Description removed from 'create_stream'\n- Black formatting on all files\n- python 'Typing' added\n- locale added to Navigation\n- Certificate error messages improved\n- Logging added to socket send\n- __version__ file added and refactor to setup.py\n- __version__ added to user agent\n- raw requests Response added to objects\n- elapsed_time now uses time() rather than datetime\n- session can be passed to client\n- streaming example with error handling and retry added\n- mkdocs used for documentation\n\n**Bug Fixes**\n\n- #217 correct usage of ujson (refactor)\n- Australia login interactive domain fixed\n- Correct session timeout added for int and italy exchange\n\n**Dependencies**\n\n- ciso8601 upgraded from 2.0.1 to 2.1.3\n- python 3 only\n- python 3.8 testing added\n\n1.10.4 (2019-10-28)\n+++++++++++++++++++\n\n**Bug Fixes**\n\n- handicap added to LegacyData\n\n1.10.3 (2019-09-30)\n+++++++++++++++++++\n\n**Improvements**\n\n- Remove py3.4 support\n\n**Bug Fixes**\n\n- #232 RuntimeError fixed on serialize_orders\n- avgPriceRaw added to LegacyData (@d3alek)\n\n**Dependencies**\n\n- requests upgraded \/ unpinned from exact version\n\n1.10.2 (2019-09-02)\n+++++++++++++++++++\n\n**Improvements**\n\n- OrderCache \/ UnmatchedOrder logic improved\n- streaming_update and streaming_unique_id added to lightweight response\n\n**Bug Fixes**\n\n- handicap bugfix on OrderCache\n- Missing closed logic added to OrderCache\n\n1.10.1 (2019-08-12)\n+++++++++++++++++++\n\n**Improvements**\n\n- RaceCard get_race_result function added (used by mobile app)\n- Streaming generator listener now defaults to StreamListener\n\n**Bug Fixes**\n\n- #221 inplayservice subdomain updated (ips)\n- #215 marketCatalogue no ERO data\n\n1.10.0 (2019-05-26)\n+++++++++++++++++++\n\n**Improvements**\n\n- #163 Historical stream generator added (no threads)\n\n**Bug Fixes**\n\n- #165 error handling added to closed connection\n- #175 locals.copy() used to prevent OverflowError in VSCode\n\n1.9.1 (2019-04-04)\n+++++++++++++++++++\n\n**Improvements**\n\n- #54 listRunnerBook added to .betting\n\n1.9.0 (2019-04-04)\n+++++++++++++++++++\n\n**Bug Fixes**\n\n- #206 _async renamed to async_ due to camel case bug\n\n1.8.3 (2019-02-02)\n+++++++++++++++++++\n\n**Improvements**\n\n- Cert endpoints updated.\n- License update.\n- Readme update.\n\n**Bug Fixes**\n\n- Travis now builds py3.7!\n\n1.8.2 (2018-11-23)\n+++++++++++++++++++\n\n**Improvements**\n\n- Certificate url for login updated.\n- publish_time_epoch added to MarketBook.\n- marketDefinition added to serialise so that lightweight has it returned.\n\n1.8.1 (2018-10-12)\n+++++++++++++++++++\n\n**Improvements**\n\n- Str representation added to PriceSize object.\n\n**Bug Fixes**\n\n- RaceCard resource bug fix.\n\n**Dependencies**\n\n- Upgrade to requests 2.20.1 (security fix)\n\n1.8.0 (2018-10-08)\n+++++++++++++++++++\n\n**Improvements**\n\n- LoginInteractive endpoint added.\n- User-Agent added to request headers.\n\n**Bug Fixes**\n\n- Error handling added to RaceCard.login()\n\n1.7.2 (2018-08-06)\n+++++++++++++++++++\n\n**Bug Fixes**\n\n- requirements.txt added to MANIFEST\n\n1.7.1 (2018-08-06)\n+++++++++++++++++++\n\n**Improvements**\n\n- Now working on py3.7!\n- setup.py updated to use requirements only.\n- py3.7 added to appveyor but pending travis to get their act together.\n- Travis and appveyor yml cleanup.\n\n**Bug Fixes**\n\n- async renamed to _async in betting endpoint for py3.7\n\n1.7.0 (2018-07-23)\n+++++++++++++++++++\n\n**Improvements**\n\n- Better logging when market added to cache and initial socket responses.\n\n**Bug Fixes**\n\n- Refactor of the use of update_cache to prevent duplicate RunnerBook objects #180.\n- Spanish URL updated, closes #164.\n\n**Breaking Changes**\n\n- async renamed to _async due to it being a reserved word in py3.7.\n\n1.6.4 (2018-06-22)\n+++++++++++++++++++\n\n**Improvements**\n\n- Build.sh and HISTORY.rst added\n\n**Dependencies**\n\n- Upgrade to ciso8601 2.0.1\n- Upgrade to requests 2.19.1\n\n```",
                "title": "HISTORY.rst",
                "footer": "<https:\/\/github.com\/liampauling\/betfair|liampauling\/betfair>",
                "id": 1,
                "title_link": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/HISTORY.rst",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/HISTORY.rst#291-2020-10-26",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HFw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/betfair\/blob\/master\/HISTORY.rst#291-2020-10-26",
                                "text": "2.9.1"
                            },
                            {
                                "type": "text",
                                "text": " released, historic improvement ("
                            },
                            {
                                "type": "user",
                                "user_id": "UBS7QANF3"
                            },
                            {
                                "type": "text",
                                "text": ") and I have moved all C\/Rust libraries to a speed install\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "pip install betfairlightweight[speed]"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBS7QANF3",
                    "U01C12ZEADQ",
                    "UPMUFSGCR",
                    "UE72WCRR8"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U01BBMTK6R3",
        "type": "message",
        "ts": "1603711541.117200",
        "client_msg_id": "c270495f-bdd6-41e4-86e2-227070e9b07b",
        "text": "when I tried to output the back test Order list  of backtesr.py to cvs through logging control in flumine, I get different order history each time on release mode, and in debug mode order history is consistent. My question is that are we supposed to get the same order list each time we run backtesr.py? Anyone can share an example of  a csv logging control? Thanks.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gc439db68a96",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c439db68a965588cbce0ffd6101791df.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "danzhou2002",
            "real_name": "danzhou2002",
            "display_name": "dan2002",
            "team": "T4G9NBD2M",
            "name": "danzhou2002",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QpD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "when I tried to output the back test Order list  of backtesr.py to cvs through logging control in flumine, I get different order history each time on release mode, and in debug mode order history is consistent. My question is that are we supposed to get the same order list each time we run backtesr.py? Anyone can share an example of  a csv logging control? Thanks."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUCD6P13J",
        "type": "message",
        "ts": "1603712022.119400",
        "client_msg_id": "09a4c90c-b524-4f0d-a68a-43d26f1163ef",
        "text": "i only use the logging control for running live. when backtesting i get the orders the same way as this example and the output is consistent. <https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/backtest.py#L34>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6898272ab81",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6898272ab810e419c2c9ca9af1e53da8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0012-72.png",
            "first_name": "Lee",
            "real_name": "Lee U",
            "display_name": "Lee",
            "team": "T4G9NBD2M",
            "name": "lunswor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[liampauling\/flumine] examples\/backtest.py:34",
                "text": "```\nfor market in framework.markets:\n```",
                "title": "examples\/backtest.py:34",
                "footer": "<https:\/\/github.com\/liampauling\/flumine|liampauling\/flumine>",
                "id": 1,
                "title_link": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/backtest.py#L34",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B01144Z0734",
                "app_unfurl_url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/backtest.py#L34",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZCq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i only use the logging control for running live. when backtesting i get the orders the same way as this example and the output is consistent. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/liampauling\/flumine\/blob\/master\/examples\/backtest.py#L34"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1603712480.120600",
        "client_msg_id": "96d131e8-8f03-4094-860d-64dd1361b879",
        "text": "what do you mean different order history?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z4G6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what do you mean different order history?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01BBMTK6R3",
        "type": "message",
        "ts": "1603712623.123000",
        "client_msg_id": "a49a8941-e155-4e8b-a415-1837617e1ec3",
        "text": "I wrote the orders (status, size matches etc) into a csv  after extending loggingcontrol, I got different order status, size matched etc each time I run backtesr.py on debug mode.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gc439db68a96",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c439db68a965588cbce0ffd6101791df.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "danzhou2002",
            "real_name": "danzhou2002",
            "display_name": "dan2002",
            "team": "T4G9NBD2M",
            "name": "danzhou2002",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BdHLA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wrote the orders (status, size matches etc) into a csv  after extending loggingcontrol, I got different order status, size matched etc each time I run backtesr.py on debug mode."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01BBMTK6R3",
        "type": "message",
        "ts": "1603712654.123400",
        "client_msg_id": "b239d291-0273-4104-8a1e-0d550539b745",
        "text": "Sorry I mean release mode.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gc439db68a96",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c439db68a965588cbce0ffd6101791df.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "danzhou2002",
            "real_name": "danzhou2002",
            "display_name": "dan2002",
            "team": "T4G9NBD2M",
            "name": "danzhou2002",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/70z9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry I mean release mode."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1603712659.123600",
        "client_msg_id": "f827b517-325b-408a-9583-1f041b1bb278",
        "text": "can you share some code\/market to replicate?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nueu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "can you share some code\/market to replicate?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1603712663.123800",
        "client_msg_id": "f0b8b557-a345-4a04-b6df-4d5546388889",
        "text": "what is release mode?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AL\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what is release mode?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01BBMTK6R3",
        "type": "message",
        "ts": "1603712716.124600",
        "client_msg_id": "1233cc64-099d-4523-820e-76d8b2364d7e",
        "text": "Release mode is by just pressing run button. Will share some code later.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gc439db68a96",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c439db68a965588cbce0ffd6101791df.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "danzhou2002",
            "real_name": "danzhou2002",
            "display_name": "dan2002",
            "team": "T4G9NBD2M",
            "name": "danzhou2002",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dbRV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Release mode is by just pressing run button. Will share some code later."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1603712890.125900",
        "client_msg_id": "d7743572-ca03-4000-aa1c-a202879a4387",
        "text": "I use backtesting to check for regression tests a lot so fairly sure there is no variability, there is a chance the order of the orders might be different on each run through logging control but fairly sure that wouldn't be the case",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1XFiM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use backtesting to check for regression tests a lot so fairly sure there is no variability, there is a chance the order of the orders might be different on each run through logging control but fairly sure that wouldn't be the case"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01BBMTK6R3",
        "type": "message",
        "ts": "1603743321.126400",
        "client_msg_id": "8a785f36-7ce7-4ae6-b5f9-e5a0c08449ff",
        "text": "Hi Liam, I used the following code:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gc439db68a96",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c439db68a965588cbce0ffd6101791df.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "danzhou2002",
            "real_name": "danzhou2002",
            "display_name": "dan2002",
            "team": "T4G9NBD2M",
            "name": "danzhou2002",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5\/q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi Liam, I used the following code:"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01BBMTK6R3",
        "type": "message",
        "ts": "1603743333.126600",
        "client_msg_id": "b58a75f4-29d9-4782-916a-def448977ac2",
        "text": "```logger = logging.getLogger(__name__)\n\nclass LoggingControlDan(LoggingControl):\n   \n    NAME = \"LOGGING_CONTROL_Dan\"\n    def __init__(self, *args, **kwargs):\n        super(LoggingControlDan, self).__init__(*args, **kwargs)\n        order_file_name = '\/home\/dan\/order_log.csv'\n        order_file = open(order_file_name,mode='w')\n        self.order_writer = csv.writer(order_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n        self.order_writer.writerow([\"id\",\"market_id\",\"selection_id\",\"date_time_placed\",\"date_time_execution_complete\",\\\n                                       \"side\",\"status\",\"price\",\"average_price_matched\",\"size_matched\"])\n    \n    def _process_order(self, event):\n        <http:\/\/logger.info|logger.info>(\"market_id: %s\" % event.event.market_id)\n        self.order_writer.writerow([\n                \"order\"+event.event.id,\n                event.event.market_id,\n                event.event.selection_id,\n                event.event.responses.date_time_placed,\n                event.event.date_time_execution_complete,\n                event.event.side,\n                event.event.status,\n                event.event.order_type.price,\n                event.event.average_price_matched,\n                event.event.size_matched,\n                ])```\n",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gc439db68a96",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c439db68a965588cbce0ffd6101791df.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "danzhou2002",
            "real_name": "danzhou2002",
            "display_name": "dan2002",
            "team": "T4G9NBD2M",
            "name": "danzhou2002",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xlFv",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "logger = logging.getLogger(__name__)\n\nclass LoggingControlDan(LoggingControl):\n   \n    NAME = \"LOGGING_CONTROL_Dan\"\n    def __init__(self, *args, **kwargs):\n        super(LoggingControlDan, self).__init__(*args, **kwargs)\n        order_file_name = '\/home\/dan\/order_log.csv'\n        order_file = open(order_file_name,mode='w')\n        self.order_writer = csv.writer(order_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n        self.order_writer.writerow([\"id\",\"market_id\",\"selection_id\",\"date_time_placed\",\"date_time_execution_complete\",\\\n                                       \"side\",\"status\",\"price\",\"average_price_matched\",\"size_matched\"])\n    \n    def _process_order(self, event):\n        logger.info(\"market_id: %s\" % event.event.market_id)\n        self.order_writer.writerow([\n                \"order\"+event.event.id,\n                event.event.market_id,\n                event.event.selection_id,\n                event.event.responses.date_time_placed,\n                event.event.date_time_execution_complete,\n                event.event.side,\n                event.event.status,\n                event.event.order_type.price,\n                event.event.average_price_matched,\n                event.event.size_matched,\n                ])"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1603744029.127600",
        "client_msg_id": "F2885706-F406-48CC-91A6-41C305F8B1EB",
        "text": "What does the strategy look like? Are you saying you get completely different data written to the csv on each run?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E9Iy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does the strategy look like? Are you saying you get completely different data written to the csv on each run?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01BBMTK6R3",
        "type": "message",
        "ts": "1603744495.129000",
        "client_msg_id": "ecc7c926-5607-43e3-a64a-bf5166a4d1d5",
        "text": "the strategy is the LowestLayer strategy in backtest.py, i get slightly different result(same number of rows\/orders, but slightly different in terms of fills)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gc439db68a96",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c439db68a965588cbce0ffd6101791df.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "danzhou2002",
            "real_name": "danzhou2002",
            "display_name": "dan2002",
            "team": "T4G9NBD2M",
            "name": "danzhou2002",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3PNo2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the strategy is the LowestLayer strategy in backtest.py, i get slightly different result(same number of rows\/orders, but slightly different in terms of fills)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "",
        "files": [
            {
                "id": "F01DR5PSXPT",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U01BBMTK6R3",
        "display_as_bot": false,
        "type": "message",
        "ts": "1603744729.129400"
    },
    {
        "subtype": "channel_join",
        "user": "U01DCR5PXDY",
        "text": "<@U01DCR5PXDY> has joined the channel",
        "type": "message",
        "ts": "1603753394.129800"
    },
    {
        "subtype": "channel_join",
        "user": "U01DDBUL2MR",
        "text": "<@U01DDBUL2MR> has joined the channel",
        "type": "message",
        "ts": "1603771154.130000"
    }
]