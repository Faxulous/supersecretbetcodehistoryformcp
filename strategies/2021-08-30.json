[
    {
        "user": "UGV299K6H",
        "type": "message",
        "ts": "1630320907.024200",
        "client_msg_id": "f5d5d44b-052c-421e-a3ed-8facd23f46ab",
        "text": "<@UEA14GBRR> if you want to view means across a range you've got no choice but to chunk. The other way is to do a running total which you might prefer (fair enough) but that adds a layer of interpretation to understanding the plot as you're having to interpret the change in gradient rather than just looking at the height of the line. For my part I don't see the merit of it, if you're looking at the performance of a variable against profit I think using a running total is quite counter intuitive compared to just looking at the means.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3a262a3cfba",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3a262a3cfba292c18acf5777f65908a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Michael",
            "real_name": "Michael C",
            "display_name": "Michael",
            "team": "T4G9NBD2M",
            "name": "michael",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630136117.009200",
        "parent_user_id": "UPMUFSGCR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O68K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEA14GBRR"
                            },
                            {
                                "type": "text",
                                "text": " if you want to view means across a range you've got no choice but to chunk. The other way is to do a running total which you might prefer (fair enough) but that adds a layer of interpretation to understanding the plot as you're having to interpret the change in gradient rather than just looking at the height of the line. For my part I don't see the merit of it, if you're looking at the performance of a variable against profit I think using a running total is quite counter intuitive compared to just looking at the means."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Here's an example of what I mean - this is my bread and butter plot:",
        "files": [
            {
                "id": "F02DFRZ4DTJ",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UGV299K6H",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7LHM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's an example of what I mean - this is my bread and butter plot:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1630322279.024400",
        "thread_ts": "1630136117.009200",
        "parent_user_id": "UPMUFSGCR"
    },
    {
        "user": "UGV299K6H",
        "type": "message",
        "ts": "1630322373.024600",
        "client_msg_id": "b88ace3c-b8b2-4d94-a9a8-8ba136e4ebb9",
        "text": "The X axis is a signal variable, the red bars are mean profit on the relevant bets and the red line is mean profit if all bets in the chunk matched. You can see 90% of what you need to know at a glance.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3a262a3cfba",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3a262a3cfba292c18acf5777f65908a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Michael",
            "real_name": "Michael C",
            "display_name": "Michael",
            "team": "T4G9NBD2M",
            "name": "michael",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630136117.009200",
        "parent_user_id": "UPMUFSGCR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mRIte",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The X axis is a signal variable, the red bars are mean profit on the relevant bets and the red line is mean profit if all bets in the chunk matched. You can see 90% of what you need to know at a glance."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01MPC0GUK1",
        "type": "message",
        "ts": "1630350543.024900",
        "client_msg_id": "03885730-77f7-4473-afd3-332f7a13089b",
        "text": "<@UGV299K6H> are you plotting that from a dataframe where each row is a bet and there's profit in one column and the signal value in another?  I normally just plot cumulative profit against the signal with something like this:\n\n```df.groupby('signal')['profit'].sum().cumsum().plot()```\nI'd like to get a plot like yours, but my skills with dataframes are pretty poor. Would you care to enlighten me how you generate that plot?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "3be8fa875ec4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-15\/1752388211523_3be8fa875ec4866620ff_72.png",
            "first_name": "Beeblebrox",
            "real_name": "Beeblebrox",
            "display_name": "Beeblebrox",
            "team": "T4G9NBD2M",
            "name": "arch4672",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630136117.009200",
        "parent_user_id": "UPMUFSGCR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1h6l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGV299K6H"
                            },
                            {
                                "type": "text",
                                "text": " are you plotting that from a dataframe where each row is a bet and there's profit in one column and the signal value in another?  I normally just plot cumulative profit against the signal with something like this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "df.groupby('signal')['profit'].sum().cumsum().plot()"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI'd like to get a plot like yours, but my skills with dataframes are pretty poor. Would you care to enlighten me how you generate that plot?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGV299K6H",
        "type": "message",
        "ts": "1630354934.025500",
        "edited": {
            "user": "UGV299K6H",
            "ts": "1630450556.000000"
        },
        "client_msg_id": "4fc21f21-3a41-4206-b798-5148e259bbd7",
        "text": "Yeah - profit in one column signal values in the other.\n\nMy pandas skills are not great so I'm sure this could be done more elegantly but the overall is that you make a new dataframe by grouping the one you have, something like this:\n```lower_bound = 0\nupper_bound = 1\ninterval = 0.1\nys = ['profit', 'fm_profit']\nfeature = signal\n\ngroups = np.arange(lower_bound, upper_bound + interval, interval) \nlabels = groups[:-1]\n\ndf_1 = df.loc[:, ys].groupby(pd.cut(df[feature], groups, labels=labels)).mean().reset_index()```\nThen just plot the new dataframe however you want to:\n```df_1.profit.plot.bar()\ndf_1.fm_profit.plot()```\nI find myself always needing the same types of plots so I keep a set of pre-made plotting functions in a separate file to the notebook and just pull them in with something like:\n```%run .\/analysis_tools.ipynb```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3a262a3cfba",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3a262a3cfba292c18acf5777f65908a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Michael",
            "real_name": "Michael C",
            "display_name": "Michael",
            "team": "T4G9NBD2M",
            "name": "michael",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630136117.009200",
        "parent_user_id": "UPMUFSGCR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nbgu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah - profit in one column signal values in the other.\n\nMy pandas skills are not great so I'm sure this could be done more elegantly but the overall is that you make a new dataframe by grouping the one you have, something like this:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "lower_bound = 0\nupper_bound = 1\ninterval = 0.1\nys = ['profit', 'fm_profit']\nfeature = signal\n\ngroups = np.arange(lower_bound, upper_bound + interval, interval) \nlabels = groups[:-1]\n\ndf_1 = df.loc[:, ys].groupby(pd.cut(df[feature], groups, labels=labels)).mean().reset_index()"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Then just plot the new dataframe however you want to:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "df_1.profit.plot.bar()\ndf_1.fm_profit.plot()"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find myself always needing the same types of plots so I keep a set of pre-made plotting functions in a separate file to the notebook and just pull them in with something like:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "%run .\/analysis_tools.ipynb"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01MPC0GUK1",
        "type": "message",
        "ts": "1630357958.025700",
        "client_msg_id": "9c722cc3-0c1f-4884-a357-3b010ec0eec7",
        "text": "Marvellous. Thank you.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "3be8fa875ec4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-15\/1752388211523_3be8fa875ec4866620ff_72.png",
            "first_name": "Beeblebrox",
            "real_name": "Beeblebrox",
            "display_name": "Beeblebrox",
            "team": "T4G9NBD2M",
            "name": "arch4672",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630136117.009200",
        "parent_user_id": "UPMUFSGCR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2We",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Marvellous. Thank you."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]