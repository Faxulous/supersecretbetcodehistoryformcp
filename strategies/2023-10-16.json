[
    {
        "text": "*ML Day 70*\n\nHaven't given up, after exploring a few algos I found that using XGBoost seemed to be the most applicable \/ get the best results in terms of accuracy on the problem I was trying to solve. Using my current prediction I used the algo to predict the error (delta), from my understanding this is a common technique (does it have a name?) and proved to be far more accurate than starting 'fresh'.\n\nHad a few issues with latency when simulating using the sklearn integration as its considerably slower compared to using the low level <https:\/\/xgboost.readthedocs.io\/en\/stable\/python\/python_api.html|library>.\n\nHowever the improvements just didn't equate to more profit, I have since worked on trying to get the algo to reveal what it was doing. I started reverse engineering \/ brute force by plugging in values that I believe had the highest importance and graphing the results. Without revealing too much this gave me a regression model for the variables as opposed to an 'if statement' on the min\/max, not sure this is how I am supposed to be using machine learning but its working for me right now :joy:",
        "files": [
            {
                "id": "F0612R30M7G",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U4H19D1D2",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i3O3Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ML Day 70",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nHaven't given up, after exploring a few algos I found that using XGBoost seemed to be the most applicable \/ get the best results in terms of accuracy on the problem I was trying to solve. Using my current prediction I used the algo to predict the error (delta), from my understanding this is a common technique (does it have a name?) and proved to be far more accurate than starting 'fresh'.\n\nHad a few issues with latency when simulating using the sklearn integration as its considerably slower compared to using the low level "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/xgboost.readthedocs.io\/en\/stable\/python\/python_api.html",
                                "text": "library"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nHowever the improvements just didn't equate to more profit, I have since worked on trying to get the algo to reveal what it was doing. I started reverse engineering \/ brute force by plugging in values that I believe had the highest importance and graphing the results. Without revealing too much this gave me a regression model for the variables as opposed to an 'if statement' on the min\/max, not sure this is how I am supposed to be using machine learning but its working for me right now "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1697448820.845989",
        "client_msg_id": "1a7fcbb9-2e1e-4645-b938-54dc388d8ed2",
        "thread_ts": "1697448820.845989",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1697566156.893009",
        "reply_users": [
            "UQL0QDEKA",
            "UPMUFSGCR"
        ],
        "replies": [
            {
                "user": "UQL0QDEKA",
                "ts": "1697462839.420549"
            },
            {
                "user": "UPMUFSGCR",
                "ts": "1697566156.893009"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1697566156.893009",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U010GM77S4W"
                ],
                "count": 1
            },
            {
                "name": "slightly_smiling_face",
                "users": [
                    "U05KGFZUNAK",
                    "UPMUFSGCR"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UQL0QDEKA",
        "type": "message",
        "ts": "1697462839.420549",
        "client_msg_id": "04abb92a-5b40-4c7f-ba1a-4a6cf0665200",
        "text": "The biggest learning for me (so far) is clearly understand the problem to which you are trying to gain an insight\/solution.\nAs a complete newbie to ML I incorrectly thought that you could just supply a large datset and let ML do its thing.\nFrom the thread I started on ML, one thing im keen to delve more into is particle swarm optimisation. Time permitting.\nAs an aside; Ive been running something live since the 19th Sept based on something I found via ML and the graph looks like the flight path of the first wright bros plane :grinning:\nStill optimistic though..I think it will fly",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g444d10128c0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/444d10128c0aaf094041a52a76796602.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Peter",
            "real_name": "Peter Lenagh",
            "display_name": "PeterLe",
            "team": "T4G9NBD2M",
            "name": "lenagh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1697448820.845989",
        "parent_user_id": "U4H19D1D2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QU602",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The biggest learning for me (so far) is clearly understand the problem to which you are trying to gain an insight\/solution.\nAs a complete newbie to ML I incorrectly thought that you could just supply a large datset and let ML do its thing.\nFrom the thread I started on ML, one thing im keen to delve more into is particle swarm optimisation. Time permitting.\nAs an aside; Ive been running something live since the 19th Sept based on something I found via ML and the graph looks like the flight path of the first wright bros plane "
                            },
                            {
                                "type": "emoji",
                                "name": "grinning",
                                "unicode": "1f600"
                            },
                            {
                                "type": "text",
                                "text": "\nStill optimistic though..I think it will fly"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            },
            {
                "name": "+1::skin-tone-6",
                "users": [
                    "UPMUFSGCR"
                ],
                "count": 1
            }
        ]
    }
]