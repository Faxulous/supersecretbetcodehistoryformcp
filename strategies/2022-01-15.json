[
    {
        "subtype": "channel_join",
        "user": "U02TZNSVC3Y",
        "text": "<@U02TZNSVC3Y> has joined the channel",
        "type": "message",
        "ts": "1642248211.000400"
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1642250036.000800",
        "client_msg_id": "cf70ff36-ec47-483d-92fe-af15257c594c",
        "text": "I'm developing some analysis based on the example datacollectinwom.py and am gathering lists of data per runner for graphing etc. I hadn't allowed for getting a None price from non-runners so it blew up (expected behaviour lol). However, that got me thinking about some key assumptions I had made and I wonder if they were safe, particularly with non-runners - maybe those with more knowledge could comment.\nAssumptions:\n1) the strategy callback argument \"market_book\" is the same object as could be accessed at \"market.market_book\"\n2) the strategy callback \"check_market_book\" is made for every \"mcm\" streaming packet received and if that returns True then \"process_market_book\" is called - this means the strategy is offered every packet\n3) for each callback all the data from the supplied market\/market_book pointers has been updated to reflect the changes implied by the packet\n4) the list of runners in the market_book and their index order is invariant ie runner Fred will be at the same index in \"market_book\" from first recording through to closed market\n\nI think the first three are correct but not sure relying on the index position is safe - perhaps selection_id has to be used as a dict key for my saved lists which would slow things down quite a bit - important if it was a live betting strategy ?\n\nI have noticed that BF change the \"sort_priority\" field for runners when there are withdrawals but not sure how\/if that impacts flumine.\n\nOne area of difference I have found is with \"market.market_book.market_definition.runners\" which appears to be in BF sort order with N\/R at the end whereas \"market.market_catalogue.runners\" and \"market.market_book.runners\" appear to remain in fixed positions regardless of withdrawal.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uE63f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm developing some analysis based on the example datacollectinwom.py and am gathering lists of data per runner for graphing etc. I hadn't allowed for getting a None price from non-runners so it blew up (expected behaviour lol). However, that got me thinking about some key assumptions I had made and I wonder if they were safe, particularly with non-runners - maybe those with more knowledge could comment.\nAssumptions:\n1) the strategy callback argument \"market_book\" is the same object as could be accessed at \"market.market_book\"\n2) the strategy callback \"check_market_book\" is made for every \"mcm\" streaming packet received and if that returns True then \"process_market_book\" is called - this means the strategy is offered every packet\n3) for each callback all the data from the supplied market\/market_book pointers has been updated to reflect the changes implied by the packet\n4) the list of runners in the market_book and their index order is invariant ie runner Fred will be at the same index in \"market_book\" from first recording through to closed market\n\nI think the first three are correct but not sure relying on the index position is safe - perhaps selection_id has to be used as a dict key for my saved lists which would slow things down quite a bit - important if it was a live betting strategy ?\n\nI have noticed that BF change the \"sort_priority\" field for runners when there are withdrawals but not sure how\/if that impacts flumine.\n\nOne area of difference I have found is with \"market.market_book.market_definition.runners\" which appears to be in BF sort order with N\/R at the end whereas \"market.market_catalogue.runners\" and \"market.market_book.runners\" appear to remain in fixed positions regardless of withdrawal."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1642251546.001300",
        "client_msg_id": "5DAA56AC-DAF5-40C6-B309-0FA54739A185",
        "text": "Yes, yes, yes, no don't trust the order ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1VDm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, yes, yes, no don't trust the order "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U02RN7YDRQ9"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBS7QANF3",
        "type": "message",
        "ts": "1642251669.001700",
        "client_msg_id": "fab2209b-cddc-4976-b73a-de17876c0619",
        "text": "+ Worrying about dictionary lookup speed for live trading is premature optimisation",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gaaf844a4a90",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eaaf844a4a905431d83430e563b077aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Maurice Berk",
            "display_name": "Mo",
            "team": "T4G9NBD2M",
            "name": "maurice",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C93w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "+ Worrying about dictionary lookup speed for live trading is premature optimisation"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0135SLHQBW",
        "type": "message",
        "ts": "1642252430.002700",
        "edited": {
            "user": "U0135SLHQBW",
            "ts": "1642252479.000000"
        },
        "client_msg_id": "ca09601a-c4f0-4755-a7d0-aabcb015717d",
        "text": "(also, dictionary lookup is basically the fastest operation python can do. If you time it, you'll see it's typically on the order of nanos for simple keys and moderately sized dicts - cache miss depending)",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g316814ce896",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/316814ce896c34a9c72e2ddd6fa17b86.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "",
            "real_name": "MacrcoPolo",
            "display_name": "MacrcoPolo",
            "team": "T4G9NBD2M",
            "name": "omverran",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/Wu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(also, dictionary lookup is basically the fastest operation python can do. If you time it, you'll see it's typically on the order of nanos for simple keys and moderately sized dicts - cache miss depending)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "U011VL3CA2Y",
                    "U02FXEUUMRN"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1642257400.008200",
        "client_msg_id": "31b90450-5268-4dc7-aae2-121a94c38985",
        "text": "Many thanks for quick and clear replies. Was afraid that was going to be the answer - wanting the easy solution and trying to find reasons like speed why it should be the way I wanted it to work - procrastinating despite the obvious safety and future-proofing of matching the id's doh. Also just realised the confusion that could ensue relying on just the index with greyhounds when a reserve is swapped in - same trap (index) but different dog.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yCT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Many thanks for quick and clear replies. Was afraid that was going to be the answer - wanting the easy solution and trying to find reasons like speed why it should be the way I wanted it to work - procrastinating despite the obvious safety and future-proofing of matching the id's doh. Also just realised the confusion that could ensue relying on just the index with greyhounds when a reserve is swapped in - same trap (index) but different dog."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]