[
    {
        "user": "U05N6GUQ7EK",
        "type": "message",
        "ts": "1692895203.814239",
        "edited": {
            "user": "U05N6GUQ7EK",
            "ts": "1692895210.000000"
        },
        "client_msg_id": "0f308d21-bc3b-42da-8073-ce872ff88b67",
        "text": "Question about reference data. Where do you get reference data about football teams? i.e. trying to have a strict mapping between a team name and its ID, league refdata (what teams are playing, etc.)?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "gb06a4de6d08",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b06a4de6d089c99db7376fe532f2f362.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Y",
            "real_name": "Y B",
            "display_name": "Y B",
            "team": "T4G9NBD2M",
            "name": "yury.bandarchuk",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "foied",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Question about reference data. Where do you get reference data about football teams? i.e. trying to have a strict mapping between a team name and its ID, league refdata (what teams are playing, etc.)?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05KGFZUNAK",
        "type": "message",
        "ts": "1692896913.517979",
        "client_msg_id": "fc0ead4d-b884-4d30-aae2-6eab1930af52",
        "text": "i use this self-made function, maybe can help, or improved\n```def get_statistics(in_play_only=None):\n    for event_type in Calcio_event_type_id:\n        # prints id, name and market count\n        #print(event_type.event_type.id, event_type.event_type.name, event_type.market_count)\n        calcio_id = event_type.event_type.id\n\n        # list of events\n        event_list = trading.betting.list_events(\n            filter=filters.market_filter(\n                event_type_ids=[calcio_id], # filter on just football\n                in_play_only=in_play_only,  \n                #market_countries=[\"IT\"],  # filter on just GB countries\n                # market_type_codes=[\"WIN\"],  # filter on just WIN market types\n\n            ), locale=\"IT\"\n        )[:10]  # Seleziona solo i primi 10 elementi della lista\n        \n        combined_runner_dict = {}  # Dizionario per memorizzare i dati dei runner fusi\n        for event in event_list:\n            #print(event.event.id, event.event.name)\n            inplay = trading.in_play_service.get_event_timeline(event_id=event.event.id)\n            \n            market_catalogues = trading.betting.list_market_catalogue(\n                filter=filters.market_filter(\n                    event_type_ids=[calcio_id],  # filter on just football\n                    event_ids=[event.event.id],\n                    # market_countries=[\"GB\"],  # filter on just GB countries\n                    market_type_codes=[\"MATCH_ODDS\"],  # filter on just WIN market types\n                ),\n                market_projection=[\n                    \"COMPETITION\",\n                    \"EVENT\",\n                    \"EVENT_TYPE\",\n                    \"MARKET_START_TIME\",\n                    \"MARKET_DESCRIPTION\",\n                    \"RUNNER_DESCRIPTION\",\n                    \"RUNNER_METADATA\",\n                ],  # runner description required\n                max_results=10, locale=\"IT\",\n            )\n            #print(\"%s market catalogues returned\" % len(market_catalogues))\n            for market_catalogue in market_catalogues:\n                #print(market_catalogue.market_id,\n                    #market_catalogue.market_name,\n                    #market_catalogue.market_start_time,)\n                \n                for runner in market_catalogue.runners:\n                    #print(runner.selection_id, runner.runner_name, runner.handicap)\n                    if inplay.status:\n                        \n                        runner_data = combined_runner_dict.setdefault(f\"{market_catalogue.market_id}_{runner.selection_id}_{inplay.time_elapsed}\",{})\n                        runner_data[\"event_id\"] = event.event.id\n                        runner_data[\"event_name\"] = event.event.name\n                        runner_data[\"market_id\"] = market_catalogue.market_id\n                        runner_data[\"market_start_time\"] = market_catalogue.market_start_time\n                        runner_data[\"selection_id\"] = runner.selection_id\n                        runner_data[\"runner_name\"] = runner.runner_name\n                        runner_data[\"handicap\"] = runner.handicap\n                        market_books = trading.betting.list_market_book(\n                            market_ids=[market_catalogue.market_id],\n                            price_projection=filters.price_projection(\n                            price_data=filters.price_data(ex_all_offers=True)\n                            ), locale=\"IT\",\n                        )\n                        for market_book in market_books:\n                        #print(market_book.market_id,\n                            #market_book.inplay,\n                            #market_book.status,\n                            #market_book.total_matched,)\n                            for runner in market_book.runners:\n                            #print(runner.selection_id, runner.status, runner.total_matched, runner.last_price_traded)\n                                runner_data = combined_runner_dict.setdefault(f\"{market_catalogue.market_id}_{runner.selection_id}_{inplay.time_elapsed}\", {})\n                                runner_data[\"selection_id\"] = runner.selection_id\n                                runner_data[\"total_matched\"] = runner.total_matched\n                                runner_data[\"last_price_traded\"] = runner.last_price_traded\n                                runner_data[\"Status\"] = market_book.status\n                                \n                                #runner_data = combined_runner_dict.setdefault(f\"{market_catalogue.market_id}_{runner.selection_id}_{inplay.time_elapsed}\", {})\n                                runner_data[\"Home Score\"] = inplay.score.home.score\n                                runner_data[\"Away Score\"] = inplay.score.away.score\n                                runner_data[\"Home Corners\"] = inplay.score.home.number_of_corners\n                                runner_data[\"Away Corners\"] = inplay.score.away.number_of_corners\n                                runner_data[\"Time Elapsed\"] = inplay.time_elapsed\n                                runner_data[\"Match Status\"] = inplay.in_play_match_status\n                                \n                                \n                                available_to_back = runner.ex.available_to_back\n                                available_to_lay = runner.ex.available_to_lay\n                            \n                            \n                            \n                                combined_runner_list = list(combined_runner_dict.values())\n        if combined_runner_dict:\n            df = pd.DataFrame(combined_runner_list)  \n            #df.sort_values(by=['event_id'], inplace=True)    \n        else:\n            df = pd.DataFrame()  # Create an empty DataFrame\n            #trading.race_card.login()\n            #race_cards = trading.race_card.get_race_card(market_ids=[market_catalogue.market_id])\n            #results = trading.race_card.get_race_result(market_ids=[market_catalogue.market_id])\n            #print(results)\n    \n    return df ```",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "fe4fff56282e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-02\/5700789261920_fe4fff56282eb87519ab_72.png",
            "first_name": "Riccardo",
            "real_name": "Riccardo Fresi",
            "display_name": "Riccardo Fresi",
            "team": "T4G9NBD2M",
            "name": "riccardo.fresi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692826908.396589",
        "parent_user_id": "U05N6GUQ7EK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tzXDA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i use this self-made function, maybe can help, or improved\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "def get_statistics(in_play_only=None):\n    for event_type in Calcio_event_type_id:\n        # prints id, name and market count\n        #print(event_type.event_type.id, event_type.event_type.name, event_type.market_count)\n        calcio_id = event_type.event_type.id\n\n        # list of events\n        event_list = trading.betting.list_events(\n            filter=filters.market_filter(\n                event_type_ids=[calcio_id], # filter on just football\n                in_play_only=in_play_only,  \n                #market_countries=[\"IT\"],  # filter on just GB countries\n                # market_type_codes=[\"WIN\"],  # filter on just WIN market types\n\n            ), locale=\"IT\"\n        )[:10]  # Seleziona solo i primi 10 elementi della lista\n        \n        combined_runner_dict = {}  # Dizionario per memorizzare i dati dei runner fusi\n        for event in event_list:\n            #print(event.event.id, event.event.name)\n            inplay = trading.in_play_service.get_event_timeline(event_id=event.event.id)\n            \n            market_catalogues = trading.betting.list_market_catalogue(\n                filter=filters.market_filter(\n                    event_type_ids=[calcio_id],  # filter on just football\n                    event_ids=[event.event.id],\n                    # market_countries=[\"GB\"],  # filter on just GB countries\n                    market_type_codes=[\"MATCH_ODDS\"],  # filter on just WIN market types\n                ),\n                market_projection=[\n                    \"COMPETITION\",\n                    \"EVENT\",\n                    \"EVENT_TYPE\",\n                    \"MARKET_START_TIME\",\n                    \"MARKET_DESCRIPTION\",\n                    \"RUNNER_DESCRIPTION\",\n                    \"RUNNER_METADATA\",\n                ],  # runner description required\n                max_results=10, locale=\"IT\",\n            )\n            #print(\"%s market catalogues returned\" % len(market_catalogues))\n            for market_catalogue in market_catalogues:\n                #print(market_catalogue.market_id,\n                    #market_catalogue.market_name,\n                    #market_catalogue.market_start_time,)\n                \n                for runner in market_catalogue.runners:\n                    #print(runner.selection_id, runner.runner_name, runner.handicap)\n                    if inplay.status:\n                        \n                        runner_data = combined_runner_dict.setdefault(f\"{market_catalogue.market_id}_{runner.selection_id}_{inplay.time_elapsed}\",{})\n                        runner_data[\"event_id\"] = event.event.id\n                        runner_data[\"event_name\"] = event.event.name\n                        runner_data[\"market_id\"] = market_catalogue.market_id\n                        runner_data[\"market_start_time\"] = market_catalogue.market_start_time\n                        runner_data[\"selection_id\"] = runner.selection_id\n                        runner_data[\"runner_name\"] = runner.runner_name\n                        runner_data[\"handicap\"] = runner.handicap\n                        market_books = trading.betting.list_market_book(\n                            market_ids=[market_catalogue.market_id],\n                            price_projection=filters.price_projection(\n                            price_data=filters.price_data(ex_all_offers=True)\n                            ), locale=\"IT\",\n                        )\n                        for market_book in market_books:\n                        #print(market_book.market_id,\n                            #market_book.inplay,\n                            #market_book.status,\n                            #market_book.total_matched,)\n                            for runner in market_book.runners:\n                            #print(runner.selection_id, runner.status, runner.total_matched, runner.last_price_traded)\n                                runner_data = combined_runner_dict.setdefault(f\"{market_catalogue.market_id}_{runner.selection_id}_{inplay.time_elapsed}\", {})\n                                runner_data[\"selection_id\"] = runner.selection_id\n                                runner_data[\"total_matched\"] = runner.total_matched\n                                runner_data[\"last_price_traded\"] = runner.last_price_traded\n                                runner_data[\"Status\"] = market_book.status\n                                \n                                #runner_data = combined_runner_dict.setdefault(f\"{market_catalogue.market_id}_{runner.selection_id}_{inplay.time_elapsed}\", {})\n                                runner_data[\"Home Score\"] = inplay.score.home.score\n                                runner_data[\"Away Score\"] = inplay.score.away.score\n                                runner_data[\"Home Corners\"] = inplay.score.home.number_of_corners\n                                runner_data[\"Away Corners\"] = inplay.score.away.number_of_corners\n                                runner_data[\"Time Elapsed\"] = inplay.time_elapsed\n                                runner_data[\"Match Status\"] = inplay.in_play_match_status\n                                \n                                \n                                available_to_back = runner.ex.available_to_back\n                                available_to_lay = runner.ex.available_to_lay\n                            \n                            \n                            \n                                combined_runner_list = list(combined_runner_dict.values())\n        if combined_runner_dict:\n            df = pd.DataFrame(combined_runner_list)  \n            #df.sort_values(by=['event_id'], inplace=True)    \n        else:\n            df = pd.DataFrame()  # Create an empty DataFrame\n            #trading.race_card.login()\n            #race_cards = trading.race_card.get_race_card(market_ids=[market_catalogue.market_id])\n            #results = trading.race_card.get_race_result(market_ids=[market_catalogue.market_id])\n            #print(results)\n    \n    return df "
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U05N6GUQ7EK"
                ],
                "count": 1
            }
        ]
    }
]