[
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1716142662.138969",
        "client_msg_id": "793e1126-04bc-436d-a00c-74dc5667ab76",
        "text": "I'm trying to simulate 2 parallel strategies running on the same market and talking to each using market.context. Seems like they are both created and started ok but then strategy1 goes through all files with no sign of strategy2 getting a look in. From the logs I see each strategy is added but each one gets its own version of the HistoricalStreams created from the market_filter[\"markets\"] file list when the strategy is constructed. Is there a way to make this work in simulation - I assume it works ok live judging by comments in other threads.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1716142662.138969",
        "reply_count": 8,
        "reply_users_count": 3,
        "latest_reply": "1716202105.014999",
        "reply_users": [
            "U4H19D1D2",
            "UQL0QDEKA",
            "U02RN7YDRQ9"
        ],
        "replies": [
            {
                "user": "U4H19D1D2",
                "ts": "1716144205.142419"
            },
            {
                "user": "UQL0QDEKA",
                "ts": "1716150395.210369"
            },
            {
                "user": "U02RN7YDRQ9",
                "ts": "1716150428.830489"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1716150472.224019"
            },
            {
                "user": "U02RN7YDRQ9",
                "ts": "1716150911.431979"
            },
            {
                "user": "U02RN7YDRQ9",
                "ts": "1716155127.582429"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1716182440.706279"
            },
            {
                "user": "U02RN7YDRQ9",
                "ts": "1716202105.014999"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1716202105.014999",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u8K7\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm trying to simulate 2 parallel strategies running on the same market and talking to each using market.context. Seems like they are both created and started ok but then strategy1 goes through all files with no sign of strategy2 getting a look in. From the logs I see each strategy is added but each one gets its own version of the HistoricalStreams created from the market_filter[\"markets\"] file list when the strategy is constructed. Is there a way to make this work in simulation - I assume it works ok live judging by comments in other threads."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1716144205.142419",
        "client_msg_id": "8F3C9F61-B6C8-42C1-B2E6-83D345AA5DE6",
        "text": "I think we might need to see some code \/ confirm you have followed the docs re multi market simulation ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1716142662.138969",
        "parent_user_id": "U02RN7YDRQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DnUZW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think we might need to see some code \/ confirm you have followed the docs re multi market simulation "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQL0QDEKA",
        "type": "message",
        "ts": "1716150395.210369",
        "client_msg_id": "a0ff0fc1-cfd6-407d-b1a9-20754832e0b3",
        "text": "Ive got a couple of backtesters foxwood that you might be able to have a look at\nIll send something over",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g444d10128c0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/444d10128c0aaf094041a52a76796602.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Peter",
            "real_name": "Peter Lenagh",
            "display_name": "PeterLe",
            "team": "T4G9NBD2M",
            "name": "lenagh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1716142662.138969",
        "parent_user_id": "U02RN7YDRQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TGArL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ive got a couple of backtesters foxwood that you might be able to have a look at\nIll send something over"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U02RN7YDRQ9"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1716150428.830489",
        "client_msg_id": "a1372ee3-b015-4626-9029-e559b24681e6",
        "text": "I've combined them into 1 strat for now but would be nice to get this working. Code follows docs I think but don't remember anything special on multi markets ? These are the main bits of code\n`dataDir = \"path to directory\"`\n`strats = [launchTest1, launchTest2]`\n`markets = [globbed list of fully pathed file names]`\n`client = clients.SimulatedClient()`\n`framework = FlumineSimulation(client=client)`\n\n`with mock_patch(\"builtins.open\", smart_open.open):`\n    `for launch in strats :`\n        `launch(framework, markets, client)`\n    `middleware.marketcatalogue.MARKET_CATALOGUE_PATH = dataDir`\n    `framework.add_market_middleware(MarketCatalogueMiddleware())`\n    `try:`\n        `framework.run()`\n    `except Exception as e:`\n        `print( traceback.format_exc() )`\n\n`In separate file for each strategy:`\n\n`def launchTestN(framework, markets, client):`\n    `launchtest(framework, markets, client)`\n\n`def launchtest(framework, markets, client):`\n    `framework.add_strategy(`\n        `stratN(`\n            `name=stratN.__name__,`\n            `market_filter={\"markets\": markets,`\n                           `\"listener_kwargs\": {}`\n                           `},`\n            `max_order_exposure=999,`\n\t         `etc,`\n            `context={\"client\": client, },`\n        `)`\n    `)`",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1716142662.138969",
        "parent_user_id": "U02RN7YDRQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3A1P1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've combined them into 1 strat for now but would be nice to get this working. Code follows docs I think but don't remember anything special on multi markets ? These are the main bits of code\n"
                            },
                            {
                                "type": "text",
                                "text": "dataDir = \"path to directory\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "strats = [launchTest1, launchTest2]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "markets = [globbed list of fully pathed file names]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "client = clients.SimulatedClient()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "framework = FlumineSimulation(client=client)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "with mock_patch(\"builtins.open\", smart_open.open):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    for launch in strats :",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        launch(framework, markets, client)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    middleware.marketcatalogue.MARKET_CATALOGUE_PATH = dataDir",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    framework.add_market_middleware(MarketCatalogueMiddleware())",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    try:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        framework.run()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    except Exception as e:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        print( traceback.format_exc() )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "In separate file for each strategy:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "def launchTestN(framework, markets, client):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    launchtest(framework, markets, client)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "def launchtest(framework, markets, client):",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    framework.add_strategy(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        stratN(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            name=stratN.__name__,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            market_filter={\"markets\": markets,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                           \"listener_kwargs\": {}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "                           },",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            max_order_exposure=999,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\t         etc,",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "            context={\"client\": client, },",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "        )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    )",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1716150472.224019",
        "client_msg_id": "4B32F5AB-24A1-4684-B69B-246D92AD2E00",
        "text": "Read the docs ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1716142662.138969",
        "parent_user_id": "U02RN7YDRQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QG\/r\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Read the docs "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1716150911.431979",
        "client_msg_id": "87b71aa4-6ce9-49c9-bbb8-3d6a513c891a",
        "text": "<https:\/\/betcode-org.github.io\/flumine> or something else ?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1716142662.138969",
        "parent_user_id": "U02RN7YDRQ9",
        "attachments": [
            {
                "from_url": "https:\/\/betcode-org.github.io\/flumine",
                "id": 1,
                "original_url": "https:\/\/betcode-org.github.io\/flumine",
                "fallback": "flumine",
                "text": "Betting trading framework",
                "title": "flumine",
                "title_link": "https:\/\/betcode-org.github.io\/flumine",
                "service_name": "betcode-org.github.io"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mvs+k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/betcode-org.github.io\/flumine"
                            },
                            {
                                "type": "text",
                                "text": " or something else ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1716155127.582429",
        "client_msg_id": "fb7a95b2-0031-43ba-a3e5-ef3b69361078",
        "text": "So I dug down into this and `add_historical_stream()` in streams.py only returns the stream created by another strategy if the file names are the same (True), the `event_processsing` is the same (True) and the `listener_kwargs` are the same (False).\nThe two strategies kwargs had different `seconds_to_start` and no other entries. Not sure why that should be counted as a different market feed but does explain what I found. Didn't discover this in any of the \"docs\" though. Assume the strategies would work in parallel if it did all match but not tested.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1716142662.138969",
        "parent_user_id": "U02RN7YDRQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I+sLu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So I dug down into this and "
                            },
                            {
                                "type": "text",
                                "text": "add_historical_stream()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in streams.py only returns the stream created by another strategy if the file names are the same (True), the "
                            },
                            {
                                "type": "text",
                                "text": "event_processsing ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "is the same (True) and the "
                            },
                            {
                                "type": "text",
                                "text": "listener_kwargs ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "are the same (False).\nThe two strategies kwargs had different "
                            },
                            {
                                "type": "text",
                                "text": "seconds_to_start ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "and no other entries. Not sure why that should be counted as a different market feed but does explain what I found. Didn't discover this in any of the \"docs\" though. Assume the strategies would work in parallel if it did all match but not tested."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1716182440.706279",
        "client_msg_id": "c8aa0631-68e5-48e4-8a8a-27d944c07859",
        "text": "Your example code doesn't show this? The `listener_kwargs` act at the very lowest level of the stream logic within bflw in order to speed things up so if any are different they cannot be shared",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1716142662.138969",
        "parent_user_id": "U02RN7YDRQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XLD1u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Your example code doesn't show this? The "
                            },
                            {
                                "type": "text",
                                "text": "listener_kwargs",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " act at the very lowest level of the stream logic within bflw in order to speed things up so if any are different they cannot be shared"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]