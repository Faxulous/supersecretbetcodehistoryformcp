[
    {
        "user": "U06V1BG64MT",
        "type": "message",
        "ts": "1724927605.612479",
        "client_msg_id": "a783010a-fb57-44e3-ac42-849c32cd987a",
        "text": "What is the appropriate way to the deal with missed market status updates? In case my server goes down for a minute or two, how should I retrieve updates for all the markets I was subscribed to?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "9144115f2782",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-04-19\/6983676035574_9144115f2782feefe132_72.jpg",
            "first_name": "Bassam",
            "real_name": "Bassam Ismail",
            "display_name": "Bassam Ismail",
            "team": "T4G9NBD2M",
            "name": "bassam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724927605.612479",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1724928031.283039",
        "reply_users": [
            "U4H19D1D2",
            "U06V1BG64MT"
        ],
        "replies": [
            {
                "user": "U4H19D1D2",
                "ts": "1724927729.219819"
            },
            {
                "user": "U06V1BG64MT",
                "ts": "1724927758.480839"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1724927815.480469"
            },
            {
                "user": "U06V1BG64MT",
                "ts": "1724928031.283039"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1724928031.283039",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cGvqi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What is the appropriate way to the deal with missed market status updates? In case my server goes down for a minute or two, how should I retrieve updates for all the markets I was subscribed to?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1724927729.219819",
        "client_msg_id": "bab17128-c5c8-4b46-8cb5-cfa234a42577",
        "text": "bflw? flumine? streaming?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724927605.612479",
        "parent_user_id": "U06V1BG64MT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rRrOT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "bflw? flumine? streaming?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06V1BG64MT",
        "type": "message",
        "ts": "1724927758.480839",
        "client_msg_id": "a077b980-340f-4def-9a52-cc1ca57750b5",
        "text": "bflw marketstream",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "9144115f2782",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-04-19\/6983676035574_9144115f2782feefe132_72.jpg",
            "first_name": "Bassam",
            "real_name": "Bassam Ismail",
            "display_name": "Bassam Ismail",
            "team": "T4G9NBD2M",
            "name": "bassam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724927605.612479",
        "parent_user_id": "U06V1BG64MT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GZRhb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "bflw marketstream"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1724927815.480469",
        "client_msg_id": "bc78ef0c-98ec-4e0c-809b-6c2c8826563b",
        "text": "easy answer is use flumine and it handles everything for you if you are doing it your own way then you want something similar to this example to handle a reconnection\n\n<https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/examples\/examplestreamingerrhandling.py>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724927605.612479",
        "parent_user_id": "U06V1BG64MT",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/examples\/examplestreamingerrhandling.py",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/examples\/examplestreamingerrhandling.py | examplestreamingerrhandling.py>",
                "text": "```\nimport logging\nimport queue\nimport threading\nfrom tenacity import retry, wait_exponential\n\nimport betfairlightweight\nfrom betfairlightweight import StreamListener\nfrom betfairlightweight import BetfairError\nfrom betfairlightweight.filters import (\n    streaming_market_filter,\n    streaming_market_data_filter,\n)\n\n\"\"\"\nStreaming example to handle timeouts or connection errors, \nwith reconnect.\n\nCode uses 'tenacity' library for retrying.\n\nStreaming class inherits threading module to simplify start\/\nstop.\n\"\"\"\n\n# setup logging\nlogging.basicConfig(level=<http:\/\/logging.INFO|logging.INFO>)  # change to DEBUG to see log all updates\nlogger = logging.getLogger(__name__)\n\n\nclass Streaming(threading.Thread):\n    def __init__(\n        self,\n        client: betfairlightweight.APIClient,\n        market_filter: dict,\n        market_data_filter: dict,\n        conflate_ms: int = None,\n        streaming_unique_id: int = 1000,\n    ):\n        threading.Thread.__init__(self, daemon=True, name=self.__class__.__name__)\n        self.client = client\n        self.market_filter = market_filter\n        self.market_data_filter = market_data_filter\n        self.conflate_ms = conflate_ms\n        self.streaming_unique_id = streaming_unique_id\n        self.stream = None\n        self.output_queue = queue.Queue()\n        self.listener = StreamListener(output_queue=self.output_queue)\n\n    @retry(wait=wait_exponential(multiplier=1, min=2, max=20))\n    def run(self) -> None:\n        <http:\/\/logger.info|logger.info>(\"Starting MarketStreaming\")\n        self.client.login()\n        self.stream = self.client.streaming.create_stream(\n            unique_id=self.streaming_unique_id, listener=self.listener\n        )\n        try:\n            self.streaming_unique_id = self.stream.subscribe_to_markets(\n                market_filter=self.market_filter,\n                market_data_filter=self.market_data_filter,\n                conflate_ms=self.conflate_ms,\n                initial_clk=self.listener.initial_clk,  # supplying these two values allows a reconnect\n                clk=self.listener.clk,\n            )\n            self.stream.start()\n        except BetfairError:\n            logger.error(\"MarketStreaming run error\", exc_info=True)\n            raise\n        except Exception:\n            logger.critical(\"MarketStreaming run error\", exc_info=True)\n            raise\n        <http:\/\/logger.info|logger.info>(\"Stopped MarketStreaming %s\", self.streaming_unique_id)\n\n    def stop(self) -> None:\n        if self.stream:\n            self.stream.stop()\n\n\n# create trading instance (app key must be activated for streaming)\ntrading = betfairlightweight.APIClient(\"username\", \"password\", app_key=\"appKey\")\n\n# login\ntrading.login()\n\n# create filters (GB WIN racing)\nmarket_filter = streaming_market_filter(\n    event_type_ids=[\"7\"], country_codes=[\"GB\"], market_types=[\"WIN\"]\n)\nmarket_data_filter = streaming_market_data_filter(\n    fields=[\"EX_BEST_OFFERS\", \"EX_MARKET_DEF\"], ladder_levels=3\n)\n\n# create streaming object\nstreaming = Streaming(trading, market_filter, market_data_filter)\n\n# start streaming (runs in new thread and handles any errors)\nstreaming.start()\n\n# check for updates in output queue\nwhile True:\n    market_books = streaming.output_queue.get()\n    print(market_books)\n\n    for market_book in market_books:\n        print(\n            market_book,\n            market_book.streaming_unique_id,  # unique id of stream (returned from subscribe request)\n            market_book.streaming_update,  # json update received\n            market_book.market_definition,  # streaming definition, similar to catalogue request\n            market_book.publish_time,  # betfair publish time of update\n        )\n\n```",
                "title": "<https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/examples\/examplestreamingerrhandling.py | examplestreamingerrhandling.py>",
                "footer": "<https:\/\/github.com\/betcode-org\/betfair|betcode-org\/betfair>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PSKDA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "easy answer is use flumine and it handles everything for you if you are doing it your own way then you want something similar to this example to handle a reconnection\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/betcode-org\/betfair\/blob\/master\/examples\/examplestreamingerrhandling.py"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U06V1BG64MT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U06V1BG64MT",
        "type": "message",
        "ts": "1724928031.283039",
        "client_msg_id": "21c7c8d8-f21d-4957-a172-bd64a215a163",
        "text": "I see, we are relying on market definition on subscription here. So the only scenario where I might not get the appropriate information would be in case the event is closed.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "9144115f2782",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-04-19\/6983676035574_9144115f2782feefe132_72.jpg",
            "first_name": "Bassam",
            "real_name": "Bassam Ismail",
            "display_name": "Bassam Ismail",
            "team": "T4G9NBD2M",
            "name": "bassam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724927605.612479",
        "parent_user_id": "U06V1BG64MT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pOSOX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see, we are relying on market definition on subscription here. So the only scenario where I might not get the appropriate information would be in case the event is closed."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "man-shrugging",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGV299K6H",
        "type": "message",
        "ts": "1724930182.646519",
        "client_msg_id": "9a078b21-e32a-430a-b40d-3f7433d96d29",
        "text": "Above and beyond there <@U4H19D1D2>.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3a262a3cfba",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3a262a3cfba292c18acf5777f65908a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Michael",
            "real_name": "Michael C",
            "display_name": "Michael",
            "team": "T4G9NBD2M",
            "name": "michael",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724816172.810659",
        "parent_user_id": "U07CNT9382G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1NrZ0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Above and beyond there "
                            },
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U07CNT9382G"
                ],
                "count": 1
            },
            {
                "name": "saluting_face",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U07CNT9382G",
        "type": "message",
        "ts": "1724932970.928659",
        "client_msg_id": "943f8760-767b-48c4-80c2-0c9f04bf53a0",
        "text": "is there a quick way to cancel all pending orders in flumine? im currently looping through all strategy orders and then using market.cancel_order but was wondering if there was a simpler way",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "22f746d239db",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-16\/7428447356242_22f746d239dbca4959b2_72.png",
            "first_name": "Aryan",
            "real_name": "Aryan Kapoor",
            "display_name": "Aryan Kapoor",
            "team": "T4G9NBD2M",
            "name": "aryanvkapoor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724932970.928659",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1724936843.675919",
        "reply_users": [
            "U4H19D1D2",
            "UGV299K6H"
        ],
        "replies": [
            {
                "user": "U4H19D1D2",
                "ts": "1724933141.064779"
            },
            {
                "user": "UGV299K6H",
                "ts": "1724936534.959059"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1724936843.675919"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1724936843.675919",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "56NAZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "is there a quick way to cancel all pending orders in flumine? im currently looping through all strategy orders and then using market.cancel_order but was wondering if there was a simpler way"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1724933141.064779",
        "client_msg_id": "475dc788-8681-4cf3-8564-ea177b2df965",
        "text": "You can't cancel a pending order",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724932970.928659",
        "parent_user_id": "U07CNT9382G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5KH\/8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can't cancel a pending order"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGV299K6H",
        "type": "message",
        "ts": "1724936534.959059",
        "client_msg_id": "fad7e88d-47b6-452f-8e06-89f6e2592efc",
        "text": "I'm gonna save 98 posts here: I  think he means unmatched orders.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3a262a3cfba",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3a262a3cfba292c18acf5777f65908a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Michael",
            "real_name": "Michael C",
            "display_name": "Michael",
            "team": "T4G9NBD2M",
            "name": "michael",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724932970.928659",
        "parent_user_id": "U07CNT9382G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZB4uP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm gonna save 98 posts here: I  think he means unmatched orders."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "neutral_face",
                "users": [
                    "U07CNT9382G"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1724936843.675919",
        "client_msg_id": "1f8ed685-cefe-4c64-98dc-be7f83dd902e",
        "text": "Agreed, however pending is a state in flumine so wanted to remove any confusion.\n\nThis is the quickest \/ most efficient way, using a <https:\/\/github.com\/betcode-org\/flumine\/blob\/d03def30a778e9460e336b53b0689edb953f7c55\/flumine\/execution\/transaction.py#L12|transaction> means it will be sent in a single http request\n\n```orders = market.blotter.strategy_orders(\n    self, order_status=OrderStatus.EXECUTABLE\n)\nwith market.transaction() as t:\n    for order in orders:\n        t.cancel_order(order)```\n",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724932970.928659",
        "parent_user_id": "U07CNT9382G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J0v6W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed, however pending is a state in flumine so wanted to remove any confusion.\n\nThis is the quickest \/ most efficient way, using a "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/d03def30a778e9460e336b53b0689edb953f7c55\/flumine\/execution\/transaction.py#L12",
                                "text": "transaction"
                            },
                            {
                                "type": "text",
                                "text": " means it will be sent in a single http request\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "orders = market.blotter.strategy_orders(\n    self, order_status=OrderStatus.EXECUTABLE\n)\nwith market.transaction() as t:\n    for order in orders:\n        t.cancel_order(order)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U07CNT9382G"
                ],
                "count": 1
            }
        ]
    }
]