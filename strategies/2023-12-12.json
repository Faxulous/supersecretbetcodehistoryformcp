[
    {
        "user": "U062XFMSGQY",
        "type": "message",
        "ts": "1702372556.062859",
        "edited": {
            "user": "U062XFMSGQY",
            "ts": "1702372594.000000"
        },
        "client_msg_id": "9848f328-9859-422e-b5f0-c8f95e293ed8",
        "text": "Hey quick question: does Flumine manage streams at the framework level or the strategy level? e.g. If I start two seperate strategies within the same framework that stream events from the *exact same markets (i.e* `framework.add_strategy(strategy1)` and `framework.add_strategy(strategy2)`), would it open one stream that both strategies ingest from, or two separate streams? If it’s the latter, would that increase latency since the network request is doubled?",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g5fb47327d92",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5fb47327d9213e2afdb7faedfe617af1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Adam",
            "real_name": "Adam",
            "display_name": "Adam",
            "team": "T4G9NBD2M",
            "name": "goldberg.adam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1702372556.062859",
        "reply_count": 17,
        "reply_users_count": 2,
        "latest_reply": "1702461657.070289",
        "reply_users": [
            "U4H19D1D2",
            "U062XFMSGQY"
        ],
        "replies": [
            {
                "user": "U4H19D1D2",
                "ts": "1702372590.798139"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702372605.552149"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702372608.034469"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702372648.030389"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1702372681.215279"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702460918.475129"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1702460945.936629"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702460960.804169"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702460981.567899"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1702460991.164029"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702461034.910829"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1702461050.671889"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702461133.426379"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702461147.611489"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1702461622.260859"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702461643.775129"
            },
            {
                "user": "U062XFMSGQY",
                "ts": "1702461657.070289"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1702461657.070289",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RrTjn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey quick question: does Flumine manage streams at the framework level or the strategy level? e.g. If I start two seperate strategies within the same framework that stream events from the "
                            },
                            {
                                "type": "text",
                                "text": "exact same markets (i.e",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "framework.add_strategy(strategy1)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "framework.add_strategy(strategy2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "), would it open one stream that both strategies ingest from, or two separate streams? If it’s the latter, would that increase latency since the network request is doubled?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1702372590.798139",
        "client_msg_id": "a588c2ca-197e-449a-91a6-1acf1cc01036",
        "text": "Single",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1702372556.062859",
        "parent_user_id": "U062XFMSGQY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KBh9R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Single"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U062XFMSGQY",
        "type": "message",
        "ts": "1702372605.552149",
        "client_msg_id": "8e612060-91cb-4ab8-b68c-441adeac1b35",
        "text": "that’s so cool",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g5fb47327d92",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5fb47327d9213e2afdb7faedfe617af1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Adam",
            "real_name": "Adam",
            "display_name": "Adam",
            "team": "T4G9NBD2M",
            "name": "goldberg.adam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1702372556.062859",
        "parent_user_id": "U062XFMSGQY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WfvKz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that’s so cool"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U062XFMSGQY",
        "type": "message",
        "ts": "1702372608.034469",
        "client_msg_id": "02eac28f-0cdc-4dd2-bfc1-1d83bab3e26a",
        "text": "what a win",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g5fb47327d92",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5fb47327d9213e2afdb7faedfe617af1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Adam",
            "real_name": "Adam",
            "display_name": "Adam",
            "team": "T4G9NBD2M",
            "name": "goldberg.adam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1702372556.062859",
        "parent_user_id": "U062XFMSGQY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gKyw9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what a win"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U062XFMSGQY",
        "type": "message",
        "ts": "1702372648.030389",
        "client_msg_id": "981f910b-0a80-42f5-9511-2ea975f83b98",
        "text": "thanks",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g5fb47327d92",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5fb47327d9213e2afdb7faedfe617af1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Adam",
            "real_name": "Adam",
            "display_name": "Adam",
            "team": "T4G9NBD2M",
            "name": "goldberg.adam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1702372556.062859",
        "parent_user_id": "U062XFMSGQY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QN5Fg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1702372681.215279",
        "client_msg_id": "4311a4b5-5784-4a81-9acc-eb899165841f",
        "text": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/125c18a11881359eb795b248b74838e858d14fc6\/flumine\/streams\/streams.py#L94|logic>",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1702372556.062859",
        "parent_user_id": "U062XFMSGQY",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B021ZJYSBMW",
                "app_unfurl_url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/125c18a11881359eb795b248b74838e858d14fc6\/flumine\/streams\/streams.py#L94",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/125c18a11881359eb795b248b74838e858d14fc6\/flumine\/streams\/streams.py | streams.py>",
                "text": "```\n            for stream in self:  # check if market stream already exists\n```",
                "title": "<https:\/\/github.com\/betcode-org\/flumine\/blob\/125c18a11881359eb795b248b74838e858d14fc6\/flumine\/streams\/streams.py | streams.py>",
                "footer": "<https:\/\/github.com\/betcode-org\/flumine|betcode-org\/flumine>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2kqSY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/betcode-org\/flumine\/blob\/125c18a11881359eb795b248b74838e858d14fc6\/flumine\/streams\/streams.py#L94",
                                "text": "logic"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U062XFMSGQY"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UQL0QDEKA",
        "type": "message",
        "ts": "1702415545.853939",
        "client_msg_id": "0e50b883-0ece-4aa7-aa69-f6f0464fe9c2",
        "text": "Evening. All this chat about TPD :grinning:, although I've never made it pay in all honesty.\nI thought that id start to record it anyway by adding a second strategy to my current recorder\n\nWould someone kindly check I've added it in correctly please?\nI can see its recording the non TPD data, but i don't think there are anymore TPD races this evening in the US?\nIf someone can just cast their eye over it for comment ?\nthanks\n\n```import time\nimport logging\nimport os\nimport json\nimport betfairlightweight\nfrom pythonjsonlogger import jsonlogger\n\nfrom flumine import Flumine, clients, BaseStrategy\nfrom flumine.streams.datastream import DataStream\nfrom marketrecorder import MarketRecorder\n\nlogger = logging.getLogger()\n\ncustom_format = \"%(asctime) %(levelname) %(message)\"\nlog_handler = logging.StreamHandler()\nformatter = jsonlogger.JsonFormatter(custom_format)\nformatter.converter = time.gmtime\nlog_handler.setFormatter(formatter)\nlogger.addHandler(log_handler)\nlogger.setLevel(<http:\/\/logging.INFO|logging.INFO>)\n\nmyacc = str(input(\"TPD uk horses please enter account name Test1: \"))\napp_key = str(input(\"Please enter key: \"))\nmypass = str(input(\"Please enter Password and 2FA: \"))\ntrading = betfairlightweight.APIClient(myacc, mypass, app_key, certs=r\"C:\\certs\")\n\nclient = clients.BetfairClient(trading, order_stream=False)\n\nframework = Flumine(client=client)\n\n# First strategy\nstrategy = MarketRecorder(\n    name=\"WIN\",\n    market_filter=betfairlightweight.filters.streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\", \"IE\"],\n        market_types=[\"WIN\"],\n    ),\n    stream_class=DataStream,\n    context={\n        \"local_dir\": \"E:\/ukhorses\",\n        \"force_update\": False,\n        \"remove_file\": True,\n    },\n)\n\nframework.add_strategy(strategy)\n\n# Second strategy tpd\nclass TPDStrategy(BaseStrategy):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.data_directory = \"E:\/ukhorses\/tpd\"\n        os.makedirs(self.data_directory, exist_ok=True)\n\n    def process_sports_data(self, market, sports_data) -&gt; None:\n        filename = os.path.join(self.data_directory, f\"{market.market_id}.json\")\n        with open(filename, 'a') as file:\n            json.dump({\"market\": str(market), \"data\": sports_data}, file)\n            file.write('\\n')\n\nstrategy_tpd = TPDStrategy(\n    market_filter=betfairlightweight.filters.streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\", \"IE\", \"US\"],\n        market_types=[\"WIN\"]\n    ),\n    sports_data_filter=[\n        \"raceSubscription\"\n    ],\n)\n\nframework.add_strategy(strategy_tpd)\n\nframework.run()```\nThank you",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g444d10128c0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/444d10128c0aaf094041a52a76796602.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Peter",
            "real_name": "Peter Lenagh",
            "display_name": "PeterLe",
            "team": "T4G9NBD2M",
            "name": "lenagh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1702415545.853939",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1702476915.055879",
        "reply_users": [
            "U04NWADNCFR",
            "U4H19D1D2",
            "UQL0QDEKA"
        ],
        "replies": [
            {
                "user": "U04NWADNCFR",
                "ts": "1702416339.120939"
            },
            {
                "user": "U4H19D1D2",
                "ts": "1702455523.094369"
            },
            {
                "user": "UQL0QDEKA",
                "ts": "1702455872.781979"
            },
            {
                "user": "UQL0QDEKA",
                "ts": "1702476915.055879"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1702476915.055879",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7zJWK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Evening. All this chat about TPD "
                            },
                            {
                                "type": "emoji",
                                "name": "grinning",
                                "unicode": "1f600"
                            },
                            {
                                "type": "text",
                                "text": ", although I've never made it pay in all honesty.\nI thought that id start to record it anyway by adding a second strategy to my current recorder\n\nWould someone kindly check I've added it in correctly please?\nI can see its recording the non TPD data, but i don't think there are anymore TPD races this evening in the US?\nIf someone can just cast their eye over it for comment ?\nthanks\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "import time\nimport logging\nimport os\nimport json\nimport betfairlightweight\nfrom pythonjsonlogger import jsonlogger\n\nfrom flumine import Flumine, clients, BaseStrategy\nfrom flumine.streams.datastream import DataStream\nfrom marketrecorder import MarketRecorder\n\nlogger = logging.getLogger()\n\ncustom_format = \"%(asctime) %(levelname) %(message)\"\nlog_handler = logging.StreamHandler()\nformatter = jsonlogger.JsonFormatter(custom_format)\nformatter.converter = time.gmtime\nlog_handler.setFormatter(formatter)\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.INFO)\n\nmyacc = str(input(\"TPD uk horses please enter account name Test1: \"))\napp_key = str(input(\"Please enter key: \"))\nmypass = str(input(\"Please enter Password and 2FA: \"))\ntrading = betfairlightweight.APIClient(myacc, mypass, app_key, certs=r\"C:\\certs\")\n\nclient = clients.BetfairClient(trading, order_stream=False)\n\nframework = Flumine(client=client)\n\n# First strategy\nstrategy = MarketRecorder(\n    name=\"WIN\",\n    market_filter=betfairlightweight.filters.streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\", \"IE\"],\n        market_types=[\"WIN\"],\n    ),\n    stream_class=DataStream,\n    context={\n        \"local_dir\": \"E:\/ukhorses\",\n        \"force_update\": False,\n        \"remove_file\": True,\n    },\n)\n\nframework.add_strategy(strategy)\n\n# Second strategy tpd\nclass TPDStrategy(BaseStrategy):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.data_directory = \"E:\/ukhorses\/tpd\"\n        os.makedirs(self.data_directory, exist_ok=True)\n\n    def process_sports_data(self, market, sports_data) -> None:\n        filename = os.path.join(self.data_directory, f\"{market.market_id}.json\")\n        with open(filename, 'a') as file:\n            json.dump({\"market\": str(market), \"data\": sports_data}, file)\n            file.write('\\n')\n\nstrategy_tpd = TPDStrategy(\n    market_filter=betfairlightweight.filters.streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\", \"IE\", \"US\"],\n        market_types=[\"WIN\"]\n    ),\n    sports_data_filter=[\n        \"raceSubscription\"\n    ],\n)\n\nframework.add_strategy(strategy_tpd)\n\nframework.run()"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U04NWADNCFR",
        "thread_ts": "1702415545.853939",
        "root": {
            "user": "UQL0QDEKA",
            "type": "message",
            "ts": "1702415545.853939",
            "client_msg_id": "0e50b883-0ece-4aa7-aa69-f6f0464fe9c2",
            "text": "Evening. All this chat about TPD :grinning:, although I've never made it pay in all honesty.\nI thought that id start to record it anyway by adding a second strategy to my current recorder\n\nWould someone kindly check I've added it in correctly please?\nI can see its recording the non TPD data, but i don't think there are anymore TPD races this evening in the US?\nIf someone can just cast their eye over it for comment ?\nthanks\n\n```import time\nimport logging\nimport os\nimport json\nimport betfairlightweight\nfrom pythonjsonlogger import jsonlogger\n\nfrom flumine import Flumine, clients, BaseStrategy\nfrom flumine.streams.datastream import DataStream\nfrom marketrecorder import MarketRecorder\n\nlogger = logging.getLogger()\n\ncustom_format = \"%(asctime) %(levelname) %(message)\"\nlog_handler = logging.StreamHandler()\nformatter = jsonlogger.JsonFormatter(custom_format)\nformatter.converter = time.gmtime\nlog_handler.setFormatter(formatter)\nlogger.addHandler(log_handler)\nlogger.setLevel(<http:\/\/logging.INFO|logging.INFO>)\n\nmyacc = str(input(\"TPD uk horses please enter account name Test1: \"))\napp_key = str(input(\"Please enter key: \"))\nmypass = str(input(\"Please enter Password and 2FA: \"))\ntrading = betfairlightweight.APIClient(myacc, mypass, app_key, certs=r\"C:\\certs\")\n\nclient = clients.BetfairClient(trading, order_stream=False)\n\nframework = Flumine(client=client)\n\n# First strategy\nstrategy = MarketRecorder(\n    name=\"WIN\",\n    market_filter=betfairlightweight.filters.streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\", \"IE\"],\n        market_types=[\"WIN\"],\n    ),\n    stream_class=DataStream,\n    context={\n        \"local_dir\": \"E:\/ukhorses\",\n        \"force_update\": False,\n        \"remove_file\": True,\n    },\n)\n\nframework.add_strategy(strategy)\n\n# Second strategy tpd\nclass TPDStrategy(BaseStrategy):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.data_directory = \"E:\/ukhorses\/tpd\"\n        os.makedirs(self.data_directory, exist_ok=True)\n\n    def process_sports_data(self, market, sports_data) -&gt; None:\n        filename = os.path.join(self.data_directory, f\"{market.market_id}.json\")\n        with open(filename, 'a') as file:\n            json.dump({\"market\": str(market), \"data\": sports_data}, file)\n            file.write('\\n')\n\nstrategy_tpd = TPDStrategy(\n    market_filter=betfairlightweight.filters.streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\", \"IE\", \"US\"],\n        market_types=[\"WIN\"]\n    ),\n    sports_data_filter=[\n        \"raceSubscription\"\n    ],\n)\n\nframework.add_strategy(strategy_tpd)\n\nframework.run()```\nThank you",
            "team": "T4G9NBD2M",
            "thread_ts": "1702415545.853939",
            "reply_count": 4,
            "reply_users_count": 3,
            "latest_reply": "1702476915.055879",
            "reply_users": [
                "U04NWADNCFR",
                "U4H19D1D2",
                "UQL0QDEKA"
            ],
            "replies": [
                {
                    "user": "U04NWADNCFR",
                    "ts": "1702416339.120939"
                },
                {
                    "user": "U4H19D1D2",
                    "ts": "1702455523.094369"
                },
                {
                    "user": "UQL0QDEKA",
                    "ts": "1702455872.781979"
                },
                {
                    "user": "UQL0QDEKA",
                    "ts": "1702476915.055879"
                }
            ],
            "is_locked": false,
            "subscribed": true,
            "last_read": "1702476915.055879",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "7zJWK",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Evening. All this chat about TPD "
                                },
                                {
                                    "type": "emoji",
                                    "name": "grinning",
                                    "unicode": "1f600"
                                },
                                {
                                    "type": "text",
                                    "text": ", although I've never made it pay in all honesty.\nI thought that id start to record it anyway by adding a second strategy to my current recorder\n\nWould someone kindly check I've added it in correctly please?\nI can see its recording the non TPD data, but i don't think there are anymore TPD races this evening in the US?\nIf someone can just cast their eye over it for comment ?\nthanks\n\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_preformatted",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "import time\nimport logging\nimport os\nimport json\nimport betfairlightweight\nfrom pythonjsonlogger import jsonlogger\n\nfrom flumine import Flumine, clients, BaseStrategy\nfrom flumine.streams.datastream import DataStream\nfrom marketrecorder import MarketRecorder\n\nlogger = logging.getLogger()\n\ncustom_format = \"%(asctime) %(levelname) %(message)\"\nlog_handler = logging.StreamHandler()\nformatter = jsonlogger.JsonFormatter(custom_format)\nformatter.converter = time.gmtime\nlog_handler.setFormatter(formatter)\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.INFO)\n\nmyacc = str(input(\"TPD uk horses please enter account name Test1: \"))\napp_key = str(input(\"Please enter key: \"))\nmypass = str(input(\"Please enter Password and 2FA: \"))\ntrading = betfairlightweight.APIClient(myacc, mypass, app_key, certs=r\"C:\\certs\")\n\nclient = clients.BetfairClient(trading, order_stream=False)\n\nframework = Flumine(client=client)\n\n# First strategy\nstrategy = MarketRecorder(\n    name=\"WIN\",\n    market_filter=betfairlightweight.filters.streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\", \"IE\"],\n        market_types=[\"WIN\"],\n    ),\n    stream_class=DataStream,\n    context={\n        \"local_dir\": \"E:\/ukhorses\",\n        \"force_update\": False,\n        \"remove_file\": True,\n    },\n)\n\nframework.add_strategy(strategy)\n\n# Second strategy tpd\nclass TPDStrategy(BaseStrategy):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.data_directory = \"E:\/ukhorses\/tpd\"\n        os.makedirs(self.data_directory, exist_ok=True)\n\n    def process_sports_data(self, market, sports_data) -> None:\n        filename = os.path.join(self.data_directory, f\"{market.market_id}.json\")\n        with open(filename, 'a') as file:\n            json.dump({\"market\": str(market), \"data\": sports_data}, file)\n            file.write('\\n')\n\nstrategy_tpd = TPDStrategy(\n    market_filter=betfairlightweight.filters.streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\", \"IE\", \"US\"],\n        market_types=[\"WIN\"]\n    ),\n    sports_data_filter=[\n        \"raceSubscription\"\n    ],\n)\n\nframework.add_strategy(strategy_tpd)\n\nframework.run()"
                                }
                            ],
                            "border": 0
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Thank you"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1702416339.120939",
        "client_msg_id": "5650c747-5580-40a2-a578-7230b75dddc8",
        "text": "```strategy_gps = S3MarketRecorderGPS(\n        name=\"GPSWIN\",\n        market_filter=None,\n        stream_class=RaceDataStream,\n        sports_data_filter=['raceSubscription'],\n        context={\n            \"bucket\": BUCKET_NAME,\n            \"local_dir\": data_dir_gps,\n            \"force_update\": False,\n            \"remove_file\": True,\n            \"remove_gz_file\": True,\n        }\n)\n\nframework.add_strategy(strategy_gps)```\nOne above works, have you missed out the stream_class?",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pm3l4",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "strategy_gps = S3MarketRecorderGPS(\n        name=\"GPSWIN\",\n        market_filter=None,\n        stream_class=RaceDataStream,\n        sports_data_filter=['raceSubscription'],\n        context={\n            \"bucket\": BUCKET_NAME,\n            \"local_dir\": data_dir_gps,\n            \"force_update\": False,\n            \"remove_file\": True,\n            \"remove_gz_file\": True,\n        }\n)\n\nframework.add_strategy(strategy_gps)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One above works, have you missed out the stream_class?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQL0QDEKA",
        "type": "message",
        "ts": "1702416746.430369",
        "client_msg_id": "66735a9c-082c-4eb3-abfd-a250df1382c8",
        "text": "sorry dont know Derek. (My python knowledge is basic) :confused:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g444d10128c0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/444d10128c0aaf094041a52a76796602.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Peter",
            "real_name": "Peter Lenagh",
            "display_name": "PeterLe",
            "team": "T4G9NBD2M",
            "name": "lenagh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1O6kl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "sorry dont know Derek. (My python knowledge is basic) "
                            },
                            {
                                "type": "emoji",
                                "name": "confused",
                                "unicode": "1f615"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04NWADNCFR",
        "type": "message",
        "ts": "1702417169.361889",
        "client_msg_id": "44b58453-1861-4a0c-87f8-efda7c85c54c",
        "text": "I think you will need this import at the top of the file:\n\n```from flumine.streams.datastream import RaceDataStream```\nand then add this to the TPDStrategy params:\n\n```stream_class=RaceDataStream,```\n",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g3c4e33a28db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3c4e33a28dbfc1fe70799f8e243bf305.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Derek",
            "real_name": "Derek C",
            "display_name": "Derek C",
            "team": "T4G9NBD2M",
            "name": "dataexmachinazzzzz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vNOgK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you will need this import at the top of the file:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "from flumine.streams.datastream import RaceDataStream"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and then add this to the TPDStrategy params:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "stream_class=RaceDataStream,"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "UQL0QDEKA",
        "type": "message",
        "ts": "1702417982.075239",
        "client_msg_id": "4541592A-CF2A-41CA-8EC5-82BFB3EFBEE1",
        "text": "Thanks Derek, I’ll give that a try tomorrow :+1: ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g444d10128c0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/444d10128c0aaf094041a52a76796602.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Peter",
            "real_name": "Peter Lenagh",
            "display_name": "PeterLe",
            "team": "T4G9NBD2M",
            "name": "lenagh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kCWxq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Derek, "
                            },
                            {
                                "type": "text",
                                "text": "I’ll"
                            },
                            {
                                "type": "text",
                                "text": " give that a try tomorrow "
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U04NWADNCFR"
                ],
                "count": 1
            }
        ]
    }
]