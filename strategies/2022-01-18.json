[
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1642495728.015700",
        "client_msg_id": "50a905f9-583f-4334-9aa5-bf33aa377eba",
        "text": "Thanks for that <@U4H19D1D2> - useful tip. I had a parallel array of extra info for each runner so keeping the index the same would have made that easier. I've wrapped that in a class now and indexed on selection_id. A bonus thing about your comment was it made me think about market changes and realised that a greyhound substitution would introduce a new selection_id which wouldn't be in my set - something else to cope with :smile:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ax=Pc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for that "
                            },
                            {
                                "type": "user",
                                "user_id": "U4H19D1D2"
                            },
                            {
                                "type": "text",
                                "text": " - useful tip. I had a parallel array of extra info for each runner so keeping the index the same would have made that easier. I've wrapped that in a class now and indexed on selection_id. A bonus thing about your comment was it made me think about market changes and realised that a greyhound substitution would introduce a new selection_id which wouldn't be in my set - something else to cope with "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1642495971.016400",
        "client_msg_id": "9410d4a2-115e-4f80-9a51-b3b8ca92269c",
        "text": "Yeah its a handy trigger to update anything you have cached, flumine uses it to trigger a new marketCatalogue request, dramatically cutting down requests",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DcbQG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah its a handy trigger to update anything you have cached, flumine uses it to trigger a new marketCatalogue request, dramatically cutting down requests"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U02RN7YDRQ9"
                ],
                "count": 1
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U02U856CLSJ",
        "text": "<@U02U856CLSJ> has joined the channel",
        "type": "message",
        "ts": "1642496845.016800"
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1642535672.017400",
        "client_msg_id": "b54f2c9f-52e4-49eb-ab08-51e90be21dea",
        "text": "I have built a strategy using \"datacollectwom.py\" as a template. In that example it adds a new dictionary variable named \"data\" to market.context the first time any new market is passed to check_market_book. I've copied that approach for a strategy that watches market movements and prices and bets when appropriate. That's testing out reasonably so far with history files but I've hit some questions \/ doubts ...\n\n1) is there a special reason for using market.context for the \"data\" variable or could I do something safely at a higher level without interfering with bflw\/flumine eg market.mydatavar = {} ?\n2) is it common \/ naughty in Python to add a variable dynamically like that ?\n3) if the \"enhanced\" market object is deleted then any data in that variable would be lost. In bflw or flumine is there a case of a market object being deleted and recreated from scratch ie some sort of mcm case where the approach is to discard what was held and rebuild the market object from scratch ?\n4) the main.py for the datacollectwom is processing history files - would the same structure \/code for a strategy (less mock_patch) work with live streaming data ie would it just be simply a change of input source for the json ?\n\nSorry if some of these questions seem basic but trying to fill in some of my python and flumine gaps",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+yX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have built a strategy using \"datacollectwom.py\" as a template. In that example it adds a new dictionary variable named \"data\" to market.context the first time any new market is passed to check_market_book. I've copied that approach for a strategy that watches market movements and prices and bets when appropriate. That's testing out reasonably so far with history files but I've hit some questions \/ doubts ...\n\n1) is there a special reason for using market.context for the \"data\" variable or could I do something safely at a higher level without interfering with bflw\/flumine eg market.mydatavar = {} ?\n2) is it common \/ naughty in Python to add a variable dynamically like that ?\n3) if the \"enhanced\" market object is deleted then any data in that variable would be lost. In bflw or flumine is there a case of a market object being deleted and recreated from scratch ie some sort of mcm case where the approach is to discard what was held and rebuild the market object from scratch ?\n4) the main.py for the datacollectwom is processing history files - would the same structure \/code for a strategy (less mock_patch) work with live streaming data ie would it just be simply a change of input source for the json ?\n\nSorry if some of these questions seem basic but trying to fill in some of my python and flumine gaps"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U4H19D1D2",
        "type": "message",
        "ts": "1642535961.021800",
        "client_msg_id": "F37FF358-9343-4270-9C8C-1A9534A788AD",
        "text": "Context is your safe place, just the flumine way of storing your own data in flumine objects that wonâ€™t be cleared etc.\n\nNot naughty but not very pythonic and your IDE might struggle with hints \n\nNo, only on a restart of the python process would the data be cleared. There would be a case of this if betfair closed a market and then recreated after 1hr but not sure that has ever happened\n\nDesigned so that strategies can be used live, paper and simulated with no changes ",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "137c5a3ef323",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-15\/6819395173841_137c5a3ef323f1944a1a_72.png",
            "first_name": "liam",
            "real_name": "liam",
            "display_name": "liam",
            "team": "T4G9NBD2M",
            "name": "liam",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fbr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Context is your safe place, just the flumine way of storing your own data in flumine objects that wonâ€™t be cleared etc.\n\nNot naughty but not very pythonic and your IDE might struggle with hints \n\nNo, only on a restart of the python process would the data be cleared. There would be a case of this if betfair closed a market and then recreated after 1hr but not sure that has ever happened\n\nDesigned so that strategies can be used live, paper and simulated with no changes "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02RN7YDRQ9",
        "type": "message",
        "ts": "1642539102.025700",
        "client_msg_id": "32517cd4-e821-4d2d-8681-69d26e9a1c76",
        "text": "Great that's where I'll store my stuff then and sounds robust as well - saves having to have a parallel dict of markets. Yes, I'm using PyCharm and it takes a while to catch up with it's hints when its not sure what the variable is. I think your design is very effective and python does suit it even though the language frustrates me at times. Thanks :slightly_smiling_face:",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "ge46f1f8b708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e46f1f8b708a630e3191de7b2c42b1d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "edblock",
            "real_name": "edblock",
            "display_name": "foxwood",
            "team": "T4G9NBD2M",
            "name": "eanb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642539102.025700",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1642592857.027200",
        "reply_users": [
            "U016TGY3676",
            "U02RN7YDRQ9"
        ],
        "replies": [
            {
                "user": "U016TGY3676",
                "ts": "1642545265.026000"
            },
            {
                "user": "U02RN7YDRQ9",
                "ts": "1642584431.026700"
            },
            {
                "user": "U016TGY3676",
                "ts": "1642589367.027000"
            },
            {
                "user": "U02RN7YDRQ9",
                "ts": "1642592857.027200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ES",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great that's where I'll store my stuff then and sounds robust as well - saves having to have a parallel dict of markets. Yes, I'm using PyCharm and it takes a while to catch up with it's hints when its not sure what the variable is. I think your design is very effective and python does suit it even though the language frustrates me at times. Thanks "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U02UMK5SLQL",
        "text": "<@U02UMK5SLQL> has joined the channel",
        "type": "message",
        "ts": "1642544148.025900"
    },
    {
        "user": "U016TGY3676",
        "type": "message",
        "ts": "1642545265.026000",
        "client_msg_id": "e0ce3c4c-7c22-4f33-b6b1-1dfd31a6b51d",
        "text": "Another plus is that by using market.context, everything you save there is still available for the lifetime of the market object, which is super useful if you need to save any data on market closure and\/or do some post-backtest processing before the framework exits.",
        "team": "T4G9NBD2M",
        "user_team": "T4G9NBD2M",
        "source_team": "T4G9NBD2M",
        "user_profile": {
            "avatar_hash": "g6a681220e11",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6a681220e11c1a2ed3685375d658dadb.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "birchy",
            "display_name": "birchy",
            "team": "T4G9NBD2M",
            "name": "birchy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642539102.025700",
        "parent_user_id": "U02RN7YDRQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LuHf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another plus is that by using market.context, everything you save there is still available for the lifetime of the market object, which is super useful if you need to save any data on market closure and\/or do some post-backtest processing before the framework exits."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U4H19D1D2"
                ],
                "count": 1
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "U02UKKV89QB",
        "text": "<@U02UKKV89QB> has joined the channel",
        "type": "message",
        "ts": "1642548286.026300"
    },
    {
        "subtype": "channel_join",
        "user": "U02U5JV17QF",
        "text": "<@U02U5JV17QF> has joined the channel",
        "type": "message",
        "ts": "1642560572.026500"
    }
]